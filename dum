./mytests/test_advection/mod_usr.t:    unit_numberdensity = one/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/test_advection/mod_usr.f:    unit_numberdensity = one/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/noniso_atmosphere/mod_usr.t:  unit_numberdensity = rho_core/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/noniso_atmosphere/mod_usr.t:  unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/noniso_atmosphere/mod_usr.t:  unit_pressure=(2.d0+3.d0*He_abundance)*unit_numberdensity*kB_cgs*unit_temperature
./mytests/noniso_atmosphere/mod_usr.f:  unit_numberdensity = rho_core/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/noniso_atmosphere/mod_usr.f:  unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/noniso_atmosphere/mod_usr.f:  unit_pressure=(2.d0+3.d0*He_abundance&
./mytests/magnetosphere/mod_usr.t:    unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/magnetosphere/mod_usr.t:    unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/magnetosphere/mod_usr.t:    unit_pressure=(2.d0+3.d0*He_abundance)*unit_numberdensity*const_kB*unit_temperature
./mytests/magnetosphere/mod_usr.f:    unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/magnetosphere/mod_usr.f:    unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/magnetosphere/mod_usr.f:    unit_pressure=(2.d0+3.d0*He_abundance)&
./mytests/test_bisection/mod_usr.t:    unit_numberdensity = rho_0/((1.d0+4.d0*He_abundance)*mp_cgs) !rho_0/(fld_mu*mp_cgs)                                      ! cm^-3
./mytests/test_bisection/mod_usr.t:    unit_temperature   = e_0/(unit_numberdensity*(2.d0+3.d0*He_abundance)*kB_cgs) !e_0/(unit_numberdensity*rhd_gamma*kB_cgs)                   ! K
./mytests/test_bisection/mod_usr.f:    unit_numberdensity = rho_0/((1.d0+4.d0*He_abundance)*mp_cgs) !rho_0/(fld_mu*mp_cgs)                                      ! cm-3,cm-3
./mytests/test_bisection/mod_usr.f:       3.d0*He_abundance)*kB_cgs) !e_0/(unit_numberdensity*rhd_gamma*kB_cgs)                   ! K
./mytests/mg_diffusion/mod_usr.t:    unit_numberdensity = one/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/mg_diffusion/mod_usr.f:    unit_numberdensity = one/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/old_noniso/mod_usr.t:  unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/old_noniso/mod_usr.t:  unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/old_noniso/mod_usr.t:  unit_pressure=(2.d0+3.d0*He_abundance)*unit_numberdensity*const_kB*unit_temperature
./mytests/old_noniso/mod_usr.f:  unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/old_noniso/mod_usr.f:  unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/old_noniso/mod_usr.f:  unit_pressure=(2.d0+3.d0*He_abundance&
./mytests/magnetosphere_3/mod_usr.t:    unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/magnetosphere_3/mod_usr.t:    unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/magnetosphere_3/mod_usr.t:    unit_pressure=(2.d0+3.d0*He_abundance)*unit_numberdensity*const_kB*unit_temperature
./mytests/magnetosphere_3/mod_usr.f:    unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/magnetosphere_3/mod_usr.f:    unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/magnetosphere_3/mod_usr.f:    unit_pressure=(2.d0+3.d0*He_abundance)&
./mytests/blast_wave/mod_usr.t:    unit_numberdensity = 1.d0!/((1.d0+4.d0*He_abundance)*mp_cgs) ! cm^-3
./mytests/blast_wave/mod_usr.f:    unit_numberdensity = 1.d0!/((1.d0+4.d0*He_abundance)*mp_cgs) ! cm-3,cm-3
./mytests/isothermal_atmosphere/mod_usr.t:  ! unit_numberdensity = 8.955d-8/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/isothermal_atmosphere/mod_usr.t:unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/isothermal_atmosphere/mod_usr.f:  ! unit_numberdensity = 8.955d-8/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/isothermal_atmosphere/mod_usr.f:unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/CAK/mod_usr.t:    unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/CAK/mod_usr.t:    unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/CAK/mod_usr.t:    unit_pressure=(2.d0+3.d0*He_abundance)*unit_numberdensity*const_kB*unit_temperature
./mytests/CAK/mod_usr.f:    unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/CAK/mod_usr.f:    unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/CAK/mod_usr.f:    unit_pressure=(2.d0+3.d0*He_abundance)&
./mytests/magnetosphere_2.5/mod_usr.t:    unit_numberdensity = rho_bound/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/magnetosphere_2.5/mod_usr.t:    unit_density=(1.d0+4.d0*He_abundance)*mp_cgs*unit_numberdensity
./mytests/magnetosphere_2.5/mod_usr.t:    unit_pressure=(2.d0+3.d0*He_abundance)*unit_numberdensity*const_kB*unit_temperature
./mytests/adi_diffusion/mod_usr.t:    unit_numberdensity = one/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/adi_diffusion/mod_usr.f:    unit_numberdensity = one/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/test_multigrid/mod_usr.t:    unit_numberdensity = rho_0/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/test_multigrid/mod_usr.t:    ! unit_numberdensity = rho_0/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/test_multigrid/mod_usr.f:    unit_numberdensity = rho_0/((1.d0+4.d0*He_abundance)*mp_cgs)
./mytests/test_multigrid/mod_usr.f:    ! unit_numberdensity = rho_0/((1.d0+4.d0*He_abundance)*mp_cgs)
./src/physics/mod_radiative_cooling.t:  double precision, private    :: He_abundance
./src/physics/mod_radiative_cooling.t:      He_abundance=He_abund
./src/physics/mod_radiative_cooling.t:      Lcool(1:ncool) = Lcool(1:ncool) * unit_numberdensity**2 * unit_time / unit_pressure * (1.d0+2.d0*He_abundance) 
./src/rhd/mod_opacity.t:subroutine init_opal(He_abundance)
./src/rhd/mod_opacity.t:  double precision, intent(in) :: He_abundance
./src/rhd/mod_opacity.t:    if (He_abundance .gt. Y1) call mpistop('OPAL table not covered')
./src/rhd/mod_opacity.t:    if (He_abundance .lt. Y2) call mpistop('OPAL table not covered')
./src/rhd/mod_opacity.t:    if (He_abundance .lt. Y1) call mpistop('OPAL table not covered')
./src/rhd/mod_opacity.t:    if (He_abundance .gt. Y2) call mpistop('OPAL table not covered')
./src/rhd/mod_opacity.t:  if (He_abundance .eq. Y1) then
./src/rhd/mod_opacity.t:  elseif (He_abundance .eq. Y2) then
./src/rhd/mod_opacity.t:    call interpolate_two_tables(Y1,Y2, He_abundance, Kappa_vals1, Kappa_vals2, Kappa_vals)
./src/rhd/mod_rhd_phys.t:  double precision, public, protected     :: He_abundance = 0.1d0
./src/rhd/mod_rhd_phys.t:    rhd_gravity, He_abundance, SI_unit, rhd_particles, rhd_radiation_formalism,&
./src/rhd/mod_rhd_phys.t:      call fld_init(He_abundance)
./src/rhd/mod_rhd_phys.t:      call radiative_cooling_init(rhd_gamma,He_abundance)
./src/rhd/mod_rhd_phys.t:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./src/rhd/mod_rhd_phys.t:      unit_pressure=(2.d0+3.d0*He_abundance)*unit_numberdensity*kB*unit_temperature
./src/rhd/mod_rhd_phys.t:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./src/rhd/mod_rhd_phys.t:      unit_temperature=unit_pressure/((2.d0+3.d0*He_abundance)*unit_numberdensity*kB)
./src/rhd/mod_rhd_phys.t:    !mu = (1.d0+4.d0*He_abundance)/two
./src/rhd/mod_rhd_phys.t:    mu = (1.+4*He_abundance)/(2.+3.*He_abundance)
./src/rhd/mod_fld.t:  subroutine fld_init(He_abundance)
./src/rhd/mod_fld.t:    double precision, intent(in) :: He_abundance
./src/rhd/mod_fld.t:    fld_mu = (1.+4*He_abundance)/(2.+3.*He_abundance)
./src/rhd/mod_fld.t:    if (fld_opacity_law .eq. 'opal') call init_opal(He_abundance)
./src/rhd/mod_fld.t:      fld_kappa0 = sigma_thomson/const_mp * (1.+2.*He_abundance)/(1.+4.*He_abundance)
./src/hd/mod_hd_phys.t:  double precision, public, protected  :: He_abundance=0.1d0
./src/hd/mod_hd_phys.t:    hd_gravity, He_abundance, SI_unit, hd_particles
./src/hd/mod_hd_phys.t:      call radiative_cooling_init(hd_gamma,He_abundance)
./src/hd/mod_hd_phys.t:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./src/hd/mod_hd_phys.t:      unit_pressure=(2.d0+3.d0*He_abundance)*unit_numberdensity*kB*unit_temperature
./src/hd/mod_hd_phys.t:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./src/hd/mod_hd_phys.t:      unit_temperature=unit_pressure/((2.d0+3.d0*He_abundance)*unit_numberdensity*kB)
./src/mhd/mod_mhd_phys.t:  double precision, public, protected  :: He_abundance=0.1d0
./src/mhd/mod_mhd_phys.t:      typedivbdiff, compactres, divbwave, He_abundance, SI_unit, B0field,&
./src/mhd/mod_mhd_phys.t:      call radiative_cooling_init(mhd_gamma,He_abundance)
./src/mhd/mod_mhd_phys.t:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./src/mhd/mod_mhd_phys.t:      unit_pressure=(2.d0+3.d0*He_abundance)*unit_numberdensity*kB*unit_temperature
./src/mhd/mod_mhd_phys.t:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./src/mhd/mod_mhd_phys.t:      unit_temperature=unit_pressure/((2.d0+3.d0*He_abundance)*unit_numberdensity*kB)
./lib/1d_default/mod_opacity.f:subroutine init_opal(He_abundance)
./lib/1d_default/mod_opacity.f:  double precision, intent(in) :: He_abundance
./lib/1d_default/mod_opacity.f:    if (He_abundance .gt. Y1) call mpistop('OPAL table not covered')
./lib/1d_default/mod_opacity.f:    if (He_abundance .lt. Y2) call mpistop('OPAL table not covered')
./lib/1d_default/mod_opacity.f:    if (He_abundance .lt. Y1) call mpistop('OPAL table not covered')
./lib/1d_default/mod_opacity.f:    if (He_abundance .gt. Y2) call mpistop('OPAL table not covered')
./lib/1d_default/mod_opacity.f:  if (He_abundance .eq. Y1) then
./lib/1d_default/mod_opacity.f:  elseif (He_abundance .eq. Y2) then
./lib/1d_default/mod_opacity.f:    call interpolate_two_tables(Y1,Y2, He_abundance, Kappa_vals1, Kappa_vals2,&
./lib/1d_default/mod_hd_phys.f:  double precision, public, protected  :: He_abundance=0.1d0
./lib/1d_default/mod_hd_phys.f:        He_abundance, SI_unit, hd_particles
./lib/1d_default/mod_hd_phys.f:      call radiative_cooling_init(hd_gamma,He_abundance)
./lib/1d_default/mod_hd_phys.f:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./lib/1d_default/mod_hd_phys.f:      unit_pressure=(2.d0+3.d0*He_abundance)&
./lib/1d_default/mod_hd_phys.f:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./lib/1d_default/mod_hd_phys.f:         3.d0*He_abundance)*unit_numberdensity*kB)
./lib/1d_default/mod_radiative_cooling.f:  double precision, private    :: He_abundance
./lib/1d_default/mod_radiative_cooling.f:      He_abundance=He_abund
./lib/1d_default/mod_radiative_cooling.f:         unit_pressure * (1.d0+2.d0*He_abundance) 
./lib/1d_default/mod_fld.f:  subroutine fld_init(He_abundance)
./lib/1d_default/mod_fld.f:    double precision, intent(in) :: He_abundance
./lib/1d_default/mod_fld.f:    ! fld_mu = (1.d0+4.d0*He_abundance)/two
./lib/1d_default/mod_fld.f:    fld_mu = (1.+4*He_abundance)/(2.+3.*He_abundance)
./lib/1d_default/mod_fld.f:    if (fld_opacity_law .eq. 'opal') call init_opal(He_abundance)
./lib/1d_default/mod_mhd_phys.f:  double precision, public, protected  :: He_abundance=0.1d0
./lib/1d_default/mod_mhd_phys.f:       typedivbdiff, compactres, divbwave, He_abundance, SI_unit, B0field,&
./lib/1d_default/mod_mhd_phys.f:      call radiative_cooling_init(mhd_gamma,He_abundance)
./lib/1d_default/mod_mhd_phys.f:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./lib/1d_default/mod_mhd_phys.f:      unit_pressure=(2.d0+3.d0*He_abundance)&
./lib/1d_default/mod_mhd_phys.f:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./lib/1d_default/mod_mhd_phys.f:         3.d0*He_abundance)*unit_numberdensity*kB)
./lib/2d_default/mod_opacity.f:subroutine init_opal(He_abundance)
./lib/2d_default/mod_opacity.f:  double precision, intent(in) :: He_abundance
./lib/2d_default/mod_opacity.f:    if (He_abundance .gt. Y1) call mpistop('OPAL table not covered')
./lib/2d_default/mod_opacity.f:    if (He_abundance .lt. Y2) call mpistop('OPAL table not covered')
./lib/2d_default/mod_opacity.f:    if (He_abundance .lt. Y1) call mpistop('OPAL table not covered')
./lib/2d_default/mod_opacity.f:    if (He_abundance .gt. Y2) call mpistop('OPAL table not covered')
./lib/2d_default/mod_opacity.f:  if (He_abundance .eq. Y1) then
./lib/2d_default/mod_opacity.f:  elseif (He_abundance .eq. Y2) then
./lib/2d_default/mod_opacity.f:    call interpolate_two_tables(Y1,Y2, He_abundance, Kappa_vals1, Kappa_vals2,&
./lib/2d_default/mod_hd_phys.f:  double precision, public, protected  :: He_abundance=0.1d0
./lib/2d_default/mod_hd_phys.f:        He_abundance, SI_unit, hd_particles
./lib/2d_default/mod_hd_phys.f:      call radiative_cooling_init(hd_gamma,He_abundance)
./lib/2d_default/mod_hd_phys.f:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./lib/2d_default/mod_hd_phys.f:      unit_pressure=(2.d0+3.d0*He_abundance)&
./lib/2d_default/mod_hd_phys.f:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./lib/2d_default/mod_hd_phys.f:         3.d0*He_abundance)*unit_numberdensity*kB)
./lib/2d_default/mod_radiative_cooling.f:  double precision, private    :: He_abundance
./lib/2d_default/mod_radiative_cooling.f:      He_abundance=He_abund
./lib/2d_default/mod_radiative_cooling.f:         unit_pressure * (1.d0+2.d0*He_abundance) 
./lib/2d_default/mod_fld.f:  subroutine fld_init(He_abundance)
./lib/2d_default/mod_fld.f:    double precision, intent(in) :: He_abundance
./lib/2d_default/mod_fld.f:    fld_mu = (1.+4*He_abundance)/(2.+3.*He_abundance)
./lib/2d_default/mod_fld.f:    if (fld_opacity_law .eq. 'opal') call init_opal(He_abundance)
./lib/2d_default/mod_fld.f:         (1.+2.*He_abundance)/(1.+4.*He_abundance)
./lib/2d_default/mod_mhd_phys.f:  double precision, public, protected  :: He_abundance=0.1d0
./lib/2d_default/mod_mhd_phys.f:       typedivbdiff, compactres, divbwave, He_abundance, SI_unit, B0field,&
./lib/2d_default/mod_mhd_phys.f:      call radiative_cooling_init(mhd_gamma,He_abundance)
./lib/2d_default/mod_mhd_phys.f:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./lib/2d_default/mod_mhd_phys.f:      unit_pressure=(2.d0+3.d0*He_abundance)&
./lib/2d_default/mod_mhd_phys.f:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./lib/2d_default/mod_mhd_phys.f:         3.d0*He_abundance)*unit_numberdensity*kB)
./lib/2d_default/mod_rhd_phys.f:  double precision, public, protected     :: He_abundance = 0.1d0
./lib/2d_default/mod_rhd_phys.f:        rhd_gravity, He_abundance, SI_unit, rhd_particles,&
./lib/2d_default/mod_rhd_phys.f:      call fld_init(He_abundance)
./lib/2d_default/mod_rhd_phys.f:      call radiative_cooling_init(rhd_gamma,He_abundance)
./lib/2d_default/mod_rhd_phys.f:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./lib/2d_default/mod_rhd_phys.f:      unit_pressure=(2.d0+3.d0*He_abundance)&
./lib/2d_default/mod_rhd_phys.f:      unit_density=(1.d0+4.d0*He_abundance)*mp*unit_numberdensity
./lib/2d_default/mod_rhd_phys.f:         3.d0*He_abundance)*unit_numberdensity*kB)
./lib/2d_default/mod_rhd_phys.f:    !mu = (1.d0+4.d0*He_abundance)/two
./lib/2d_default/mod_rhd_phys.f:    mu = (1.+4*He_abundance)/(2.+3.*He_abundance)
./tests/mhd/solar_flare_reconnection_2.5D/sfr_2.5d.par:        He_abundance=0.d0
./tests/mhd/solar_flare_reconnection_2.5D/amrvac.par:        He_abundance=0.d0
./doc/par.md:      He_abundance= DOUBLE from 0 to 1
./doc/par.md:     He_abundance= DOUBLE from 0 to 1
./doc/html/namespacemod__fld.html:<tr class="memitem:a627c9fb68be753e35a88ccf99b48390c"><td class="memItemLeft" align="right" valign="top">subroutine, public&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacemod__fld.html#a627c9fb68be753e35a88ccf99b48390c">fld_init</a> (He_abundance)</td></tr>
./doc/html/namespacemod__fld.html:          <td class="paramname"><em>He_abundance</em></td><td>)</td>
./doc/html/namespacemod__opacity.html:<tr class="memitem:a874f16e98bb18964835a5276da13e9e1"><td class="memItemLeft" align="right" valign="top">subroutine, public&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacemod__opacity.html#a874f16e98bb18964835a5276da13e9e1">init_opal</a> (He_abundance)</td></tr>
./doc/html/namespacemod__opacity.html:          <td class="paramname"><em>He_abundance</em></td><td>)</td>
./doc/html/mod__opacity_8t_source.html:<a href="mod__opacity_8t.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">!&gt; This module reads in opacities from opal tables.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html">    3</a></span>&#160;<span class="keyword">module</span> <a class="code" href="namespacemod__opacity.html">mod_opacity</a></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    <span class="keywordtype">implicit NONE</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    !&gt; min and max indices for R,T-range in opacity table</span></div><div class="line"><a name="l00007"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a59a895e31ff5fb4e1094ce5d033e4831">    7</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">parameter</span> :: <a class="code" href="namespacemod__opacity.html#a59a895e31ff5fb4e1094ce5d033e4831">rmin</a> = 2</div><div class="line"><a name="l00008"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a6ae1d8c0eec04f3a3442a191e0769c79">    8</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">parameter</span> :: <a class="code" href="namespacemod__opacity.html#a6ae1d8c0eec04f3a3442a191e0769c79">rmax</a> = 20</div><div class="line"><a name="l00009"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#acf40949e00b7f4eff4bcc6946e214c3c">    9</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">parameter</span> :: <a class="code" href="namespacemod__opacity.html#acf40949e00b7f4eff4bcc6946e214c3c">tmin</a> = 7</div><div class="line"><a name="l00010"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#ae9c34b51bae2e2667c87fb0c471538ae">   10</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">parameter</span> :: <a class="code" href="namespacemod__opacity.html#ae9c34b51bae2e2667c87fb0c471538ae">tmax</a> = 76</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    !&gt; The opacity tables are read once and stored globally in Kappa_vals</span></div><div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a96cf3ab9b0eda1d2e0dc20c8db298050">   13</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__opacity.html#a96cf3ab9b0eda1d2e0dc20c8db298050">kappa_vals</a>(7:76,2:20)</div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a5b97dc8fee039758b1ef19beb7ba1104">   14</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__opacity.html#a5b97dc8fee039758b1ef19beb7ba1104">kappa_vals1</a>(7:76,2:20)</div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a85bfa55925f68dce7c5d1cd7a7989539">   15</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__opacity.html#a85bfa55925f68dce7c5d1cd7a7989539">kappa_vals2</a>(7:76,2:20)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#ac8b4a37f8ceb571eeae39ed09e1c968d">   17</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__opacity.html#ac8b4a37f8ceb571eeae39ed09e1c968d">log_r_list</a>(2:20)</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a488dfa0e23119e11f87a8d7c055b09b2">   18</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__opacity.html#a488dfa0e23119e11f87a8d7c055b09b2">log_t_list</a>(7:76)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="comment">!character(*), parameter, public :: fileplace = &quot;$AMRVAC_DIR/src/rhd/Opacity_tables/&quot;</span></div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#afd1953e653e0834448a0e018b2f55bb3">   21</a></span>&#160;    <span class="keywordtype">character(*)</span>, <span class="keywordtype">parameter</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__opacity.html#afd1953e653e0834448a0e018b2f55bb3">amrvac_dir</a> = <span class="stringliteral">&quot;/lhome/nicolasm/amrvac/&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a6695db8e0409f31990635ffdba44f6c0">   22</a></span>&#160;    <span class="keywordtype">character(*)</span>, <span class="keywordtype">parameter</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__opacity.html#a6695db8e0409f31990635ffdba44f6c0">fileplace</a> = <a class="code" href="namespacemod__opacity.html#afd1953e653e0834448a0e018b2f55bb3">amrvac_dir</a>//<span class="stringliteral">&quot;src/rhd/Opacity_tables/&quot;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__opacity.html#a874f16e98bb18964835a5276da13e9e1">init_opal</a></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__opacity.html#a88caefefb5bdfc048ed50c17c8553d0b">set_opal_opacity</a></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keyword">contains</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">!&gt; This routine is called when the fld radiation module is initialised.</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">!&gt; Here, the tables for different He Abndcs are read and interpolated</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">subroutine </span><a class="code" href="namespacemod__opacity.html#a874f16e98bb18964835a5276da13e9e1">init_opal</a>(He_abundance)</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a874f16e98bb18964835a5276da13e9e1">   32</a></span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: He_abundance</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keywordtype">double precision</span> :: Y1 = 0.1000</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keywordtype">double precision</span> :: Y2 = 0.0999</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="keywordflow">if</span> (y1 .gt. y2) <span class="keywordflow">then</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">if</span> (he_abundance .gt. y1) <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;OPAL table not covered&#39;</span>)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">if</span> (he_abundance .lt. y2) <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;OPAL table not covered&#39;</span>)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keywordflow">else</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">if</span> (he_abundance .lt. y1) <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;OPAL table not covered&#39;</span>)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span> (he_abundance .gt. y2) <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;OPAL table not covered&#39;</span>)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keywordflow">  endif</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#af0b3dafe6eedb1f154080b9865a57ac0">read_table</a>(<a class="code" href="namespacemod__opacity.html#ac8b4a37f8ceb571eeae39ed09e1c968d">log_r_list</a>, <a class="code" href="namespacemod__opacity.html#a488dfa0e23119e11f87a8d7c055b09b2">log_t_list</a>, <a class="code" href="namespacemod__opacity.html#a5b97dc8fee039758b1ef19beb7ba1104">kappa_vals1</a>,<span class="stringliteral">&#39;Y01000&#39;</span>)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#af0b3dafe6eedb1f154080b9865a57ac0">read_table</a>(<a class="code" href="namespacemod__opacity.html#ac8b4a37f8ceb571eeae39ed09e1c968d">log_r_list</a>, <a class="code" href="namespacemod__opacity.html#a488dfa0e23119e11f87a8d7c055b09b2">log_t_list</a>, <a class="code" href="namespacemod__opacity.html#a85bfa55925f68dce7c5d1cd7a7989539">kappa_vals2</a>,<span class="stringliteral">&#39;Y00999&#39;</span>)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keywordflow">if</span> (he_abundance .eq. y1) <span class="keywordflow">then</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacemod__opacity.html#a96cf3ab9b0eda1d2e0dc20c8db298050">kappa_vals</a> = <a class="code" href="namespacemod__opacity.html#a5b97dc8fee039758b1ef19beb7ba1104">kappa_vals1</a></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordflow">elseif</span> (he_abundance .eq. y2) <span class="keywordflow">then</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="namespacemod__opacity.html#a96cf3ab9b0eda1d2e0dc20c8db298050">kappa_vals</a> = <a class="code" href="namespacemod__opacity.html#a85bfa55925f68dce7c5d1cd7a7989539">kappa_vals2</a></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keywordflow">else</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a9533ed9e6b2fd9d39456d5d9d1f9e8ce">interpolate_two_tables</a>(y1,y2, he_abundance, <a class="code" href="namespacemod__opacity.html#a5b97dc8fee039758b1ef19beb7ba1104">kappa_vals1</a>, <a class="code" href="namespacemod__opacity.html#a85bfa55925f68dce7c5d1cd7a7989539">kappa_vals2</a>, <a class="code" href="namespacemod__opacity.html#a96cf3ab9b0eda1d2e0dc20c8db298050">kappa_vals</a>)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keywordflow">  endif</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">end subroutine </span><a class="code" href="namespacemod__opacity.html#a874f16e98bb18964835a5276da13e9e1">init_opal</a></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">!&gt; This subroutine calculates the opacity for</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">!&gt; a given temperature-density structure.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">!&gt; The opacities are read from a table that has the initialised metalicity</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">subroutine </span><a class="code" href="namespacemod__opacity.html#a88caefefb5bdfc048ed50c17c8553d0b">set_opal_opacity</a>(rho,temp,kappa)</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a88caefefb5bdfc048ed50c17c8553d0b">   61</a></span>&#160;  <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: rho, temp</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: kappa</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordtype">double precision</span> :: R_input, T_input, K_output</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  r_input = rho/(temp*1d-6)**3</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  t_input = temp</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  r_input = dlog10(r_input)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  t_input = dlog10(t_input)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a4590815a90c414704626b18855100170">get_kappa</a>(<a class="code" href="namespacemod__opacity.html#a96cf3ab9b0eda1d2e0dc20c8db298050">kappa_vals</a>, <a class="code" href="namespacemod__opacity.html#ac8b4a37f8ceb571eeae39ed09e1c968d">log_r_list</a>, <a class="code" href="namespacemod__opacity.html#a488dfa0e23119e11f87a8d7c055b09b2">log_t_list</a>, r_input, t_input, k_output)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">  !&gt; If the outcome is 9.999, look right in the table</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordflow">do</span> <span class="keywordflow">while</span> (k_output .gt. 9.0)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      print*, <span class="stringliteral">&#39;R,T datapoint out of opal table&#39;</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      r_input = r_input + 0.5</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a4590815a90c414704626b18855100170">get_kappa</a>(<a class="code" href="namespacemod__opacity.html#a96cf3ab9b0eda1d2e0dc20c8db298050">kappa_vals</a>, <a class="code" href="namespacemod__opacity.html#ac8b4a37f8ceb571eeae39ed09e1c968d">log_r_list</a>, <a class="code" href="namespacemod__opacity.html#a488dfa0e23119e11f87a8d7c055b09b2">log_t_list</a>, r_input, t_input, k_output)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keywordflow">  enddo</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  !&gt; If the outcome is NaN, look left in the table</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">do</span> <span class="keywordflow">while</span> (k_output .eq. 0.0)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      print*, <span class="stringliteral">&#39;R,T datapoint out of opal table&#39;</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      r_input = r_input - 0.5</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a4590815a90c414704626b18855100170">get_kappa</a>(<a class="code" href="namespacemod__opacity.html#a96cf3ab9b0eda1d2e0dc20c8db298050">kappa_vals</a>, <a class="code" href="namespacemod__opacity.html#ac8b4a37f8ceb571eeae39ed09e1c968d">log_r_list</a>, <a class="code" href="namespacemod__opacity.html#a488dfa0e23119e11f87a8d7c055b09b2">log_t_list</a>, r_input, t_input, k_output)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keywordflow">  enddo</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  kappa = 10d0**k_output</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">end subroutine </span><a class="code" href="namespacemod__opacity.html#a88caefefb5bdfc048ed50c17c8553d0b">set_opal_opacity</a></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">!&gt; This routine reads out values and arguments from an opacity table</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">subroutine </span><a class="code" href="namespacemod__opacity.html#af0b3dafe6eedb1f154080b9865a57ac0">read_table</a>(R, T, K, filename)</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#af0b3dafe6eedb1f154080b9865a57ac0">   94</a></span>&#160;<span class="comment">    !&gt; This routine reads in the the values for log kappa, and the values for log T and log R on the x and y axis</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: K(7:76,2:20), R(2:20), T(7:76)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">character(*)</span>, <span class="keywordtype">intent(in)</span> :: filename</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordtype">character</span> :: dum</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordtype">integer</span> :: row, col</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">OPEN</span>(1,status = <span class="stringliteral">&#39;old&#39;</span>, file=<a class="code" href="namespacemod__opacity.html#a6695db8e0409f31990635ffdba44f6c0">fileplace</a>//filename)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">    !&gt; Skip first 4 lines</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">do</span> row = 1,4</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keyword">READ</span>(1,*)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">    !&gt; Read R</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">READ</span>(1,*) dum,r(2:20)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">READ</span>(1,*)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">    !&gt; Read T and K</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">do</span> row = 7,76<span class="comment"> !&gt; NOT READING ENTIRE TABLE</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keyword">READ</span>(1,<span class="stringliteral">&#39;(f4.2,19f7.3)&#39;</span>) t(row), k(row,2:20)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keyword">CLOSE</span>(1)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">end subroutine </span><a class="code" href="namespacemod__opacity.html#af0b3dafe6eedb1f154080b9865a57ac0">read_table</a></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">!&gt; This subroutine creates a new table for a given He abundance,</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">! by interpolating to known tables at every point in the R,T plane</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword">subroutine </span><a class="code" href="namespacemod__opacity.html#a9533ed9e6b2fd9d39456d5d9d1f9e8ce">interpolate_two_tables</a>(Y1, Y2, Y_in, K1, K2, K_interp)</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a9533ed9e6b2fd9d39456d5d9d1f9e8ce">  127</a></span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: K1(7:76,2:20), K2(7:76,2:20)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: Y1, Y2, Y_in</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: K_interp(7:76,2:20)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">integer</span> row, colum</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">do</span> colum=2,20</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">do</span> row=7,76</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a402854fdf40e52681fe1f457d3d91927">interpolate1d</a>(y1,y2,y_in,k1(row,colum),k2(row,colum),k_interp(row,colum))</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">end subroutine </span><a class="code" href="namespacemod__opacity.html#a9533ed9e6b2fd9d39456d5d9d1f9e8ce">interpolate_two_tables</a></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">!&gt;This subroutine looks in the table for the four couples (T,R)</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">!surrounding a given input for T and R</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword">subroutine </span><a class="code" href="namespacemod__opacity.html#a4590815a90c414704626b18855100170">get_kappa</a>(Kappa_vals, Log_R_list, Log_T_list, R, T, K)</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a4590815a90c414704626b18855100170">  146</a></span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: Kappa_vals(7:76,2:20)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: Log_R_list(2:20)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: Log_T_list(7:76)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: R, T</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: K</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordtype">integer</span> :: low_r_index, up_r_index</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordtype">integer</span> :: low_t_index, up_t_index</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">if</span> (r .gt. maxval(log_r_list)) <span class="keywordflow">then</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        print*, <span class="stringliteral">&#39;Extrapolating in logR&#39;</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        low_r_index = 20</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        up_r_index = 20</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">elseif</span> (r .lt. minval(log_r_list)) <span class="keywordflow">then</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        print*, <span class="stringliteral">&#39;Extrapolating in logR&#39;</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        low_r_index = 2</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        up_r_index = 2</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a0a1ff9caa588d0fd974f2564657c0c88">get_low_up_index</a>(r, log_r_list, 2, 20, low_r_index, up_r_index)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span> (t .gt. maxval(log_t_list)) <span class="keywordflow">then</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        print*, <span class="stringliteral">&#39;Extrapolating in logT&#39;</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        low_t_index = 76</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        up_t_index = 76</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">elseif</span> ( t .lt. minval(log_t_list)) <span class="keywordflow">then</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        print*, <span class="stringliteral">&#39;Extrapolating in logT&#39;</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        low_t_index = 7</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        up_t_index = 7</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a0a1ff9caa588d0fd974f2564657c0c88">get_low_up_index</a>(t, log_t_list, 7, 76, low_t_index, up_t_index)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#af4c63b2bc734b947c394dd93808bcb1a">interpolate_krt</a>(low_r_index, up_r_index, low_t_index, up_t_index, log_r_list, log_t_list, kappa_vals, r, t, k)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">end subroutine </span><a class="code" href="namespacemod__opacity.html#a4590815a90c414704626b18855100170">get_kappa</a></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">!&gt; this subroutine finds the indexes in R and T arrays of the two values surrounding the input R and T</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keyword">subroutine </span><a class="code" href="namespacemod__opacity.html#a0a1ff9caa588d0fd974f2564657c0c88">get_low_up_index</a>(x, x_list, imin, imax, low_i, up_i)</div><div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a0a1ff9caa588d0fd974f2564657c0c88">  188</a></span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: imin, imax</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x_list(imin:imax)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: low_i, up_i</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordtype">double precision</span> :: low_val, up_val</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordtype">double precision</span> :: res(imin:imax)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    res = x_list - x</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    up_val = minval(res, mask = res .ge. 0) + x</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    low_val = maxval(res, mask = res .le. 0) + x</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    up_i = minloc(abs(x_list - up_val),1) + imin -1</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    low_i = minloc(abs(x_list - low_val),1) + imin -1</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">if</span> (up_i .eq. low_i) low_i = low_i - 1</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">end subroutine </span><a class="code" href="namespacemod__opacity.html#a0a1ff9caa588d0fd974f2564657c0c88">get_low_up_index</a></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">!&gt; This subroutine does a bilinear interpolation in the R,T-plane</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">subroutine </span><a class="code" href="namespacemod__opacity.html#af4c63b2bc734b947c394dd93808bcb1a">interpolate_krt</a>(low_r, up_r, low_t, up_t, Log_R_list, Log_T_list, Kappa_vals, R, T, k_interp)</div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#af4c63b2bc734b947c394dd93808bcb1a">  213</a></span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: low_r, up_r, low_t, up_t</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: Kappa_vals(7:76,2:20)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: Log_R_list(2:20)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: Log_T_list(7:76)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: R,T</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: k_interp</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">double precision</span> :: r1,r2,t1,t2</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordtype">double precision</span> :: k1, k2, k3, k4</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">double precision</span> :: ka, kb</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">!Cool ascii drawing of interpolation scheme: first interpolate twice in the T coord to get</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">!ka and kb, then interpolate in the R coord to get ki</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">!   r_1    R        r_2</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">!     |                |</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">!     |                |</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">! ----k1--------ka-----k2----- t_1</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">!     |          |     |</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">!     |          |     |</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">!   T |          |     |</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">!     |          |     |</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">!     |          ki    |</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">!     |          |     |</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">! ----k3--------kb-----k4----- t_2</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">!     |                |</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">!     |                |</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    r1 = log_r_list(low_r)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    r2 = log_r_list(up_r)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    t1 = log_t_list(low_t)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    t2 = log_t_list(up_t)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    k1 = kappa_vals(low_t, low_r)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    k2 = kappa_vals(low_t, up_r)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    k3 = kappa_vals(up_t, low_r)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    k4 = kappa_vals(up_t, up_r)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a402854fdf40e52681fe1f457d3d91927">interpolate1d</a>(r1,r2,r,k1,k2,ka)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a402854fdf40e52681fe1f457d3d91927">interpolate1d</a>(r1,r2,r,k3,k4,kb)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a402854fdf40e52681fe1f457d3d91927">interpolate1d</a>(t1,t2,t,ka,kb,k_interp)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">end subroutine </span><a class="code" href="namespacemod__opacity.html#af4c63b2bc734b947c394dd93808bcb1a">interpolate_krt</a></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">!&gt; Interpolation in one dimension</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keyword">subroutine </span><a class="code" href="namespacemod__opacity.html#a402854fdf40e52681fe1f457d3d91927">interpolate1d</a>(x1, x2, x, y1, y2, y)</div><div class="line"><a name="l00262"></a><span class="lineno"><a class="line" href="namespacemod__opacity.html#a402854fdf40e52681fe1f457d3d91927">  262</a></span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x, x1, x2</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: y1, y2</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: y</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    y = y1 + (x-x1)*(y2-y1)/(x2-x1)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keyword">end subroutine </span><a class="code" href="namespacemod__opacity.html#a402854fdf40e52681fe1f457d3d91927">interpolate1d</a></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keyword">end module </span><a class="code" href="namespacemod__opacity.html">mod_opacity</a></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">!&gt; Interpolation on logarithmic scale</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keyword">subroutine </span><a class="code" href="mod__opacity_8t.html#a2676bd5f3d5bedef19c5196764fe00a8">log_interpolate1d</a>(x1, x2, x, y1, y2, y)</div><div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="mod__opacity_8t.html#a2676bd5f3d5bedef19c5196764fe00a8">  275</a></span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;   <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x, x1, x2</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;   <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: y1, y2</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;   <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: y</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;   <span class="keywordtype">double precision</span> :: expx, expx1, expx2</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;   <span class="keywordtype">double precision</span> :: expy1, expy2</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;   expx = 10**x</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;   expx1 = 10**x1</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;   expx2 = 10**x2</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;   expy1 = 10**y1</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;   expy2 = 10**y2</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;   y = expy1 + (expx-expx1)*(expy2-expy1)/(expx2-expx1)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;   y = log10(y)</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keyword">end subroutine </span><a class="code" href="mod__opacity_8t.html#a2676bd5f3d5bedef19c5196764fe00a8">log_interpolate1d</a></div><div class="ttc" id="namespacemod__opacity_html_af4c63b2bc734b947c394dd93808bcb1a"><div class="ttname"><a href="namespacemod__opacity.html#af4c63b2bc734b947c394dd93808bcb1a">mod_opacity::interpolate_krt</a></div><div class="ttdeci">subroutine interpolate_krt(low_r, up_r, low_t, up_t, Log_R_list, Log_T_list, Kappa_vals, R, T, k_interp)</div><div class="ttdoc">This subroutine does a bilinear interpolation in the R,T-plane. </div><div class="ttdef"><b>Definition:</b> <a href="mod__opacity_8t_source.html#l00213">mod_opacity.t:213</a></div></div>
./doc/html/mod__opacity_8t_source.html:<div class="ttc" id="namespacemod__opacity_html_a874f16e98bb18964835a5276da13e9e1"><div class="ttname"><a href="namespacemod__opacity.html#a874f16e98bb18964835a5276da13e9e1">mod_opacity::init_opal</a></div><div class="ttdeci">subroutine, public init_opal(He_abundance)</div><div class="ttdoc">This routine is called when the fld radiation module is initialised. Here, the tables for different H...</div><div class="ttdef"><b>Definition:</b> <a href="mod__opacity_8t_source.html#l00032">mod_opacity.t:32</a></div></div>
./doc/html/par_8md_source.html:<a href="par_8md.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;# Setting parameters</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;[TOC]</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;# Introduction {#par_intro}</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;This document describes the usage of a `.par` parameter (input) file for MPI-AMRVAC.</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;For a list of command line options, see @ref commandline.md.</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;Parameters are grouped in namelists according to their functionalities. The namelists</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;have physics-independent class and physics-dependent class. The physics-independent class includes:</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;* @ref par_filelist Name and type of files to save (or read)</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;* @ref par_savelist When to save data</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;* @ref par_stoplist When to stop the simulation</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;* @ref par_methodlist Which numerical methods to use (e.g., flux scheme, time integrator, limiter)</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;* @ref par_boundlist Boundary conditions</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;* @ref par_meshlist Mesh-related settings (e.g. domain size, refinement)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;* @ref par_paramlist Time-step parameters</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;The default parameter values in these namelists are set in</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;`src/amrvacio/mod_input_output.t`, look at the subroutine `read_par_files` for</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;details.</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;The physics-dependent namelists include:</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;* @ref par_rholist (see also `mod_rho_phys`)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;* @ref par_nonlinearlist (see also `mod_nonlinear_phys`)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;* @ref par_hdlist (see also `mod_hd_phys`)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;* @ref par_mhdlist (see also `mod_mhd_phys`)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;Further namelist are used to control optional modules. Most of these lists are</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;not documented here, but the parameters are described in the corresponding</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;modules:</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;* `rc_list` (radiative cooling, see `mod_magnetofriction`)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;* `tc_list` (thermal conduction, see `mod_thermal_conduction`)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;* `dust_list` (dust, see `mod_dust`)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;* `vc_list` (viscosity, see `mod_viscosity`)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;* `grav_list` (gravity, see `mod_gravity`)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;* `mf_list` (magnetofriction, see `mod_magnetofriction`)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;## An example for a namelist</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;The parameter file consists of a sequence of namelists, which look like this:</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;     &amp;listname</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      var_a = value</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      ! A comment</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      var_b = value</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      array = value1, value2, ...</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      array(1,1) = value</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      ! Repeat value 5 times in array</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      array = 5*value</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      ...</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;     /</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;If you do not define a variable the default value is used. </div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;The Fortran 90 standard for logical variable values is either `T` and `F` or</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;`.true.` and `.false.`, but some compilers accept only one of them. Text between</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;namelists is ignored, but it may result in a run time error on some</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;machines/compilers.</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;The following namelist examples contain all the possible variables to set,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;choices are indicated by `|`. The first choice is the default value. Only the</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;parameters different from default need to be set. Names that should be replaced</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;are in capital letters. The `...` indicates optional extra elements for arrays,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;or extra words in strings.</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;# Physics-independent Namelists {#par_pidnamelists}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;## Filelist {#par_filelist}</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;     &amp;filelist</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;       &lt;variable definitions, see below&gt;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;     /</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;name | type | default | description</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;---|---|---|---</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;base_filename | string | &#39;data&#39; | Base file name for simulation output, which will be followed by a 4-digit number</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;restart_from_file | string | - | Resume from the snapshot data with this file name. </div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;typefilelog | string | &#39;default&#39; | Use &#39;regression_test&#39; to do regression test and use the value &#39;special&#39; to enable user-defined log output</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;snapshotnext | integer | 0 | Start index for writing snapshots</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;slicenext | integer | 0 | Start index for writing slices</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;firstprocess | logical | F | If true, call `initonegrid_usr` upon restarting</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;resetgrid | logical | F | If true, rebuild the AMR grid upon restarting</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;convert | logical | F | If true and filenameini and snapshotini are given, convert snapshots to other file formats</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;convert_type | string | vtuBCCmpi | Which format to use when converting, options are: tecplot, tecplotCC, vtu, vtuCC, vtuB, vtuBCC, tecplotmpi, tecplotCCmpi, vtuBmpi, vtuBCCmpi, vtumpi,  vtuCCmpi, pvtumpi, pvtuCCmpi, tecline, teclinempi, onegrid</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;slice_type | string | vtu | Which format to use when slicing, options are: csv, dat, vtu, vtuCC</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;collapse_type | string | vti | Which format to use when slicing, options are: csv, vti</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;autoconvert | logical | F | If true, already convert to output format during the run</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;sliceascii | logical | F | If true, enable ASCII output of @ref slices.md</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;saveprim | logical | F | If true, convert from conservative to primitive variables in output</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;nwauxio | integer | 0 | Number of auxiliary variables that are only included in the output</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;w_convert_factor | double(1:nw) | 1.0 | Conversion factors for w variables</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;time_convert_factor | double | 1.0 | Conversion factor for time unit</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;length_convert_factor | double | 1.0 | Conversion factor for length unit</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;`level_io` | integer | - | When doing a convert, generate a uniform grid at this level</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;`level_io_min` | integer | 1 | Minimum grid level when doing a convert</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;`level_io_max` | integer | `nlevelshi` | Maximum grid level when doing a convert</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;nocartesian | logical | F | If true, do not convert the output to a Cartesian coordinate system</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;w_write | logical(1:nw) | all true | VTK: Only write variables for which `writew(iw)` is true</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;writelevel | logical(1:nlevelshi) | all true | VTK: only write these levels</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;writespshift | double(1:ndim,1:2) | all zero | clip off this relative amount of the domain at the lower and upper side in each dimension</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;### The log file</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;By default, the logfile contains one line</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;with a string that is meant to identify the coordinate names, the conserved</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;variables (wnames) and other entries, and then follows a sequence of lines</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;containing numbers: i.e. a single line per requested output time, containing the</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;integer timestep counter _it_, the time _global_time_, the time step to be used in the</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;next time advance _dt_, the domain integrated value of each conserved variable</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;(nw real numbers, which allows to check perfect conservation across the grid</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;tree when the boundary conditions imply it), the percentage of the domain</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;covered by each allowed grid level (_refine_max_level_ real numbers between 0.0 and 1.0,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;with 1.0 indicating 100% coverage: when all _refine_max_level_ numbers are summed, we get</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;1.0), and the number of grids per allowed grid level (hence, _refine_max_level_ integers).</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;The logfile is by default saved as an ASCII file. </div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;The order of saving snapshots, and regridding actions through the subroutine</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;_resetgridtree_ is fixed: regrid happens after the advance by one timestep,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;then regrid, then save the data. This has consequences for the optional</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;variables beyond _nwflux_.</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;### Further info on output and postprocessing</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;The code can be used to postprocess the MPI-AMRVAC .dat files (which are the</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;only ones to be used for restarts) to some convenient data files for later</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;visualisation purposes. Such conversion of a single .dat file at a time is to be</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;done with the same executable (or at least one compiled on a possibly different</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; machine), on a single processor (i.e. using _mpirun</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;-np 1 amrvac_). Only selected output types can be converted in parallel, namely</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;those whose name contains _mpi_ as part of the _convert_type_ string. Currently,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;this includes the ASCII (binary) versions of _vtumpi_ (_vtuBmpi_) and _vtuCCmpi_</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;(_vtuBCCmpi_) (corner versus cell center values), and similarly for tecplot </div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;(_tecplotmpi_ or _tecplotCCmpi_). In addition, _pvtumpi_ (_pvtuBmpi_) and </div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;_pvtuCCmpi_ (_pvtuBCCmpi_) are possible which will result in a _*.vtu_ file for each processor.</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;In this conversion mode, the idea is to set restart_from_file together </div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;with `convert=T`. You can ask the code during</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;conversion to change from conservative to primitive variable output by setting</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;`saveprim=T`, and then the corresponding names for the primitive variables are</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;automatically determined. It is</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;also possible to perform the conversion step during run of the simulation with</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;the switch `autoconvert=T`. Naturally, this leads to more computational</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;overhead and IO, but using the _pvtuB(CC)mpi_ filetype, this can be reduced to</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;a minimum.</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;For simulations on non-cartesian grids (cylindrical or spherical), there is</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;the option to output the non-cartesian cell coordinates and vector components,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;which then forces you typically to do the conversion to cell center cartesian</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;grid coordinates and vector variables in your visualization session. By</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;default (i.e. `nocartesian=F`), the convert module does the conversion from</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;the orthogonal to locally cartesian coordinates and vector components for you.</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;You can overrule this default behavior by setting `nocartesian=T`. (note:</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;for tecplot format, the coordinate labels are then corrected in the converted</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;file as well).</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;The only variable that then further matters is `convert_type`.</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;For type &#39;tecplot&#39;, a corresponding `base_filenamexxxx.plt` file will be</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;generated, which is an ASCII file that stores the cell corner locations and</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;corner values for the conserved variables, to be handled with Tecplot. The</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;&#39;onegrid&#39; conversion type is just useful in 1D AMR runs, to generate a</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;single block file (extension &#39;.blk&#39;). Also particular to 1D data, and for</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;TecPlot purposes alone, is the &#39;tecline&#39; option. This can also be done in</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;parallel mode, where it is called &#39;teclinempi&#39;.</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;For visualization using [Paraview](www.paraview.org), the option to convert to</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;`convert_type=&#39;vtu&#39;` can be used. For both _vtu_ and _tecplot_ formats, there</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;are also corresponding _vtuCC_ and _tecplotCC_ options, which store the data</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;with the actually computed cell-centered values. For the _vtu_ and _tecplot_</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;formats on the other hand, the code tries to already do some interpolation from</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;cell center to cell corner variables for you, but this may introduce some</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;artificial effects in non-cartesian geometries. The _vtuB_ and _vtuBCC_ do the</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;same as _vtu(CC)_ but save the data in binary format.</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;It is even possible to temporarily add additionally computed auxiliary</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;variables that are instantaneously computable from the data in the</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;`base_filenamexxxx.dat` file to the converted snapshot. You should then</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;provide the number of such extra variables in `nwauxio` (see also</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;[this page](mpiamrvac_nw.md)), and a corresponding</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;definition for how to compute them from the available _nw_ variables in the associated</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;subroutine _usr_special_convert_ whose default interface is provided in the</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;_mod_usr_methods.t_ module. You can there compute variables that are not</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;in your simulation or data file, and store them in the extra slots</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;_nw+1:nw+nwauxio_ of the _w_ variable. For consistency, you should also then</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;add meaningfull names to a string to identify the auxiliary variables,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;this has to be done in the associated subroutine _usr_add_aux_names_.</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;The output values are normally given in code units, i.e. in the dimensionless</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;values used throughout the computation (in the initial condition, we always</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;adhere to the good practice of choosing an appropriate unit of length, time,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;mass and expressing everything in dimensionless fashion). One can, in the</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;convert stage only, ask to multiply the values by their respective dimensional</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;unit value. `time_convert_factor` should then be the unit for time, while the array</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;`w_convert_factor` for w variables and `length_convert_factor` for length.</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;The corresponding values for conservative entries are computed in _convert.t_ when</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;_saveprim=F_.  See for details of their use the _convert.t_ module.</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;Note that different formats for postprocess data conversion can be added in</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;the `convert.t` subroutine. See [convert](convert.md) for details.</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;The _VTK_-based formats allow for saving only a part of the _nw_ variables, by</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;setting the logical array `w_write`. The same is true for selecting levels by</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;using the array `writelevel`. Finally, you can clip away part of the domain,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;for output in a selected region. This is done by filling the array</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;`writespshift`. That array should use (consistent) double precision values</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;(between 0 and 1) that specify the percentage of the total domain to be</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;clipped away from the domain boundary at the minimum side, and from the</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;maximum side, respectively, and this for all dimensions. The array has thus a</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;dimensionality _(1:ndim,1:2)_, with the first entry specifying the dimension,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;and the second whether you clip for minimum (1) and maximum (2) sides,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;respectively. Note that in the end, only the grids that are fully contained</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;within the clipped region are then converted and stored in the output.</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;The switches `level_io`, `level_io_min` and `level_io_max` are there to</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;restrict the AMR levels of the output file at the convert stage. These</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;switches do not work with autoconvert. E.g. setting _level_io=3_ will</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;coarsen/refine the data to level 3 everywhere, resulting in a uniform grid.</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;_level_io_min_ limits the minimum level for output by refining levels below</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;level_io_min until level_io_min is reached. Correspondingly, _level_io_max_</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;limits the maximum level of the output file. This can be useful to visualize</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;large datasets.</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;## Savelist {#par_savelist}</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;Example:</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    &amp;savelist</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        itsave(1,1)=0</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        itsave(1,2)=0</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        dtsave_log=0.01d0 </div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        dtsave_dat=0.1d0</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        dtsave_slice=0.05d0</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        dtsave_collapsed=0.05d0</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    /</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;name | type | default | description</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;---|---|---|---</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;`ditsave_log` | integer | `biginteger` | Repeatedly save information in a log file when `ditsave_log` time steps have passed</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;`dtsave_dat` | double | `bigdouble` | Repeatedly save dat files when `dtsave_dat` simulation time has passed</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;`itsave(SAVEINDEX,FILEINDEX)` | integer | 1 | Save on these time steps</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;`tsave(SAVEINDEX,FILEINDEX)` | double | `bigdouble` | Save on these times</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;`nslices` | integer | 0 | Number of slices</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;`slicedir(INTEGER)` | integer | - | Slice direction, see @ref slices.md</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;`slicecoord(INTEGER)` | double | - | Slice coordinate, see @ref slices.md</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;`collapse(INTEGER)` | logical | F | See @ref collapsed.md</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;`collapseLevel` | integer | 1 | See @ref collapsed.md</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;Here FILEINDEX has the following meaning:</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;index | meaning</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;---|---</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;1 | Log output</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;2 | Normal output</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;3 | Slice output, see @ref slices.md</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;4 | Collapsed output, see @ref collapsed.md</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;5 | Call user custom analysis subroutine, see @ref analysis.md</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;One may want to save snapshots</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;more frequently at the beginning of the simulation. E.g. `tsave(1,2)=0.1</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;tsave(2,2)=0.25 tsave(3,2)=0.5 dtsave_dat=0.5` could be used to save snapshots</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;at times 0.1, 0.25, 0.5, 1, 1.5, ... etc.</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;If no save condition is given for a file you get a warning, but the final</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;output is always saved after the stop condition has been fulfilled. If</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;`itsave(1,2)=0` is set, the initial state is saved before advancing.</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;## Stoplist {#par_stoplist}</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    &amp;stoplist</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;       it_max =INTEGER</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;       time_max =DOUBLE</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;       dtmin =DOUBLE</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;       it_init =INTEGER</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;       time_init =DOUBLE</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;       reset_time =F | T</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;       reset_it   =F | T</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    /</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;You may use an upper limit `it_max` for the number of timesteps and/or the</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;physical time, `time_max`. </div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;Numerical or physical instabilities may produce huge changes or very small</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;time steps depending on the way `dt` is determined. These breakdowns can be</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;controlled by either setting a lower limit `dtmin` for the physical time</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;step, which is useful when `dt` is determined from the `courantpar`</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;parameter. If a run stops due to `dt &amp;lt; dtmin`, a warning message is</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;printed.</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;You have to specify at least one of `time_max, it_max`. AMRVAC stops execution</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;when any of the limits are exceeded. The initial time value `time_init` and integer</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;time step counter `it_init` values, which are zero by default, can be specified </div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;here. However, when a restart is performed from a previous .dat file, the values </div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;in that file will be used unless you reset them to their initial values by </div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;setting `reset_time=T`. If you want only to reset the iteration count </div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;without changing time, set `reset_it=T`.</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;## Methodlist {#par_methodlist}</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    &amp;methodlist</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    time_integrator=&#39;twostep&#39; | &#39;onestep&#39; | &#39;threestep&#39; | &#39;rk4&#39; | &#39;fourstep&#39; | &#39;ssprk43&#39; | &#39;ssprk54&#39;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    flux_scheme=nlevelshi strings from: &#39;hll&#39;|&#39;hllc&#39;|&#39;hlld&#39;,&#39;hllcd&#39;|&#39;tvdlf&#39;|&#39;tvdmu&#39;|&#39;tvd&#39;|&#39;cd&#39;|&#39;fd&#39;|&#39;source&#39;|&#39;nul&#39;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    typepred1=nlevelshi strings from: &#39;default&#39;|&#39;hancock&#39;|&#39;tvdlf&#39;|&#39;hll&#39;|&#39;hllc&#39;|&#39;tvdmu&#39;|&#39;cd&#39;|&#39;fd&#39;|&#39;nul&#39;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    limiter= nlevelshi strings from: &#39;minmod&#39; | &#39;woodward&#39; | &#39;superbee&#39; | &#39;vanleer&#39; | &#39;albada&#39; | &#39;ppm&#39; | &#39;mcbeta&#39; | &#39;koren&#39; | &#39;cada&#39; | &#39;cada3&#39; | &#39;mp5&#39;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    gradient_limiter= nlevelshi strings from: &#39;minmod&#39; | &#39;woodward&#39; | &#39;superbee&#39; | &#39;vanleer&#39; | &#39;albada&#39; | &#39;ppm&#39; | &#39;mcbeta&#39; | &#39;koren&#39; | &#39;cada&#39; | &#39;cada3&#39;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    typelimited= &#39;previous&#39; | &#39;predictor&#39;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    loglimit= nw logicals, all false by default</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    flatsh = F | T</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    flatcd = F | T</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    mcbeta= DOUBLE</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    typeentropy= &#39;nul&#39;|&#39;powell&#39;|&#39;harten&#39;|&#39;ratio&#39;|&#39;yee&#39;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    entropycoef= DOUBLE, DOUBLE, DOUBLE, ....</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    typetvd= &#39;roe&#39; | &#39;yee&#39; | &#39;harten&#39; | &#39;sweby&#39;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    typeaverage=&#39;default&#39; | &#39;roe&#39; | &#39;arithmetic&#39;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    typeboundspeed= &#39;cmaxmean&#39; | &#39;other&#39;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    tvdlfeps = DOUBLE</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    flathllc= F | T</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    nxdiffusehllc = INTEGER</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    source_split_usr= F | T</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    typesourcesplit= &#39;sfs&#39; | &#39;sf&#39; | &#39;ssfss&#39; | &#39;ssf&#39;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    dimsplit= F | T</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    typedimsplit= &#39;default&#39; | &#39;xyyx&#39;| &#39;xy&#39;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    small_density= DOUBLE</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    small_pressure= DOUBLE</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    small_values_method=&#39;error&#39; | &#39;replace&#39; | &#39;average&#39;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    small_values_daverage=1</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    check_small_values= F | T</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    typegrad = &#39;central&#39; | &#39;limited&#39;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    typediv = &#39;central&#39; | &#39;limited&#39;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    /</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;### time_integrator, flux_scheme, typepred1 {#par_time_integrator}</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;The `time_integrator` variable determines the time integration procedure. The</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;default procedure is a second order predictor-corrector type &#39;twostep&#39; scheme</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;(suitable for TVDLF, TVD-MUSCL schemes), and a simple &#39;onestep&#39; algorithm for</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;the temporally second order TVD method, or the first order TVDLF1, TVDMU1,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;TVD1 schemes. It is not possible to mix different step size methods across</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;the AMR grid levels. The temporally first order but spatially second order</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;TVD1 algorithm is best suited for steady state calculations as a &#39;onestep&#39;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;scheme. The TVDLF and TVD-MUSCL schemes can be forced to be first order, and</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;linear in the time step, which is good for getting a steady state, by setting</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;`time_integrator=&#39;onestep&#39;`.</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;There is also a fourth order Runge-Kutta type method, when</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;`time_integrator=&#39;fourstep&#39;`. It can be used with _dimsplit=.true._ and</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;_typelimited=&#39;original&#39;_. These higher order time integration methods can be</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;most useful in conjunction with higher order spatial discretizations.</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;See also [discretization](discretization.md).</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;The array `flux_scheme` defines a scheme to calculate the flux at cell interfaces using the chosen</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;[method](methods.md) (like hll based approximate Riemann solver) per activated grid level</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;(and on each level, all variables use the same discretization). In total,</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;_nlevelshi_ methods must be specified, by default _nlevelshi=20_ and these are</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;then all set by _flux_scheme=20*&#39;tvdlf&#39;_. Different discretizations can be mixed</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;across the _refine_max_level_ activated grid levels (but the same stepping scheme must</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;apply for all of the schemes).</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;Setting for a certain level the flux_scheme to &#39;nul&#39; implies doing no advance at</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;all, and &#39;source&#39; merely adds sources. These latter two values must be used</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;with care, obviously, and are only useful for testing source terms or to save</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;computations when fluxes are known to be zero.</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;The `typepred1` array is only used when `time_integrator=&#39;twostep&#39;` and</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;specifies the predictor step discretization, again per level (so _nlevelshi_</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;strings must be set). By default, it contains _typepred1=20*&#39;default&#39;_ (default</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;value _nlevelshi=20_), and it then deduces e.g. that &#39;cd&#39; is predictor for</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;&#39;cd&#39;, &#39;hancock&#39; is predictor for both &#39;tvdlf&#39; and &#39;tvdmu&#39;. Check its default</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;behavior in the _mod_input_output.t_ module. Thus `typepred1` need not be defined in</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;most cases, however `flux_scheme` should always be defined if methods other</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;than &#39;tvdlf&#39; are to be used.</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;### Limiter type {#par_typelimiter}</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;For the TVDLF and TVD-MUSCL methods different limiter functions can be defined</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;for the limited linear reconstructions from cell-center to cell-edge</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;variables, and for the TVD method, for the characteristic variables.</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;The default limiter is the most diffusive `limiter=nlevelshi*&#39;minmod&#39;`</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;limiter (minmod for all levels), but one can also use</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;`limiter=nlevelshi*&#39;woodward&#39;`, or use different limiters per level.</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;The `gradient_limiter` is the selection of a limiter to be used in computing</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;gradients (or divergence of vector) when the typegrad=limited (or</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;typediv=limited) is selected. It is thus only used in the gradientS</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;(divvectorS) subroutines in geometry.t (and has effect for the MHD modules).</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;The `typelimited` variable tells the TVD type methods what w should be used as</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;a basis for the limited reconstruction. By default, the `original` value is used in 1D and</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;for dimensional splitting, while the dimensionally unsplit multidimensional</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;case (dimsplit=F) uses the `predictor` value.</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;When having a gravitational stratification, one might benefit from performing linear</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;reconstruction on the primitive variables log10(rho) and/or log10(p). This can</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;be done by setting the corresponding _loglimit(iw)=T_ with _iw_ the label of</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;the corresponding component in the _w_ array (for density, this is thus</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;_iw=1_).</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;When using PPM as a limiter, minor differences can be obtained using the</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;switches flatcd and flatsh. These are meant to minimize potential</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;ripples around contact discontuinities (flatcd) or shocks (flatsh), but one</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;should first try without these flattenings (default behavior). PPM is actually</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;only used in a quadratic reconstruction from center to edge, requires the use</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;of a larger stencil (nghostcells=4), and can be used either in the methods (by</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;setting limiter) or in the gradientS/divvectorS routines (when typegrad</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;or typediv is limited, and gradient_limiter is ppm). The latter is encoded in</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;geometry.t.</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;### Typeentropy, entropycoef {#par_typeentropy}</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;For Riemann solver based methods, such as TVD and TVD-MUSCL (but not TVDLF),</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;an entropyfix may be applied to avoid unphysical solutions. The fix is applied</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;to the characteristic variables. The default entropy fix is `&#39;nul&#39;`, i.e. no entropy</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;fix. When an expansion shock is formed, the entropy fix should be applied to</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;the non-degenerate characteristic waves, i.e. waves that can form shocks</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;(sound waves, fast and slow magnetosonic waves). The most powerful entropy fix</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;is called &#39;powell&#39;. In practice, one may apply an entropy fix to all</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;characteristic waves, usually the slight extra diffusion makes the schemes</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;more robust. For Yee entropyfix the minimum characteristic speed (normalized</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;by dt/dx) can be set for each characteristic wave using the `entropycoef`</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;array.</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;### Different TVD variants {#par_tvdvariants}</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;Both `tvd` and `tvdlf` have a few variants, these can be set in the</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;strings `typetvd` and `typeboundspeed`, with defaults &#39;roe&#39; and &#39;cmaxmean&#39;,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;respectively. The default `typetvd=&#39;roe&#39;` is the fastest of the four upwind</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;types. For the TVDLF, the &#39;cmaxmean&#39; merely means whether the maximal physical</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;propagation speed is determined as the maximum speed for the mean state based</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;on averaging left centered and right centered states, or by taking the Roe</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;average eigenvalues for the left and right nonlinear waves proposed by Einfeldt</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;(Einfeldt 1988 J. Numer. Anal.). In the TVDLF flux, the diffuse</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;flux part has a coefficient `tvdlfeps` which is 1 by default. For steady-</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;state computations, one may gain in shock sharpness by reducing this factor to</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;a positive value smaller than 1.</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;_Only for the adiabatic hydro module_, the option to select an arithmetic, or</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;a roe average is available for use in the roe solver. This is set by the</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;`typeaverage`.</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;Just like in the TVDLF method, the slightly more involved HLL method has a</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;diffuse flux part with coefficient `tvdlfeps` which is 1 by default. For</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;steady-state computations, one may gain in shock sharpness by reducing this</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;factor to a positive value smaller than 1.</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;When using the HLLC scheme variants, for HD, MHD there is an</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;optional additional flattening in case the characteristic speed at the contact</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;is near zero. This is activated by setting `flathllc=T` (its default is</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;false). One can also solve some potential noise problems in the HLLC by</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;switching to the HLLCD variant, a kind of mix between HLLC and TVDLF. The</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;TVDLF is then used in a user-controlled region around a point where there is a</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;sign change in flux, whose width is set by `nxdiffusehllc` (an integer which</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;is 0 by default).</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;### Dimensional splitting {#par_dimsplit}</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;Special sources, if any, can be added in a split or unsplit way according to the</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;logical variables `source_split_usr` The default value is false meaning these sources are added</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;in an unsplit way by default. The split sources are added according to</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;`typesourcesplit`. The meaning of the different options for</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;`typesourcesplit` is described in</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;[discretization](@ref disc-splitting). Under default</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;settings, we use unsplit sources only, and if one reverts to split sources,</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;`typesourcesplit=&#39;sfs&#39;`.</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;In multidimensional calculations dimensional splitting can be used by setting</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;`dimsplit=T`, with an alternating order of the sweeps</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;`typedimsplit=&#39;xyyx&#39;` by default. It is best to use</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;`dimsplit=F`, the default value, but the TVD method needs a dimensionally</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;split strategy. The limitations on using dimensionally unsplit methods are</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;described in [methods](methods.md).</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;### Positivity fixes {#par_positivityfix}</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;Negative pressure or density caused by the numerical approximations can make the</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;code crash. For HD and MHD modules this can be monitored</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;or even cured by the handle_small_values subroutines in each substep of iteration. </div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;The control parameters `small_density, small_pressure, small_temperature` play a role here:</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;they can be set to small positive values but not negative values, while their default is 0. If </div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;`small_temperature` is positive, `small_pressure` is overwritten by the product of </div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;`small_pressure` and `small_temperature`. If `check_small_values` is set to .true.,</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;additional check for small values will be triggered in phys_to_primitive, phys_to_conserved,</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;and source terms such as resistive terms in MHD.</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;The actual treatment involves the _small_values_method_ parameter: Its default value</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;&#39;error&#39; causes a full stop in the handle_small_values subroutine in the physics </div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;modules. In this way, you can use it for debugging purposes, to spot from where the actual</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;negative pressure and unphysical value gets introduced. If it is somehow unavoidable in</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;your simulations, then you may rerun with a recovery process turned on as</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;follows.  When _small_values_method=&#39;replace&#39;_, the parameters small_pressure, small_density </div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;are used to replace any unphysical value and set momentum to be 0, as encoded in </div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;`mod_small_values.t`. When you select _small_values_method=&#39;average&#39;_, any unphysical value</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;is replaced by averaging from a user-controlled environment about the faulty cells.</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;The width of this environment is set by the integer _small_values_daverage_.</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;### Special process {#par_process}</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;User controlled special process can be added to </div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;each iteration. Subroutine usr_process_grid can be registered in </div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;mod_usr.t to process for each grid. Subroutine usr_process_global can be registered</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;in mod_usr.t to do global process. For example, you can do computations of</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;non-local auxiliary variables (like the divergence of some vector fields, time integrals</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;etc).</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;The `typegrad` can be selected to switch from simple centered differencing</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;on the cell center values, to limited reconstruction followed by differencing</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;when computing gradients. They call either of _gradient_ (&#39;central&#39;) or</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;_gradientS_ (&#39;limited&#39;) subroutines that are themselves found in the</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;_geometry.t_ module. Similarly, a switch for the divergence of a vector is the</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;`typediv` switch. When the &#39;limited&#39; variant is used, one must set the </div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;corresponding gradient_limiter array to select a limiter (per level).</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;## Boundlist {#par_boundlist}</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    &amp;boundlist</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;     nghostcells= INTEGER</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;     typeboundary_min^D= &#39;cont&#39;|&#39;symm&#39;|&#39;asymm&#39;|&#39;periodic&#39;|&#39;special&#39;|&#39;noinflow&#39;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;     typeboundary_max^D= &#39;cont&#39;|&#39;symm&#39;|&#39;asymm&#39;|&#39;periodic&#39;|&#39;special&#39;|&#39;noinflow&#39;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;     internalboundary = F | T</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;     typeghostfill= &#39;linear&#39; | &#39;copy&#39; </div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;     prolongation_method= &#39;linear&#39; | &#39;other&#39; (no interpolation)</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    /</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;The boundary types have to be defined for each **conserved variable**, except for </div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;psi (in GLM-MHD) and tracer fluids, at each physical edge of the grid. For 2D hydrodynamics they are:</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;rho,m1,m2,e at the left boundary (typeboundary_min1); rho,m1,m2,e at the right </div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;(typeboundary_max1); rho,m1,m2,e at the bottom (typeboundary_min2); rho,m1,m2,e </div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;at the top boundary (typeboundary_max2). Boundary types of psi (in GLM-MHD) and </div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;tracer fluids are automatically set to be the same as boundary type of density </div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;by default. Boundary types of dust density and dust momentum still must be set</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;manually by user, if dust module is activated. The general</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;subroutine devoted to the treatment of boundary conditions (either customized</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;by the user or not, internal or external to the simulation space, polar or not)</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;is _get_bc_ and the main files concerned are _mod_ghostcells_update.t_ and</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;_boundary_conditions.t_. Since the pre-defined boundary conditions are applied</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;to the conserved variables, it does not guarantee the continuity of the fluxes</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;(i.e. the terms associated to the velocity within the divergences in the</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;fundamental equations under their conservative form, see</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;[equations.md](equations.md)) and can prevent the fluid</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;from reaching a steady state. For instance, a conserved total specific intern</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;energy (i.e. intern plus kinetic energy) _e_ does not result, in general, in a</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;conserved flux of the variable carried by the velocity field i.e. _e+P_, where</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;_P_ is the pressure. Without a source term, it means that the time variation of</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;_e_ can not cancel out.</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;Instead of manually specifying one by one the boundary conditions, the user can</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;write _8*&#39;X&#39;_ to replace _&#39;X&#39;_ 8 times in a row for instance. Beware, it is</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;simply a syntax substitution rule which does not tell anything about the number</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;of variables nor the number of dimensions. To improve readability, users are</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;invited to highlight this underlying structure in the instructions. For</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;instance, in a two dimensional hydrodynamical simulation space</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;(_ndim=2_) with the mass density, three components of the velocity field</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;(_ndir=3_) and an energy equation, if the</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;bottom boundary is a plane of symmetry, the upper boundary is opened and the</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;lateral boundaries are periodic, we would write :</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    &amp;boundlist</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;     typeboundary_min1= 5*&#39;periodic&#39;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;     typeboundary_max1= 5*&#39;periodic&#39;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;     typeboundary_min2= &#39;symm&#39;,&#39;symm&#39;,&#39;asymm&#39;,&#39;symm&#39;,&#39;symm&#39;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;     typeboundary_max2= 5*&#39;cont&#39;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    /</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;The default number of ghost cell layers used to surround the grid (and in fact</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;each grid at each level and location) is set by default to `nghostcells=2` and</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;automatically increased if larger stencil is needed for high-order reconstructions.</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;For example, when `limiter=mp5` it takes 3,  and `limiter=ppm` makes it 4. </div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;The default boundary type is `cont` for all variables and edges, it means</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;that the gradient (of the conservative variables) is kept zero by copying the</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;variable values from the edge of the mesh into the ghost cells.</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;Other predefined types are the `symm` and `asymm` types, which are mostly</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;used for reflective boundaries, or at symmetry axes of the domain (the polar</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;or equatorial axis, e.g.). One then typically makes the momentum orthogonal to</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;the given boundary antisymmetric (`asymm`), the rest of the variables</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;`symm`. These boundary types can also be used to represent a perfectly</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;conducting wall (the orthogonal component of the magnetic field should be</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;antisymmetric, the transverse component symmetric) or the physical symmetry of</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;the physical problem. More generally, true (a.k.a. polar) vectors (resp.</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;pseudovectors, a.k.a. axial vectors) such as the ones associated to a velocity</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;(resp. magnetic) field, transform such as the normal component (resp. the</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;tangential components) is antisymmetric while the tangential components (resp.</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;the normal component) are symmetric with respect to a plane of symmetry of</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;causes (distribution of mass, of currents, of charges, etc). And vice versa for</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;a plane of antisymmetry.</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;If the pole is adjacent to the simulation space (i.e. if the simulation extends</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;down to a distance to the axis of 0 in cylindrical coordinates and if the</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;simulation extends down to a colatitude of 0 or up to a colatitude of pi in</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;spherical coordinates), symm and/or asymm boundary conditions must necessarily</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;be specified. Scalar quantities are always symmetric. For a vector, whatever</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;its nature (true vector or pseudovector), the boundary condition to choose for</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;a given component depends on the behaviour of the axis vector associated to</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;this component when a rotation of pi is performed within the plane orthogonal</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;to the pole. In cylindrical coordinates, it means that the radial and vertical</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;components should be symmetric while the orthoradial component is antisymmetric.</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;In spherical coordinates, it means that the radial component is symmetric while</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;the two remaining components are antisymmetric.</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;For 3D cylindrical and spherical grid computations, the singular polar axis is</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;trivially handled using a so-called pi-periodic boundary treatment, where</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;periodicity across the pole comes from the grid cell diagonally across the</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;pole, i.e. displaced over pi instead of 2 pi. These are automatically</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;recognized from the coordinate setting, and the corresponding range in angle</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;phi must span 2 pi for cylindrical, and theta must then start at zero (to</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;include the north pole) and/or end at pi (for the south pole) for spherical</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;grids. The user just needs to set the typeboundary as typeboundary_min2=8*&#39;pole&#39; </div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;and/or typeboundary_max2=8*&#39;pole&#39; in 3D spherical coordinates or typeboundary_min1=8*&#39;pole&#39;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;in cylindrical/polar coordinates, or use symmetry boundary (using symm and asymm combinations). </div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;The case of periodic boundaries can be handled with setting &#39;periodic&#39; for all</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;variables at both boundaries that make up a periodic pair. Hence triple</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;periodic in 3D MHD where 8 variables are at play means setting</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    typeboundary_min1=8*&#39;periodic&#39;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    typeboundary_max1=8*&#39;periodic&#39;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    typeboundary_min2=8*&#39;periodic&#39;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    typeboundary_max2=8*&#39;periodic&#39;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    typeboundary_min3=8*&#39;periodic&#39;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    typeboundary_max3=8*&#39;periodic&#39;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;The possibility exists to put a boundary condition mimicking zero</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;across the computational boundary, by selecting _typeboundary=&#39;noinflow&#39;_</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160; for the momentum vector components of your particular</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;application. This is in principle only relevant for the momentum component</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;locally perpendicular to the boundary (for others a continuous extrapolation</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;is done). The _noinflow_ extrapolates values that are outwardly</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;moving continuously, while clipping all values that are inwardly advecting</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;momentum to zero. </div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;The `special` type is to be used for setting fixed values, or any time</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;dependent or other more complicated boundary conditions, and results in a call</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;to the `usr_special_bc` subroutine which has to be provided by the user in</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;the _mod_usr.t_ module. The variables with</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;`special` boundary type are updated last within a given boundary region,</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;thus the subroutine may use the updated values of the other variables. The</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;order of the variables is fixed by the equation module chosen, i.e. _rho m1 m2</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;m3 e b1 b2 b3_ for 3D MHD. It is suggested to set all typeboundary entries </div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;for a certain boundary region to `special`  to consistently fill the</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;boundary info for all variables in a user-defined manner.</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;Internal boundaries can be used to overwrite the domain variables with</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;specified values through _usr_internal_bc_ subroutine. This is activated with the switch `internalboundary=T`.</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;Internally, these are assigned before the ghost-cells and external boundaries</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;are applied (in subroutine get_bc).</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;The `typeghostfill=&#39;linear&#39;` implies the use of limited linear</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;reconstructions in the filling of ghost cells for internal boundaries that</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;exist due to the AMR hierarchy. A first order &#39;copy&#39; can be used as well, or</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;an unlimited linear reconstruction by setting it to &#39;unlimit&#39;. To retain</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;second order accuracy, at least the default &#39;linear&#39; type is needed.</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;The `prolongation_method=&#39;linear&#39;` implies the use of limited linear</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;reconstructions when filling newly triggered, finer grids from previous</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;coarser grid values. Setting it different from this default string will imply</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;mere first order copying for finer level grids (and is thus not advised when</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;second order is desired).</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;## meshlist {#par_meshlist}</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    &amp;meshlist</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;     refine_max_level= INTEGER</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;     domain_nx1= INTEGER</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;     domain_nx2= INTEGER</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;     domain_nx3= INTEGER</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;     block_nx1= INTEGER</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;     block_nx2= INTEGER</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;     block_nx3= INTEGER</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;     xprobmin1= DOUBLE</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;     xprobmax1= DOUBLE</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;     xprobmin2= DOUBLE</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;     xprobmax2= DOUBLE</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;     xprobmin3= DOUBLE</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;     xprobmax3= DOUBLE</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;     refine_criterion= INTEGER</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;     nbufferx1= INTEGER</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;     nbufferx2= INTEGER</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;     nbufferx3= INTEGER</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;     max_blocks= INTEGER</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;     amr_wavefilter= nlevelshi DOUBLE values</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;     refine_threshold= nlevelshi DOUBLE values</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;     derefine_ratio= nlevelshi DOUBLE values</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;     w_refine_weight= DOUBLE array nw+1 values that must sum up to 1.0d0</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;     logflag= nw logical values, all F by default</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;     iprob= INTEGER</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;     prolongprimitive= F | T</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;     coarsenprimitive= F | T</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;     typeprolonglimit= &#39;default&#39; | &#39;minmod&#39; | &#39;woodward&#39; | &#39;koren&#39; | &#39;unlimit&#39;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;     tfixgrid= DOUBLE</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;     itfixgrid= INTEGER</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;     ditregrid= INTEGER</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;     stretch_dim= ndim STRING values (&#39;uni&#39;,&#39;symm&#39;,&#39;none&#39;)</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;     stretch_uncentered = F | T</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;     qstretch_baselevel= DOUBLE</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;     nstretchedblocks_baselevel= INTEGER</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    /</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;### refine_max_level, max_blocks, domain_nx^D, block_nx^D, xprobmin^D, xprobmax^D {#par_refine_max_level}</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;`refine_max_level` indicates the maximum number of grid levels that can be used </div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;during the simulation, including the base grid level. It is an integer value </div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;which is maximally equal to the parameter _nlevelshi_ and minimally equal to 1. </div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;The parameter _nlevelshi=20_ by default, a value set in _mod_global_parameters.t_, </div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;so that if more than 20 levels are to be used, one must change this value and </div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;recompile. Note that when _refine_max_level&amp;gt;1_, it is possible that during </div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;runtime, the highest grid level is temporarily lower than refine_max_level, and/or </div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;that the coarsest grid is at a higher level than the base level. The number of </div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;grid blocks in each processor has an upper limit defined by `max_blocks` which </div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;is 4000 by default and can be set to higher numbers if too many blocks in a </div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;processor are allocated.</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;The computational domain is set by specifying the minimal and maximal</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;coordinate value per direction in the _xprob^L_ settings. When cylindrical or</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;spherical coordinates are selected, the angle ranges (for phi in</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;the cylindrical case, and for both theta and phi in the spherical case) are to</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;be given in 2 pi units.</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;The base grid resolution (i.e. on the coarsest level 1) is best specified by</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;providing _domain_nx^D_, the number of grid cells per dimension, to cover the full</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;computational domain set by the _xprobmin^D_ and _xprobmax^D_. The resolution</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;of each grid block is set by _block_nx^D_ which exclude ghost cells at each side.</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;The _domain_nx^D_ must thus be a integer multiple of _block_nx^D_.</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;### refine_criterion, nbufferx^D, amr_wavefilter {#par_errest}</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;The code offers various choices for the error estimator used in automatically</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;detecting regions that need refinement.</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;When `refine_criterion=0`, all refinement will only be based on the user-</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;defined criteria to be coded up in subroutine _specialrefine_grid_.</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;When `refine_criterion=1`, we simply compare the previous time level t_(n-1)</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;solution with the present t_n values, and trigger refinement on relative</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;differences.</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;When `refine_criterion=3`, the default value, errors are estimated using</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;current t_n values and their gradients following Lohner prescription. In</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;this scheme, the `amr_wavefilter` coefficient can be adjusted from its</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;default value 0.01d0. You can set different values for the wavefilter</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;coefficient per grid level. This error estimator is computationally efficient,</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;and has shown similar accuracy to the Richardson approach on a variety of test</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;problems. When `refine_criterion=3`, the original Lohner method is used. </div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;A call to the user defined subroutine _usr_refine_grid_ follows the error </div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;estimator, making it possible to use this routine for augmented user-controlled </div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;refinement, or even derefinement.</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;Depending on the error estimator used, it is needed or advisable to</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;additionally provide a buffer zone of a certain number of grid cells in width,</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;which will surround cells that are flagged for refinement by any other means.</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;It will thus trigger more finer grids. `nbufferx^D=2` is usually sufficient.</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;It can never be greater than the block size. For Lohner scheme, the buffer </div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;can actually be turned off completely by setting `nbufferx^D=0` which is </div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;default value.</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;### w_refine_weight, logflag, refine_threshold, derefine_ratio {#par_flags}</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;In all error estimators mentioned above (except the refine_criterion=0 case), the</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;comparison or evaluation is done only with a user-selected (sub)set of the</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;conserved variables. The _nw_ variables (which may include auxiliary</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;variables) can be used for error estimation, by setting corresponding weights </div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;in the array _w_refine_weight_, which by default has the first element (corresponds </div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;to density) as 1.d0 and rest elements as 0.d0. The weights w_refine_weight(:) must be</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;positive values between 0.0d0 and 1.0d0, and must add to unity. </div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;The Lohner error estimation (refine_criterion=3) may also decide to use</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;differences in the log10(rho), and this is then done by setting the</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;_logflag(1)=T_. This can be done per selected variables involved in the</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;estimation, but obviously only works for those that remain positive</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;throughout.</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;In the comparison involving the above selected variables, when the total error</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;exceeds the value set by `refine_threshold`, the grid is triggered for refining.</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;Reversely, if the error drops below `derefine_ratio * refine_threshold`, the </div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;grid is coarsened.  The user must always set a (problem dependent) value for </div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;`refine_threshold` (below 1), while the default value for </div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;derefine_ratio=1.0d0/8.0d0 has shown to be a rather</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;generally useful value. You can set threshold values that differ per</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;refinement level. </div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;When subroutine _usr_refine_threshold_ is registered, user can use it to </div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;modify refine_threshold depending on location of interest. For example, increase</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;refine_threshold near quiet boundaries to use coarser blocks there or decrease it</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;to use finer blocks in focused regions.</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;### iprob {#par_iprob}</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;As a possible integer switch for selecting multiple problem setups in the same</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;executable code, the integer switch `iprob` is provided. It is meant to be</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;used only in the user-written subroutines, for switching between e.g. multiple</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;initial conditions for the same executable.</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;### prolongprimitive, coarsenprimitive {#par_prolongprim}</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;It is possible to enforce the code to use primitive variables when coarsening</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;grid information (coarsen), or filling new finer level grids</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;(prolongation). They are then used instead of the conservative variables,</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;which may not be a wise choice, but is perhaps better behaved with respect to</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;positivity of pressure etc. This is activated seperately for prolongation by</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;`prolongprimitive=T`, and for coarsen by `coarsenprimitive=T`. </div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;The parameters `tfixgrid, itfixgrid` are available to fix the AMR</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;hierarchical grid from a certain time onwards (tfixgrid) or iteration (the it-</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;counter for the timesteps) onwards (itfixgrid). This may be handy for steady-</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;state computations, or for those cases where you know that the initial</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;conditions and physical setup is such that the AMR structure at t=0 will be</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;optimal for all times.The parameter `ditregrid` is introduced to reconstruct</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;the whole AMR grids once every ditregrid iteration(s) instead of regridding</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;once in every iteration by default.</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;### `stretch_dim`, `stretch_uncentered` `qstretch_baselevel`, `nstretchedblocks_baselevel` {#par_stretched}</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;We allow stretching of the grid, in combination with any coordinate system (cartesian/polar/cylindrical/spherical) you choose. You activate grid stretching by setting `stretch_dim(1:ndim)`, for example for the second dimension:</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    stretch_dim(2) = &#39;none&#39; | &#39;uni&#39; | &#39;symm&#39;</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;* &#39;none&#39; means don&#39;t stretch this dimension, which is the default.</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;* &#39;uni&#39; means unidirectional stretching, where the grid cells change by a constant factor from cell to cell. The factor for the lowest refinement level can be set by setting `qstretch_baselevel=1.01` (typical values are 1.01 to 1.05 or so, although any number larger than 1 is possible). </div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;* &#39;symm&#39; means symmetric stretching, which is e.g. useful for setting up periodic domain problems or so. You then specify how many blocks you want to have unstretched (uniform) in the middle. E.g., you may have set up 8 blocks along a dimension at level 1, and then you can ask nstretchedblocks_baselevel=2,4,6 or 8. </div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;Stretching can be useful for the radial coordinate in polar/spherical/cylindrical, or you can set the angle theta in 3D spherical to be stretched symmetrically, to leverage the CFL condition.</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;The parameter `stretch_uncentered` (default: true) controls whether</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;`mod_geometry.t` routines such as `divvector()` take into account that a cell</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;face is not between stretched cell-centers. However, this is not yet taken into</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;account in the reconstruction and symm/asymm boundary conditions, which may lead</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;to issues, which can sometimes be avoided by setting `stretch_uncentered` to false.</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;**Note**: the old syntax `stretched_grid=T` was equivalent to `stretch_dim(1) = &#39;uni&#39;`</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;## Paramlist {#par_paramlist}</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    &amp;paramlist</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;      dtpar= DOUBLE</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;      courantpar= DOUBLE</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;      typecourant= &#39;maxsum&#39; | &#39;summax&#39; | &#39;minimum&#39;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;      dtdiffpar= DOUBLE</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;      slowsteps= INTEGER</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    /</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;### dtpar, courantpar, typecourant, dtdiffpar, dtTCpar, slowsteps {#par_dt}</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;If `dtpar` is positive, it sets the timestep `dt`, otherwise</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;`courantpar` is used to limit the time step based on the Courant condition.</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;The default is `dtpar=-1.` and `courantpar=0.8`.</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;For resistive MHD, the time step is also limited by the diffusion time: `dt</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;&amp;lt; dtdiffpar*dx^2/eta`. The default is `dtdiffpar=0.5`. Further</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;restrictions on the time step can be put in the _usr_get_dt_ subroutine in</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;the mod_usr.t. The library routines for</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;viscosity and div B diffusive cleaning, all use the coefficient `dtdiffpar` in</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;their stability conditions. The `typecourant=&#39;maxsum&#39;` means that the</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;time step limit for the CFL conditions takes the maximum over a summed</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;contribution to the maximum physical propagation speed for all dimensions. The</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;detailed formulae are found in setdt.t.</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;If the `slowsteps` parameter is set to a positive integer value greater than</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;1, then in the first `slowsteps-1` time steps `dt` is further reduced</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;according to the</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;        dt= dt * [ 1 - (1-step/slowsteps)**2 ]</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;formula, where `step=1..slowsteps-1`. This reduction can help to avoid</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;problems resulting from numerically unfavourable initial conditions, e.g. very</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;sharp discontinuities. It is normally inactive with a default value -1.</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;# Physics-dependent Namelists {#par_pdpnamelists}</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;## rho list {#par_rholist}</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    &amp;rho_list</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;      rho_v= ndim doubles for advection velocity</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    /</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;## nonlinear list {#par_nonlinearlist}</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    &amp;nonlinear_list</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;      nonlinear_flux_type= INTEGER</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;      kdv_source_term= F | T</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    /</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;## HD list {#par_hdlist}</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    &amp;hd_list</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;      hd_energy= T | F</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;      hd_n_tracer= INTEGER</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;      hd_gamma= DOUBLE </div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;      hd_adiab= DOUBLE</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;      hd_dust= F | T</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;      hd_thermal_conduction= F | T</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;      hd_radiative_cooling= F | T</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;      hd_gravity= F | T</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;      hd_viscosity= F | T</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;      hd_particles= F | T</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;      He_abundance= DOUBLE from 0 to 1</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;      SI_unit= F | T</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    /</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;## MHD list {#par_mhdlist}</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    &amp;mhd_list</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;     mhd_energy= T | F</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;     mhd_n_tracer= INTEGER</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;     mhd_gamma= DOUBLE </div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;     mhd_adiab= DOUBLE</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;     mhd_eta= DOUBLE</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;     mhd_eta_hyper= DOUBLE</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;     mhd_etah= DOUBLE </div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;     mhd_glm_alpha= DOUBLE</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;     mhd_magnetofriction= F | T</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;     mhd_thermal_conduction= F | T</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;     mhd_radiative_cooling= F | T</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;     mhd_Hall= F | T</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;     mhd_gravity= F | T</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;     mhd_viscosity= F | T</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;     mhd_particles= F | T</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;     mhd_4th_order= F | T</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;     typedivbfix= &#39;linde&#39;|&#39;powel&#39;|&#39;glm1&#39;|&#39;glm2&#39;|&#39;glm3&#39;|&#39;lindejanhunen&#39;|&#39;lindepowel&#39;|&#39;lindeglm&#39;|&#39;none&#39;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;     source_split_divb= F | T</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;     boundary_divbfix= 2*ndim logicals, all false by default</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;     divbdiff= DOUBLE between 0 and 2</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;     typedivbdiff= &#39;all&#39; | &#39;ind&#39;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;     divbwave= T | F</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;     B0field= F | T</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;     B0field_forcefree= T | F</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;     Bdip= DOUBLE</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;     Bquad= DOUBLE</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;     Boct= DOUBLE</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;     Busr= DOUBLE</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;     He_abundance= DOUBLE from 0 to 1</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;     SI_unit= F | T</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    /</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;### Magnetic field divergence fixes {#par_divbfix}</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;Depending on `typedivbfix`, sources proportionate to the numerical monopole</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;errors are added, in a source-split way, to momemtum, energy, and induction equation </div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;(the &#39;powel&#39; type), or to the induction equation alone (the &#39;janhunen&#39; type). </div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;The `divbwave` switch is effective for the Riemann type solvers for multi-D MHD only. </div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;The default true value corresponds to Powell divergence wave which stabilizes the Riemann solver.</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;Another source term strategy for monopole error control is choose &#39;linde&#39; type</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160; to do parabolic cleaning, i.e. add source terms which diffuse the local error at the maximal</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;rate still compliant with the CFL limit on the time step. This is activated</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;when `divbdiff` is set to a positive number, which should be less than 2,</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;and again comes in various flavors depending on which equations receive source</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;terms. The choice where only the induction equation gets modified, i.e.</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;`typedivbdiff=&#39;ind&#39;` can be used. </div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;GLM-MHD mixed hyperbolic and parabolic dampening of the divB error</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;using an additional scalar variable _Psi_ (need an addition of the name and</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;boundary condition type in your par-file). The algorithm is described by</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;Dedner et al. in _Journal of Computational Physics 175, 645-673 (2002)</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;doi:10.1006/jcph.2001.6961_. The three versions differ in the source terms </div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;taken along. Thus &#39;glm1&#39; corresponds </div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;to _Equation (24)_ of Dedner et al and &#39;glm2&#39;</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;corresponds to _Equation (38)_ of this paper. The option &#39;glm3&#39; adds no</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;additional sources to the MHD system. We recommend the option</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;&#39;glm1&#39;. For example: in your par-file,</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    &amp;mhd_list</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    typedivbfix=&#39;glm1&#39;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    ...</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;in your `mod_usr.t`, add</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    if(mhd_glm) w(ixO^S,psi_)=0.d0</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;in subroutine `usr_init_one_grid` and ( subroutine `usr_special_bc` if exists).</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;Potential bug: with a pole boundary in cylindrical and spherical coordinates, GLM methods</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;crash your run with negative pressure.</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;Choose &#39;lindejanhunen&#39;, &#39;lindepowel&#39;, or &#39;lindeglm&#39; to use combined divb cleaning.</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;### Magnetic field splitting strategy {#par_MFS}</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;For MHD, we implemented the possibility to use a splitting strategy following</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;Tanaka, where a time-invariant background magnetic field is handled</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;exactly, so that one solves for perturbed magnetic field components instead.</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;This field is taken into account when `B0field=T`, and the magnitude of this</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;field is controlled using the variables `Bdip, Bquad, Boct, Busr`. The first</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;three are pre-implemented formulae for a dipole, quadrupole and octupole field</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;in spherical coordinates only (the parameters set the strength of the dipole,</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;quadrupole and octupole field). This is coded up in the module _set_B0.t_.</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;This same module calls in addition the _usr_set_B0_ subroutine when</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;`Busr` is non-zero, where it then should be used to quantify an additional</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;time-independent field. This latter can be used for cartesian or</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;cylindrical coordinates as well. User can possibly prescibe analytic current in </div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;_usr_set_J0_ subroutine to significantly increase accuracy. Choose </div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;`B0field_forcefree=T` when your background magnetic field is forcefree for better</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;efficiency and accuracy.</div></div><!-- fragment --></div><!-- contents -->
./doc/html/mod__fld_8t.html:<tr class="memitem:a627c9fb68be753e35a88ccf99b48390c"><td class="memItemLeft" align="right" valign="top">subroutine, public&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacemod__fld.html#a627c9fb68be753e35a88ccf99b48390c">mod_fld::fld_init</a> (He_abundance)</td></tr>
./doc/html/mod__rhd__phys_8t_source.html:<a href="mod__rhd__phys_8t.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">!&gt; Hydrodynamics physics module</span></div><div class="line"><a name="l00002"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html">    2</a></span>&#160;<span class="keyword">module</span> <a class="code" href="namespacemod__rhd__phys.html">mod_rhd_phys</a></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;  <span class="keywordtype">implicit none</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;  <span class="keywordtype">private</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">  !&gt; Whether an energy equation is used</span></div><div class="line"><a name="l00008"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">    8</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a> = .true.</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">  !&gt; Whether thermal conduction is added</span></div><div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#ac0b0b10f267eafbf5c5f7c5abf93f1a8">   11</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#ac0b0b10f267eafbf5c5f7c5abf93f1a8">rhd_thermal_conduction</a> = .false.</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">  !&gt; Whether radiative cooling is added</span></div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a08497c026b57c26b43fe9aa77c9990d0">   14</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#a08497c026b57c26b43fe9aa77c9990d0">rhd_radiative_cooling</a> = .false.</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">  !&gt; Whether dust is added</span></div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">   17</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a> = .false.</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">  !&gt; Whether viscosity is added</span></div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a3429d1aaf23051f6d297909eba4ebab6">   20</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#a3429d1aaf23051f6d297909eba4ebab6">rhd_viscosity</a> = .false.</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">  !&gt; Whether gravity is added</span></div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#aeb8d18cdfea77acf1db7386758e45af8">   23</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#aeb8d18cdfea77acf1db7386758e45af8">rhd_gravity</a> = .false.</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">  !&gt; Whether particles module is added</span></div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#ad900c566202c68b5ae414d31c39dc6ff">   26</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#ad900c566202c68b5ae414d31c39dc6ff">rhd_particles</a> = .false.</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">  !&gt; Number of tracer species</span></div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a09e91916a3e96200c09024b89091111e">   29</a></span>&#160;  <span class="keywordtype">integer</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#a09e91916a3e96200c09024b89091111e">rhd_n_tracer</a> = 0</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">  !&gt; Index of the density (in the w array)</span></div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">   32</a></span>&#160;  <span class="keywordtype">integer</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">  !&gt; Indices of the momentum density</span></div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">   35</a></span>&#160;  <span class="keywordtype">integer</span>, <span class="keywordtype">allocatable</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span> :: <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(:)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">  !&gt; Indices of the tracers</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a9e70a644fd053e828b7ba73af0f80bab">   38</a></span>&#160;  <span class="keywordtype">integer</span>, <span class="keywordtype">allocatable</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span> :: <a class="code" href="namespacemod__rhd__phys.html#a9e70a644fd053e828b7ba73af0f80bab">tracer</a>(:)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">  !&gt; Index of the energy density (-1 if not present)</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">   41</a></span>&#160;  <span class="keywordtype">integer</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">  !&gt; Index of the gas pressure (-1 if not present) should equal e_</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a0a9a0fcf5eb47246bbaa270106b92fe5">   44</a></span>&#160;  <span class="keywordtype">integer</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#a0a9a0fcf5eb47246bbaa270106b92fe5">p_</a></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">  !&gt; The adiabatic index</span></div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">   47</a></span>&#160;  <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span>                :: <a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> = 5.d0/3.0d0</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">  !&gt; The adiabatic constant</span></div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a790854f3c46a1c532f0383b3864c2bbf">   50</a></span>&#160;  <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span>                :: <a class="code" href="namespacemod__rhd__phys.html#a790854f3c46a1c532f0383b3864c2bbf">rhd_adiab</a> = 1.0d0</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">  !&gt; The smallest allowed energy</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordtype">double precision</span>, <span class="keywordtype">protected</span>             :: small_e</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">  !&gt; The smallest allowed radiation energy</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordtype">double precision</span>, <span class="keywordtype">protected</span>             :: small_r_e = 0.d0</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">  !&gt; Helium abundance over Hydrogen</span></div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#aadde80b104bcbd035eb7fd36597629e2">   59</a></span>&#160;  <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>     :: <a class="code" href="namespacemod__rhd__phys.html#aadde80b104bcbd035eb7fd36597629e2">he_abundance</a> = 0.1d0</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  !&gt; Index of the radiation energy</span></div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">   62</a></span>&#160;  <span class="keywordtype">integer</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span>              :: <a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">  !&gt; Formalism to treat radiation</span></div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a3fe07d784b3360be222c1189f9c34667">   65</a></span>&#160;  <span class="keywordtype">character(len=8)</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__rhd__phys.html#a3fe07d784b3360be222c1189f9c34667">rhd_radiation_formalism</a> = <span class="stringliteral">&#39;fld&#39;</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">  !&gt; Treat radiation fld_Rad_force</span></div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a748452f7d3c07b8bdcb8ee6bb016ae5a">   68</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span> :: <a class="code" href="namespacemod__rhd__phys.html#a748452f7d3c07b8bdcb8ee6bb016ae5a">rhd_radiation_force</a> = .true.</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">  !&gt; Treat radiation-gas energy interaction</span></div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#ae85f495788a290e4b43177a978e5535e">   71</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span> :: <a class="code" href="namespacemod__rhd__phys.html#ae85f495788a290e4b43177a978e5535e">rhd_energy_interact</a> = .true.</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">  !&gt; Treat radiation energy diffusion</span></div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a45f980fb838ec629e6a354e7fbd50196">   74</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span> :: <a class="code" href="namespacemod__rhd__phys.html#a45f980fb838ec629e6a354e7fbd50196">rhd_radiation_diffusion</a> = .true.</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">  !&gt; Treat radiation advection</span></div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#ad29473edca9d5d426f3dcdcf8d8e69f6">   77</a></span>&#160;  <span class="keywordtype">logical</span>, <span class="keywordtype">public</span>, <span class="keywordtype">protected</span> :: <a class="code" href="namespacemod__rhd__phys.html#ad29473edca9d5d426f3dcdcf8d8e69f6">rhd_radiation_advection</a> = .true.</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="comment">! Public methods</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__rhd__phys.html#a3f7d6dc56a47e47cd1e733b2ae66b071">rhd_phys_init</a></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__rhd__phys.html#a1e07786761252b41b296d48374a982fa">rhd_kin_en</a></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">rhd_get_pthermal</a></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__rhd__phys.html#a24577589fb9f8f42259a60ecc50574cb">rhd_get_pradiation</a></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__rhd__phys.html#a76f4afba27897e442dd81c4fb032a6db">rhd_get_ptot</a></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__rhd__phys.html#a265d45c79231107deb9089eb5545f8ea">rhd_to_conserved</a></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__rhd__phys.html#a0a0f33320c304342bdfb520a283cc114">rhd_to_primitive</a></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__rhd__phys.html#a36be9e21cb606edff5202fc0d3dd762f">rhd_get_tgas</a></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__rhd__phys.html#a61d5453026a8966daf7186f7472b77e6">rhd_get_trad</a></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">contains</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">  !&gt; Read this module&#39;s parameters from a file</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">  subroutine </span>rhd_read_params(files)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">character(len=*)</span>, <span class="keywordtype">intent(in)</span> :: files(:)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">integer</span>                      :: n</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    namelist /rhd_list/ <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>, <a class="code" href="namespacemod__rhd__phys.html#a09e91916a3e96200c09024b89091111e">rhd_n_tracer</a>, <a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>, <a class="code" href="namespacemod__rhd__phys.html#a790854f3c46a1c532f0383b3864c2bbf">rhd_adiab</a>, &amp;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>, <a class="code" href="namespacemod__rhd__phys.html#ac0b0b10f267eafbf5c5f7c5abf93f1a8">rhd_thermal_conduction</a>, <a class="code" href="namespacemod__rhd__phys.html#a08497c026b57c26b43fe9aa77c9990d0">rhd_radiative_cooling</a>, <a class="code" href="namespacemod__rhd__phys.html#a3429d1aaf23051f6d297909eba4ebab6">rhd_viscosity</a>, &amp;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="namespacemod__rhd__phys.html#aeb8d18cdfea77acf1db7386758e45af8">rhd_gravity</a>, <a class="code" href="namespacemod__rhd__phys.html#aadde80b104bcbd035eb7fd36597629e2">he_abundance</a>, <a class="code" href="namespacemod__global__parameters.html#aa772c499c35e8325d16e2a8a824f1660">si_unit</a>, <a class="code" href="namespacemod__rhd__phys.html#ad900c566202c68b5ae414d31c39dc6ff">rhd_particles</a>, <a class="code" href="namespacemod__rhd__phys.html#a3fe07d784b3360be222c1189f9c34667">rhd_radiation_formalism</a>,&amp;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="namespacemod__rhd__phys.html#a748452f7d3c07b8bdcb8ee6bb016ae5a">rhd_radiation_force</a>, <a class="code" href="namespacemod__rhd__phys.html#ae85f495788a290e4b43177a978e5535e">rhd_energy_interact</a>, <a class="code" href="namespacemod__rhd__phys.html#a45f980fb838ec629e6a354e7fbd50196">rhd_radiation_diffusion</a>, <a class="code" href="namespacemod__rhd__phys.html#ad29473edca9d5d426f3dcdcf8d8e69f6">rhd_radiation_advection</a></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">do</span> n = 1, <span class="keyword">size</span>(files)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;       <span class="keyword">open</span>(<a class="code" href="namespacemod__global__parameters.html#a2643b30397384bf36289b3afb2d7dda3">unitpar</a>, file=trim(files(n)), status=<span class="stringliteral">&quot;old&quot;</span>)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;       <span class="keyword">read</span>(<a class="code" href="namespacemod__global__parameters.html#a2643b30397384bf36289b3afb2d7dda3">unitpar</a>, rhd_list, end=111)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;111    <span class="keyword">close</span>(<a class="code" href="namespacemod__global__parameters.html#a2643b30397384bf36289b3afb2d7dda3">unitpar</a>)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">  end subroutine </span>rhd_read_params</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">  !&gt; Write this module&#39;s parameters to a snapsoht</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a63e1f1be53bf460ec41699619a8e60e0">rhd_write_info</a>(fh)</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a63e1f1be53bf460ec41699619a8e60e0">  114</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>                 :: fh</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">parameter</span>                  :: n_par = 1</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordtype">double precision</span>                    :: values(n_par)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordtype">character(len=name_len)</span>             :: names(n_par)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">dimension(MPI_STATUS_SIZE)</span> :: st</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">integer</span>                             :: er</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">call </span>mpi_file_write(fh, n_par, 1, mpi_integer, st, er)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    names(1) = <span class="stringliteral">&quot;gamma&quot;</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    values(1) = <a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">call </span>mpi_file_write(fh, values, n_par, mpi_double_precision, st, er)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">call </span>mpi_file_write(fh, names, n_par * name_len, mpi_character, st, er)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a63e1f1be53bf460ec41699619a8e60e0">rhd_write_info</a></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">  !&gt; Add fluxes in an angular momentum conserving way</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#afba9c5fbcc28ff5d7cd914e3d00f6a49">rhd_angmomfix</a>(fC,x,wnew,ixI^L,ixO^L,idim)</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#afba9c5fbcc28ff5d7cd914e3d00f6a49">  132</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#a8e84e809ba53fffe368aab3ae16ce5ac">dust_n_species</a>, <a class="code" href="namespacemod__dust.html#a7a080e96d8e9cf5d86eb430bbf82cb4e">dust_mom</a></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>       :: x(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span>    :: fC(ixi^s,1:nwflux,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>),  wnew(ixi^s,1:nw)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>                :: ixI^L, ixO^L</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>                :: idim</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordtype">integer</span>                            :: hxO^L, kxC^L, iw</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordtype">double precision</span>                   :: inv_volume(ixi^s)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">logical</span> isangmom</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">! shifted indexes</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    hxo^l=ixo^l-<a class="code" href="namespacemod__global__parameters.html#a31226ca76b94f6c33496105fd25e8fd9">kr</a>(idim,^<a class="code" href="namespacemod__global__parameters.html#a68549065c490d02e1de338e8a60c3f12">d</a>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">! all the indexes</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    kxcmin^<a class="code" href="namespacemod__global__parameters.html#a68549065c490d02e1de338e8a60c3f12">d</a>=hxomin^<a class="code" href="namespacemod__global__parameters.html#a68549065c490d02e1de338e8a60c3f12">d</a>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    kxcmax^<a class="code" href="namespacemod__global__parameters.html#a68549065c490d02e1de338e8a60c3f12">d</a>=ixomax^<a class="code" href="namespacemod__global__parameters.html#a68549065c490d02e1de338e8a60c3f12">d</a>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    inv_volume(ixo^s) = 1.0d0/block%dvolume(ixo^s)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">select case</span>(<a class="code" href="namespacemod__global__parameters.html#a47eb4d4eeece6be8a0088411e386ab95">typeaxial</a>)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">case</span> (<span class="stringliteral">&quot;cylindrical&quot;</span>)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;       <span class="keywordflow">do</span> iw=1,nwflux</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        isangmom = (iw==iw_mom(<a class="code" href="namespacemod__global__parameters.html#a2fdefc95920fcbc7824d3a7fd64d56de">phi_</a>))</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) &amp;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;             isangmom = (isangmom .or. any(<a class="code" href="namespacemod__dust.html#a7a080e96d8e9cf5d86eb430bbf82cb4e">dust_mom</a>(<a class="code" href="namespacemod__global__parameters.html#a2fdefc95920fcbc7824d3a7fd64d56de">phi_</a>,1:<a class="code" href="namespacemod__dust.html#a8e84e809ba53fffe368aab3ae16ce5ac">dust_n_species</a>) == iw))</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">if</span> (idim==<a class="code" href="namespacemod__global__parameters.html#adc6c978e38a475d912f5a75d19e881ec">r_</a> .and. isangmom) <span class="keywordflow">then</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;          fc(kxc^s,iw,idim)= fc(kxc^s,iw,idim)*(x(kxc^s,<a class="code" href="namespacemod__global__parameters.html#adc6c978e38a475d912f5a75d19e881ec">r_</a>)+half*block%dx(kxc^s,idim))</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;          wnew(ixo^s,iw)=wnew(ixo^s,iw) + (fc(ixo^s,iw,idim)-fc(hxo^s,iw,idim)) * &amp;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;               (inv_volume(ixo^s)/x(ixo^s,idim))</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;          wnew(ixo^s,iw)=wnew(ixo^s,iw) + (fc(ixo^s,iw,idim)-fc(hxo^s,iw,idim)) * &amp;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                inv_volume(ixo^s)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keywordflow">        endif</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;     <span class="keywordflow">case</span> (<span class="stringliteral">&quot;spherical&quot;</span>)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) &amp;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;Error: rhd_angmomfix is not implemented &amp;\\</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        &amp;with dust and typeaxial==&#39;sperical&#39;&quot;</span>)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      <span class="keywordflow">do</span> iw=1,nwflux</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">if</span>     (idim==<a class="code" href="namespacemod__global__parameters.html#adc6c978e38a475d912f5a75d19e881ec">r_</a> .and. (iw==iw_mom(2) .or. iw==iw_mom(<a class="code" href="namespacemod__global__parameters.html#a2fdefc95920fcbc7824d3a7fd64d56de">phi_</a>))) <span class="keywordflow">then</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;          fc(kxc^s,iw,idim)= fc(kxc^s,iw,idim)*(x(kxc^s,idim)+half*block%dx(kxc^s,idim))</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;          wnew(ixo^s,iw)=wnew(ixo^s,iw) + (fc(ixo^s,iw,idim)-fc(hxo^s,iw,idim)) * &amp;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;               (inv_volume(ixo^s)/x(ixo^s,idim))</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">elseif</span> (idim==2  .and. iw==iw_mom(<a class="code" href="namespacemod__global__parameters.html#a2fdefc95920fcbc7824d3a7fd64d56de">phi_</a>)) <span class="keywordflow">then</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;          fc(kxc^s,iw,idim)=fc(kxc^s,iw,idim)*sin(x(kxc^s,idim)+half*block%dx(kxc^s,idim)) <span class="comment">! (x(4,3,1)-x(3,3,1)))</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;          wnew(ixo^s,iw)=wnew(ixo^s,iw) + (fc(ixo^s,iw,idim)-fc(hxo^s,iw,idim)) * &amp;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;               (inv_volume(ixo^s)/sin(x(ixo^s,idim)))</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;          wnew(ixo^s,iw)=wnew(ixo^s,iw) + (fc(ixo^s,iw,idim)-fc(hxo^s,iw,idim)) * &amp;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                inv_volume(ixo^s)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keywordflow">        endif</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keywordflow">    end select</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#afba9c5fbcc28ff5d7cd914e3d00f6a49">rhd_angmomfix</a></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">  !&gt; Initialize the module</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a3f7d6dc56a47e47cd1e733b2ae66b071">rhd_phys_init</a>()</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a3f7d6dc56a47e47cd1e733b2ae66b071">  191</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__thermal__conduction.html">mod_thermal_conduction</a></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__radiative__cooling.html">mod_radiative_cooling</a></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#ae39df6d084f2ff5bd3e9ff6408cbd39c">dust_init</a></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__viscosity.html">mod_viscosity</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__viscosity.html#a694614da2f2a26938cfaca941a18963a">viscosity_init</a></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__gravity.html">mod_gravity</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__gravity.html#ac77da47869e83fdec592fa926333722c">gravity_init</a></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__particles.html">mod_particles</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__particles.html#a7a89b126b34bb788a3911955880ddd8f">particles_init</a></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__fld.html">mod_fld</a></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__physics.html">mod_physics</a></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordtype">integer</span> :: itr, idir</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">call </span>rhd_read_params(<a class="code" href="namespacemod__global__parameters.html#a551004039cf74031e6bf9e613eb24e64">par_files</a>)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="namespacemod__physics.html#a9c0b8a2dc10a59ca87e89eaa056929ad">physics_type</a> = <span class="stringliteral">&quot;rhd&quot;</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="namespacemod__global__parameters.html#a70007997d409eb01c4f711cc3d651d32">phys_energy</a>  = <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="namespacemod__global__parameters.html#a539b80e7ad5ccd313f1076e15a7cd137">use_particles</a> = <a class="code" href="namespacemod__rhd__phys.html#ad900c566202c68b5ae414d31c39dc6ff">rhd_particles</a></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">! Determine flux variables</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    rho_ = var_set_rho()</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">allocate</span>(mom(<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a>))</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    mom(:) = var_set_momentum(<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a>)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">! Set index of energy variable</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;       e_ = var_set_energy()</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;       <a class="code" href="namespacemod__rhd__phys.html#a0a9a0fcf5eb47246bbaa270106b92fe5">p_</a> = e_</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;       e_ = -1</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;       <a class="code" href="namespacemod__rhd__phys.html#a0a9a0fcf5eb47246bbaa270106b92fe5">p_</a> = -1</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">    !&gt; set radiation energy</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a> = var_set_radiation_energy()</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="namespacemod__physics.html#a5813eee20a2d7e3892b1c280c2d1c18e">phys_get_dt</a>              =&gt; <a class="code" href="namespacemod__rhd__phys.html#a2348342fd8f3c2578faf61198c1ab059">rhd_get_dt</a></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="namespacemod__physics.html#add1534d1bf3d502c2ff45d80a0d29f9c">phys_get_cmax</a>            =&gt; <a class="code" href="namespacemod__rhd__phys.html#a9fdc90f6fbf753cff3440b2eb7fc3eb4">rhd_get_cmax</a></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="namespacemod__physics.html#a414c54f8225121d3e55cd1345eb98d17">phys_get_cbounds</a>         =&gt; <a class="code" href="namespacemod__rhd__phys.html#a92817e91dfe99a1afb18cc43d09a80bc">rhd_get_cbounds</a></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="namespacemod__physics.html#a2d5e65cc41b36dea6b49f714a983d14d">phys_get_flux</a>            =&gt; <a class="code" href="namespacemod__rhd__phys.html#a9ca65e11c705382335ad41474f56b9e1">rhd_get_flux</a></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="namespacemod__physics.html#adac4714b4d7ac4cebbaa9b859c77c888">phys_get_v_idim</a>          =&gt; <a class="code" href="namespacemod__rhd__phys.html#a9332b8eb584ef098cf493259614355df">rhd_get_v</a></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="namespacemod__physics.html#a69a351b0e023d06873d3d4e3a57362b5">phys_add_source_geom</a>     =&gt; <a class="code" href="namespacemod__rhd__phys.html#a587219c99d42811bb189dedf32fc9f6b">rhd_add_source_geom</a></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="namespacemod__physics.html#ad030d60cc90c6e05874ad76fd2c43e1b">phys_add_source</a>          =&gt; <a class="code" href="namespacemod__rhd__phys.html#ae2f35930c999cdc7e1ebd00ebc399e17">rhd_add_source</a></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="namespacemod__physics.html#a9c0852c1702dd991bda7d4a6fb447f0f">phys_to_conserved</a>        =&gt; <a class="code" href="namespacemod__rhd__phys.html#a265d45c79231107deb9089eb5545f8ea">rhd_to_conserved</a></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="namespacemod__physics.html#a105290107989d541f95f198c999d2b7e">phys_to_primitive</a>        =&gt; <a class="code" href="namespacemod__rhd__phys.html#a0a0f33320c304342bdfb520a283cc114">rhd_to_primitive</a></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="namespacemod__physics.html#a6e35d8fe7e9cfd2e0d5c7f986db91848">phys_check_params</a>        =&gt; <a class="code" href="namespacemod__rhd__phys.html#a3bf5544c4c655f1b971e31f200ed0265">rhd_check_params</a></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="namespacemod__physics.html#aa199f7e72710783733ecba5c9fde3aca">phys_check_w</a>             =&gt; <a class="code" href="namespacemod__rhd__phys.html#aa3f5abcbbd350c6dea281620666ff371">rhd_check_w</a></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="namespacemod__physics.html#a5eafc92ed1d20cf3416db3f6efccbb29">phys_get_pthermal</a>        =&gt; <a class="code" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">rhd_get_pthermal</a></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="namespacemod__physics.html#a1bd8713f2d319f4636d766da3901acdb">phys_get_tgas</a>            =&gt; <a class="code" href="namespacemod__rhd__phys.html#a36be9e21cb606edff5202fc0d3dd762f">rhd_get_tgas</a></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="namespacemod__physics.html#abc2d5a5172c804b9fab9261e9e8482e8">phys_get_trad</a>            =&gt; <a class="code" href="namespacemod__rhd__phys.html#a61d5453026a8966daf7186f7472b77e6">rhd_get_trad</a></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="namespacemod__physics.html#a241ab0320ce19c071fa11e0be4e88095">phys_write_info</a>          =&gt; <a class="code" href="namespacemod__rhd__phys.html#a63e1f1be53bf460ec41699619a8e60e0">rhd_write_info</a></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="namespacemod__physics.html#a204bf73adea52d31b0a11617b43a5c97">phys_handle_small_values</a> =&gt; <a class="code" href="namespacemod__rhd__phys.html#a8eb91b2b6609e139baefc7bb7858e00c">rhd_handle_small_values</a></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="namespacemod__physics.html#adc72e7cc63f6aa94306d342127806e0c">phys_angmomfix</a>           =&gt; <a class="code" href="namespacemod__rhd__phys.html#afba9c5fbcc28ff5d7cd914e3d00f6a49">rhd_angmomfix</a></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">! Whether diagonal ghost cells are required for the physics</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="namespacemod__physics.html#a3b574f164bdb18cad0d1e95962df62a4">phys_req_diagonal</a> = .false.</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">! derive units from basic units</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#ac0f411e5442fe1b1194ca39b2abbed46">rhd_physical_units</a>()</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keyword">call </span><a class="code" href="namespacemod__dust.html#ae39df6d084f2ff5bd3e9ff6408cbd39c">dust_init</a>(rho_, mom(:), e_)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__rhd__phys.html#a3fe07d784b3360be222c1189f9c34667">rhd_radiation_formalism</a>)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;fld&#39;</span>)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a627c9fb68be753e35a88ccf99b48390c">fld_init</a>(he_abundance)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keywordflow">    case default</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;Radiation formalism unknown&#39;</span>)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keywordflow">    end select</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">allocate</span>(<a class="code" href="namespacemod__rhd__phys.html#a9e70a644fd053e828b7ba73af0f80bab">tracer</a>(<a class="code" href="namespacemod__rhd__phys.html#a09e91916a3e96200c09024b89091111e">rhd_n_tracer</a>))</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">! Set starting index of tracers</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">do</span> itr = 1, <a class="code" href="namespacemod__rhd__phys.html#a09e91916a3e96200c09024b89091111e">rhd_n_tracer</a></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;       <a class="code" href="namespacemod__rhd__phys.html#a9e70a644fd053e828b7ba73af0f80bab">tracer</a>(itr) = var_set_fluxvar(<span class="stringliteral">&quot;trc&quot;</span>, <span class="stringliteral">&quot;trp&quot;</span>, itr, need_bc=.false.)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="comment">! initialize thermal conduction module</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#ac0b0b10f267eafbf5c5f7c5abf93f1a8">rhd_thermal_conduction</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      <span class="keywordflow">if</span> (.not. <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) &amp;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;           <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;thermal conduction needs rhd_energy=T&quot;</span>)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__thermal__conduction.html#abc1fecaacf5b0971eb4c25b18f14a374">thermal_conduction_init</a>(<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="comment">! Initialize radiative cooling module</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a08497c026b57c26b43fe9aa77c9990d0">rhd_radiative_cooling</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;      <span class="keywordflow">if</span> (.not. <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) &amp;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;           <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;radiative cooling needs rhd_energy=T&quot;</span>)</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__radiative__cooling.html#a867527cd7b69e067607b7f1aa55dd3f6">radiative_cooling_init</a>(<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>,he_abundance)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="comment">! Initialize viscosity module</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a3429d1aaf23051f6d297909eba4ebab6">rhd_viscosity</a>) <span class="keyword">call </span><a class="code" href="namespacemod__viscosity.html#a694614da2f2a26938cfaca941a18963a">viscosity_init</a>(<a class="code" href="namespacemod__physics.html#a95ed0d73188b963f6d662c2e6626fb1c">phys_wider_stencil</a>,<a class="code" href="namespacemod__physics.html#a3b574f164bdb18cad0d1e95962df62a4">phys_req_diagonal</a>)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">! Initialize gravity module</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#aeb8d18cdfea77acf1db7386758e45af8">rhd_gravity</a>) <span class="keyword">call </span><a class="code" href="namespacemod__gravity.html#ac77da47869e83fdec592fa926333722c">gravity_init</a>()</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="comment">! Initialize particles module</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#ad900c566202c68b5ae414d31c39dc6ff">rhd_particles</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;       <span class="keyword">call </span><a class="code" href="namespacemod__particles.html#a7a89b126b34bb788a3911955880ddd8f">particles_init</a>()</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;       <a class="code" href="namespacemod__physics.html#a3b574f164bdb18cad0d1e95962df62a4">phys_req_diagonal</a> = .true.</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="comment">! Check whether custom flux types have been defined</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">if</span> (.not. <span class="keyword">allocated</span>(<a class="code" href="namespacemod__physics.html#a94801b6f3634c5ba37080e3920d6f7ee">flux_type</a>)) <span class="keywordflow">then</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;       <span class="keyword">allocate</span>(<a class="code" href="namespacemod__physics.html#a94801b6f3634c5ba37080e3920d6f7ee">flux_type</a>(<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a>, nw))</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;       <a class="code" href="namespacemod__physics.html#a94801b6f3634c5ba37080e3920d6f7ee">flux_type</a> = <a class="code" href="namespacemod__physics.html#a73a92a01bccc9fdc749f38eb7414fdcb">flux_default</a></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (any(shape(<a class="code" href="namespacemod__physics.html#a94801b6f3634c5ba37080e3920d6f7ee">flux_type</a>) /= [<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a>, nw])) <span class="keywordflow">then</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;       <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;phys_check error: flux_type has wrong shape&quot;</span>)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    nvector      = 1 <span class="comment">! No. vector vars</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">allocate</span>(iw_vector(nvector))</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    iw_vector(1) = mom(1) - 1</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a3f7d6dc56a47e47cd1e733b2ae66b071">rhd_phys_init</a></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a3bf5544c4c655f1b971e31f200ed0265">rhd_check_params</a></div><div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a3bf5544c4c655f1b971e31f200ed0265">  308</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#abac9be1c49bbffe25b1de9e17c608392">dust_check_params</a></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keywordflow">if</span> (.not. <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;       <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> &lt;= 0.0d0) <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a> (<span class="stringliteral">&quot;Error: rhd_gamma &lt;= 0&quot;</span>)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;       <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a790854f3c46a1c532f0383b3864c2bbf">rhd_adiab</a> &lt; 0.0d0) <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>  (<span class="stringliteral">&quot;Error: rhd_adiab &lt; 0&quot;</span>)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;       <a class="code" href="namespacemod__global__parameters.html#a19f0c8766e32f669bc7680685a55ea33">small_pressure</a>= <a class="code" href="namespacemod__rhd__phys.html#a790854f3c46a1c532f0383b3864c2bbf">rhd_adiab</a>*<a class="code" href="namespacemod__global__parameters.html#ad147dadf78c6587c3b27c5c04039c808">small_density</a>**<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;       <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> &lt;= 0.0d0 .or. <a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> == 1.0d0) &amp;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a> (<span class="stringliteral">&quot;Error: rhd_gamma &lt;= 0 or rhd_gamma == 1.0&quot;</span>)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;       small_e = <a class="code" href="namespacemod__global__parameters.html#a19f0c8766e32f669bc7680685a55ea33">small_pressure</a>/(<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> - 1.0d0)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    small_r_e = small_e</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keyword">call </span><a class="code" href="namespacemod__dust.html#abac9be1c49bbffe25b1de9e17c608392">dust_check_params</a>()</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a3bf5544c4c655f1b971e31f200ed0265">rhd_check_params</a></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#ac0f411e5442fe1b1194ca39b2abbed46">rhd_physical_units</a></div><div class="line"><a name="l00328"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#ac0f411e5442fe1b1194ca39b2abbed46">  328</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordtype">double precision</span> :: mp,kB</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="comment">! Derive scaling units</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__global__parameters.html#aa772c499c35e8325d16e2a8a824f1660">si_unit</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;      mp=mp_si</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;      kb=kb_si</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;      mp=mp_cgs</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;      kb=kb_cgs</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__global__parameters.html#a89a8d172b9343dbf2e294f60fb545c51">unit_velocity</a>==0) <span class="keywordflow">then</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#a20b1887bf28d9921e2193ea1f695cf5a">unit_density</a>=(1.d0+4.d0*<a class="code" href="namespacemod__rhd__phys.html#aadde80b104bcbd035eb7fd36597629e2">he_abundance</a>)*mp*<a class="code" href="namespacemod__global__parameters.html#a4296e156fded38497eb361e3acc27355">unit_numberdensity</a></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#a444384f0dec61b149b0b1f969a8b5e77">unit_pressure</a>=(2.d0+3.d0*<a class="code" href="namespacemod__rhd__phys.html#aadde80b104bcbd035eb7fd36597629e2">he_abundance</a>)*<a class="code" href="namespacemod__global__parameters.html#a4296e156fded38497eb361e3acc27355">unit_numberdensity</a>*kb*<a class="code" href="namespacemod__global__parameters.html#aa1fac5bb69ce3e968348d1435b29f1ac">unit_temperature</a></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#a89a8d172b9343dbf2e294f60fb545c51">unit_velocity</a>=dsqrt(<a class="code" href="namespacemod__global__parameters.html#a444384f0dec61b149b0b1f969a8b5e77">unit_pressure</a>/<a class="code" href="namespacemod__global__parameters.html#a20b1887bf28d9921e2193ea1f695cf5a">unit_density</a>)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#a1e1a3e9685ff4fd0cafa15061c6d0d8f">unit_time</a>=<a class="code" href="namespacemod__global__parameters.html#a47d2d22b0a9fe03c44e2b7c76bd96cea">unit_length</a>/<a class="code" href="namespacemod__global__parameters.html#a89a8d172b9343dbf2e294f60fb545c51">unit_velocity</a></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#a20b1887bf28d9921e2193ea1f695cf5a">unit_density</a>=(1.d0+4.d0*<a class="code" href="namespacemod__rhd__phys.html#aadde80b104bcbd035eb7fd36597629e2">he_abundance</a>)*mp*<a class="code" href="namespacemod__global__parameters.html#a4296e156fded38497eb361e3acc27355">unit_numberdensity</a></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#a444384f0dec61b149b0b1f969a8b5e77">unit_pressure</a>=<a class="code" href="namespacemod__global__parameters.html#a20b1887bf28d9921e2193ea1f695cf5a">unit_density</a>*<a class="code" href="namespacemod__global__parameters.html#a89a8d172b9343dbf2e294f60fb545c51">unit_velocity</a>**2</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#aa1fac5bb69ce3e968348d1435b29f1ac">unit_temperature</a>=<a class="code" href="namespacemod__global__parameters.html#a444384f0dec61b149b0b1f969a8b5e77">unit_pressure</a>/((2.d0+3.d0*<a class="code" href="namespacemod__rhd__phys.html#aadde80b104bcbd035eb7fd36597629e2">he_abundance</a>)*<a class="code" href="namespacemod__global__parameters.html#a4296e156fded38497eb361e3acc27355">unit_numberdensity</a>*kb)</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#a1e1a3e9685ff4fd0cafa15061c6d0d8f">unit_time</a>=<a class="code" href="namespacemod__global__parameters.html#a47d2d22b0a9fe03c44e2b7c76bd96cea">unit_length</a>/<a class="code" href="namespacemod__global__parameters.html#a89a8d172b9343dbf2e294f60fb545c51">unit_velocity</a></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#aa23fc2b074d20b5c5b4489834e65b7fe">unit_radflux</a> = <a class="code" href="namespacemod__global__parameters.html#a89a8d172b9343dbf2e294f60fb545c51">unit_velocity</a>*<a class="code" href="namespacemod__global__parameters.html#a444384f0dec61b149b0b1f969a8b5e77">unit_pressure</a></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#a22cfbe73fdb5e70be995d8dd50eadc55">unit_opacity</a> = <a class="code" href="namespacemod__global__parameters.html#a89a8d172b9343dbf2e294f60fb545c51">unit_velocity</a>/(<a class="code" href="namespacemod__global__parameters.html#a1e1a3e9685ff4fd0cafa15061c6d0d8f">unit_time</a>*<a class="code" href="namespacemod__global__parameters.html#a444384f0dec61b149b0b1f969a8b5e77">unit_pressure</a>)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#ac0f411e5442fe1b1194ca39b2abbed46">rhd_physical_units</a></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">  !&gt; Returns 0 in argument flag where values are ok</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#aa3f5abcbbd350c6dea281620666ff371">rhd_check_w</a>(primitive, ixI^L, ixO^L, w, flag)</div><div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#aa3f5abcbbd350c6dea281620666ff371">  356</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(in)</span>          :: primitive</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, nw)</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(inout)</span>       :: flag(ixi^s)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordtype">double precision</span>             :: tmp(ixi^s)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    flag(ixo^s) = 0</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keywordflow">where</span>(w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>) &lt; <a class="code" href="namespacemod__global__parameters.html#ad147dadf78c6587c3b27c5c04039c808">small_density</a>) flag(ixo^s) = <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;       <span class="keywordflow">if</span> (primitive) <span class="keywordflow">then</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;          <span class="keywordflow">where</span>(w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) &lt; <a class="code" href="namespacemod__global__parameters.html#a19f0c8766e32f669bc7680685a55ea33">small_pressure</a>) flag(ixo^s) = <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;       <span class="keywordflow">else</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;          tmp(ixo^s) = (<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> - 1.0d0)*(w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) - &amp;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;               <a class="code" href="namespacemod__rhd__phys.html#a1e07786761252b41b296d48374a982fa">rhd_kin_en</a>(w, ixi^l, ixo^l))</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;          <span class="keywordflow">where</span>(tmp(ixo^s) &lt; <a class="code" href="namespacemod__global__parameters.html#a19f0c8766e32f669bc7680685a55ea33">small_pressure</a>) flag(ixo^s) = <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="keywordflow">       endif</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordflow">where</span>(w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a>) &lt; small_r_e) flag(ixo^s) = <a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#aa3f5abcbbd350c6dea281620666ff371">rhd_check_w</a></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">  !&gt; Transform primitive variables into conservative ones</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a265d45c79231107deb9089eb5545f8ea">rhd_to_conserved</a>(ixI^L, ixO^L, w, x)</div><div class="line"><a name="l00383"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a265d45c79231107deb9089eb5545f8ea">  383</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#afee2bdebefda67a42cab942bb89754e2">dust_to_conserved</a></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s, nw)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordtype">double precision</span>                :: invgam</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordtype">integer</span>                         :: idir, itr</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#afab102462aa140015d4722d99e2a5de4">check_small_values</a> .and. <a class="code" href="namespacemod__global__parameters.html#afd5cee08b4b631fc4e2454a86a0b8ceb">small_values_use_primitive</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#a8eb91b2b6609e139baefc7bb7858e00c">rhd_handle_small_values</a>(.true., w, x, ixi^l, ixo^l, <span class="stringliteral">&#39;rhd_to_conserved&#39;</span>)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;       invgam = 1.d0/(<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> - 1.0d0)</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;       <span class="comment">! Calculate total energy from pressure and kinetic energy</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;       w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) = w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) * invgam + &amp;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            0.5d0 * sum(w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(:))**2, dim=<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>+1) * w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="comment">! Convert velocity to momentum</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordflow">do</span> idir = 1, <a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;       w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir)) = w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>) * w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir))</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__dust.html#afee2bdebefda67a42cab942bb89754e2">dust_to_conserved</a>(ixi^l, ixo^l, w, x)</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#afab102462aa140015d4722d99e2a5de4">check_small_values</a> .and. .not. <a class="code" href="namespacemod__global__parameters.html#afd5cee08b4b631fc4e2454a86a0b8ceb">small_values_use_primitive</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#a8eb91b2b6609e139baefc7bb7858e00c">rhd_handle_small_values</a>(.false., w, x, ixi^l, ixo^l, <span class="stringliteral">&#39;rhd_to_conserved&#39;</span>)</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a265d45c79231107deb9089eb5545f8ea">rhd_to_conserved</a></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">  !&gt; Transform conservative variables into primitive ones</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a0a0f33320c304342bdfb520a283cc114">rhd_to_primitive</a>(ixI^L, ixO^L, w, x)</div><div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a0a0f33320c304342bdfb520a283cc114">  418</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#a6ea8accb829e2ec233f2b152db06417e">dust_to_primitive</a></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s, nw)</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordtype">integer</span>                         :: itr, idir</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordtype">double precision</span>                :: inv_rho(ixo^s)</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#afab102462aa140015d4722d99e2a5de4">check_small_values</a> .and. .not. <a class="code" href="namespacemod__global__parameters.html#afd5cee08b4b631fc4e2454a86a0b8ceb">small_values_use_primitive</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#a8eb91b2b6609e139baefc7bb7858e00c">rhd_handle_small_values</a>(.false., w, x, ixi^l, ixo^l, <span class="stringliteral">&#39;rhd_to_primitive&#39;</span>)</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    inv_rho = 1.0d0 / w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;       <span class="comment">! Compute pressure</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;       w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) = (<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> - 1.0d0) * (w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) - &amp;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <a class="code" href="namespacemod__rhd__phys.html#a1e07786761252b41b296d48374a982fa">rhd_kin_en</a>(w, ixi^l, ixo^l, inv_rho))</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="comment">! Convert momentum to velocity</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">do</span> idir = 1, <a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;       w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir)) = w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir)) * inv_rho</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="comment">! Convert dust momentum to dust velocity</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__dust.html#a6ea8accb829e2ec233f2b152db06417e">dust_to_primitive</a>(ixi^l, ixo^l, w, x)</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#afab102462aa140015d4722d99e2a5de4">check_small_values</a> .and. <a class="code" href="namespacemod__global__parameters.html#afd5cee08b4b631fc4e2454a86a0b8ceb">small_values_use_primitive</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#a8eb91b2b6609e139baefc7bb7858e00c">rhd_handle_small_values</a>(.true., w, x, ixi^l, ixo^l, <span class="stringliteral">&#39;rhd_to_primitive&#39;</span>)</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a0a0f33320c304342bdfb520a283cc114">rhd_to_primitive</a></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="ff_2amrvacphys_8t.html#a0413004647e54ce66eafbdfa6d6d20a5">e_to_rhos</a>(ixI^L, ixO^L, w, x)</div><div class="line"><a name="l00455"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#aaeb66fbf6060abf2721d66d297cc3a10">  455</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keywordtype">double precision</span>             :: w(ixi^s, nw)</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;       w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) = (<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> - 1.0d0) * w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)**(1.0d0 - <a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>) * &amp;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            (w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) - <a class="code" href="namespacemod__rhd__phys.html#a1e07786761252b41b296d48374a982fa">rhd_kin_en</a>(w, ixi^l, ixo^l))</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;       <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;energy from entropy can not be used with -eos = iso !&quot;</span>)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="ff_2amrvacphys_8t.html#a0413004647e54ce66eafbdfa6d6d20a5">e_to_rhos</a></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="ff_2amrvacphys_8t.html#addd5835d5a2d6151e1d32f46693429f6">rhos_to_e</a>(ixI^L, ixO^L, w, x)</div><div class="line"><a name="l00470"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a6e4ae7c1b1fd419b73793ebfe94eaca2">  470</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordtype">double precision</span>             :: w(ixi^s, nw)</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;       w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) = w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)**(<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> - 1.0d0) * w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) &amp;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            / (<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> - 1.0d0) + <a class="code" href="namespacemod__rhd__phys.html#a1e07786761252b41b296d48374a982fa">rhd_kin_en</a>(w, ixi^l, ixo^l)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;       <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;entropy from energy can not be used with -eos = iso !&quot;</span>)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="ff_2amrvacphys_8t.html#addd5835d5a2d6151e1d32f46693429f6">rhos_to_e</a></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment">  !&gt; Calculate v_i = m_i / rho within ixO^L</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a9332b8eb584ef098cf493259614355df">rhd_get_v</a>(w, x, ixI^L, ixO^L, idim, v)</div><div class="line"><a name="l00486"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a9332b8eb584ef098cf493259614355df">  486</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>           :: ixI^L, ixO^L, idim</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>  :: w(ixi^s, nw), x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: v(ixi^s)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    v(ixo^s) = w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)) / w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a9332b8eb584ef098cf493259614355df">rhd_get_v</a></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">  !&gt; Calculate cmax_idim = csound + abs(v_idim) within ixO^L</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a9fdc90f6fbf753cff3440b2eb7fc3eb4">rhd_get_cmax</a>(w, x, ixI^L, ixO^L, idim, cmax)</div><div class="line"><a name="l00496"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a9fdc90f6fbf753cff3440b2eb7fc3eb4">  496</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#a7af239bb52c595147cfcd5250d689ded">dust_get_cmax</a></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>                       :: ixI^L, ixO^L, idim</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>              :: w(ixi^s, nw), x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span>           :: cmax(ixi^s)</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keywordtype">double precision</span>                          :: csound(ixi^s)</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordtype">double precision</span>                          :: v(ixi^s)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#a9332b8eb584ef098cf493259614355df">rhd_get_v</a>(w, x, ixi^l, ixo^l, idim, v)</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#abc76eec33d0eb9a3d3855aab0562f3d5">rhd_get_csound2</a>(w,x,ixi^l,ixo^l,csound)</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    csound(ixo^s) = sqrt(csound(ixo^s))</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    cmax(ixo^s) = abs(v(ixo^s))+csound(ixo^s)</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__dust.html#a7af239bb52c595147cfcd5250d689ded">dust_get_cmax</a>(w, x, ixi^l, ixo^l, idim, cmax)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a9fdc90f6fbf753cff3440b2eb7fc3eb4">rhd_get_cmax</a></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">  !&gt; Calculate cmax_idim = csound + abs(v_idim) within ixO^L</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a92817e91dfe99a1afb18cc43d09a80bc">rhd_get_cbounds</a>(wLC, wRC, wLp, wRp, x, ixI^L, ixO^L, idim, cmax, cmin)</div><div class="line"><a name="l00518"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a92817e91dfe99a1afb18cc43d09a80bc">  518</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#a7af239bb52c595147cfcd5250d689ded">dust_get_cmax</a></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L, idim</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="comment">! conservative left and right status</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: wLC(ixi^s, nw), wRC(ixi^s, nw)</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="comment">! primitive left and right status</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: wLp(ixi^s, nw), wRp(ixi^s, nw)</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: cmax(ixi^s)</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span>, <span class="keywordtype">optional</span> :: cmin(ixi^s)</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keywordtype">double precision</span> :: wmean(ixi^s,nw)</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">dimension(ixI^S)</span> :: umean, dmean, csoundL, csoundR, tmp1,tmp2,tmp3</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#acf713d403a9b12b4239c7fee5ba1127d">typeboundspeed</a>/=<span class="stringliteral">&#39;cmaxmean&#39;</span>) <span class="keywordflow">then</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;      <span class="comment">! This implements formula (10.52) from &quot;Riemann Solvers and Numerical</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;      <span class="comment">! Methods for Fluid Dynamics&quot; by Toro.</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;      tmp1(ixo^s)=sqrt(wlp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>))</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;      tmp2(ixo^s)=sqrt(wrp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>))</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;      tmp3(ixo^s)=1.d0/(sqrt(wlp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>))+sqrt(wrp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)))</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;      umean(ixo^s)=(wlp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim))*tmp1(ixo^s)+wrp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim))*tmp2(ixo^s))*tmp3(ixo^s)</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;      <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        csoundl(ixo^s)=<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>*wlp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a0a9a0fcf5eb47246bbaa270106b92fe5">p_</a>)/wlp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        csoundr(ixo^s)=<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>*wrp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a0a9a0fcf5eb47246bbaa270106b92fe5">p_</a>)/wrp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;      <span class="keywordflow">else</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        csoundl(ixo^s)=<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>*<a class="code" href="namespacemod__rhd__phys.html#a790854f3c46a1c532f0383b3864c2bbf">rhd_adiab</a>*wlp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)**(<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>-one)</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        csoundr(ixo^s)=<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>*<a class="code" href="namespacemod__rhd__phys.html#a790854f3c46a1c532f0383b3864c2bbf">rhd_adiab</a>*wrp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)**(<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>-one)</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="keywordflow">      end if</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;      dmean(ixo^s) = (tmp1(ixo^s)*csoundl(ixo^s)+tmp2(ixo^s)*csoundr(ixo^s)) * &amp;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;           tmp3(ixo^s) + 0.5d0*tmp1(ixo^s)*tmp2(ixo^s)*tmp3(ixo^s)**2 * &amp;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;           (wrp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim))-wlp(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)))**2</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;      dmean(ixo^s)=sqrt(dmean(ixo^s))</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;      <span class="keywordflow">if</span>(<span class="keyword">present</span>(cmin)) <span class="keywordflow">then</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        cmin(ixo^s)=umean(ixo^s)-dmean(ixo^s)</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        cmax(ixo^s)=umean(ixo^s)+dmean(ixo^s)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;      <span class="keywordflow">else</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        cmax(ixo^s)=abs(umean(ixo^s))+dmean(ixo^s)</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="keywordflow">      end if</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        wmean(ixo^s,1:nwflux)=0.5d0*(wlc(ixo^s,1:nwflux)+wrc(ixo^s,1:nwflux))</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__dust.html#a7af239bb52c595147cfcd5250d689ded">dust_get_cmax</a>(wmean, x, ixi^l, ixo^l, idim, cmax, cmin)</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="keywordflow">      end if</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;      wmean(ixo^s,1:nwflux)=0.5d0*(wlc(ixo^s,1:nwflux)+wrc(ixo^s,1:nwflux))</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;      tmp1(ixo^s)=wmean(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim))/wmean(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#abc76eec33d0eb9a3d3855aab0562f3d5">rhd_get_csound2</a>(wmean,x,ixi^l,ixo^l,csoundr)</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;      csoundr(ixo^s) = sqrt(csoundr(ixo^s))</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;      <span class="keywordflow">if</span>(<span class="keyword">present</span>(cmin)) <span class="keywordflow">then</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        cmax(ixo^s)=max(tmp1(ixo^s)+csoundr(ixo^s),zero)</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        cmin(ixo^s)=min(tmp1(ixo^s)-csoundr(ixo^s),zero)</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;      <span class="keywordflow">else</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        cmax(ixo^s)=abs(tmp1(ixo^s))+csoundr(ixo^s)</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="keywordflow">      end if</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__dust.html#a7af239bb52c595147cfcd5250d689ded">dust_get_cmax</a>(wmean, x, ixi^l, ixo^l, idim, cmax, cmin)</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="keywordflow">      end if</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a92817e91dfe99a1afb18cc43d09a80bc">rhd_get_cbounds</a></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">  !&gt; Calculate the square of the thermal sound speed csound2 within ixO^L.</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment">  !&gt; csound2=gamma*p/rho</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#abc76eec33d0eb9a3d3855aab0562f3d5">rhd_get_csound2</a>(w,x,ixI^L,ixO^L,csound2)</div><div class="line"><a name="l00591"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#abc76eec33d0eb9a3d3855aab0562f3d5">  591</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: w(ixi^s,nw)</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: x(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>   :: csound2(ixi^s)</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#a76f4afba27897e442dd81c4fb032a6db">rhd_get_ptot</a>(w,x,ixi^l,ixo^l,csound2)</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;      csound2(ixo^s)=max(<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>,4.d0/3.d0)*csound2(ixo^s)/w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;      csound2(ixo^s)=<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>*<a class="code" href="namespacemod__rhd__phys.html#a790854f3c46a1c532f0383b3864c2bbf">rhd_adiab</a>*w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)**(<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a>-one)</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#abc76eec33d0eb9a3d3855aab0562f3d5">rhd_get_csound2</a></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment">  !&gt; Calculate thermal pressure=(gamma-1)*(e-0.5*m**2/rho) within ixO^L</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">rhd_get_pthermal</a>(w, x, ixI^L, ixO^L, pth)</div><div class="line"><a name="l00608"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">  608</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: pth(ixi^s)</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;       pth(ixo^s) = (<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a> - 1.0d0) * (w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) - &amp;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            <a class="code" href="namespacemod__rhd__phys.html#a1e07786761252b41b296d48374a982fa">rhd_kin_en</a>(w, ixi^l, ixo^l))</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;       pth(ixi^s) = <a class="code" href="namespacemod__rhd__phys.html#a790854f3c46a1c532f0383b3864c2bbf">rhd_adiab</a> * w(ixi^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)**<a class="code" href="namespacemod__rhd__phys.html#affa3b3753fe7fa3a8880e25b3d932a26">rhd_gamma</a></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">rhd_get_pthermal</a></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment">  !&gt; Calculate radiation pressure within ixO^L</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a24577589fb9f8f42259a60ecc50574cb">rhd_get_pradiation</a>(w, x, ixI^L, ixO^L, prad)</div><div class="line"><a name="l00626"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a24577589fb9f8f42259a60ecc50574cb">  626</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__fld.html">mod_fld</a></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: prad(ixo^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__rhd__phys.html#a3fe07d784b3360be222c1189f9c34667">rhd_radiation_formalism</a>)</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;fld&#39;</span>)</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ab6de94c421ca190d4cc8fbd98890df60">fld_get_radpress</a>(w, x, ixi^l, ixo^l, prad)</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="keywordflow">    case default</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;      <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;Radiation formalism unknown&#39;</span>)</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="keywordflow">    end select</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a24577589fb9f8f42259a60ecc50574cb">rhd_get_pradiation</a></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment">  !&gt; calculates the sum of the gas pressure and max Prad tensor element</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a76f4afba27897e442dd81c4fb032a6db">rhd_get_ptot</a>(w, x, ixI^L, ixO^L, ptot)</div><div class="line"><a name="l00644"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a76f4afba27897e442dd81c4fb032a6db">  644</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keywordtype">double precision</span>             :: pth(ixi^s)</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordtype">double precision</span>             :: prad_tensor(ixo^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordtype">double precision</span>             :: prad_max(ixo^s)</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: ptot(ixi^s)</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keywordtype">integer</span> :: i,j</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">rhd_get_pthermal</a>(w, x, ixi^l, ixo^l, pth)</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#a24577589fb9f8f42259a60ecc50574cb">rhd_get_pradiation</a>(w, x, ixi^l, ixo^l, prad_tensor)</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keywordflow">do</span> i = ixomin1,ixomax1</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;      <span class="keywordflow">do</span> j = ixomin2,ixomax2</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        prad_max(i,j) = maxval(prad_tensor(i,j,:,:))</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    ptot(ixo^s) = pth(ixo^s) + prad_max(ixo^s)</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a76f4afba27897e442dd81c4fb032a6db">rhd_get_ptot</a></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment">  !&gt; Calculates gas temperature</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a36be9e21cb606edff5202fc0d3dd762f">rhd_get_tgas</a>(w, x, ixI^L, ixO^L, tgas)</div><div class="line"><a name="l00670"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a36be9e21cb606edff5202fc0d3dd762f">  670</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keywordtype">double precision</span>             :: pth(ixi^s)</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: tgas(ixi^s)</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keywordtype">double precision</span> :: mu</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">rhd_get_pthermal</a>(w, x, ixi^l, ixo^l, pth)</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="comment">!mu = (1.d0+4.d0*He_abundance)/two</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    mu = (1.+4*<a class="code" href="namespacemod__rhd__phys.html#aadde80b104bcbd035eb7fd36597629e2">he_abundance</a>)/(2.+3.*<a class="code" href="namespacemod__rhd__phys.html#aadde80b104bcbd035eb7fd36597629e2">he_abundance</a>)</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    tgas(ixi^s) = pth(ixi^s)/w(ixi^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)*const_mp*mu/const_kb &amp;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    *<a class="code" href="namespacemod__global__parameters.html#a444384f0dec61b149b0b1f969a8b5e77">unit_pressure</a>/(<a class="code" href="namespacemod__global__parameters.html#a20b1887bf28d9921e2193ea1f695cf5a">unit_density</a>*<a class="code" href="namespacemod__global__parameters.html#aa1fac5bb69ce3e968348d1435b29f1ac">unit_temperature</a>)</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a36be9e21cb606edff5202fc0d3dd762f">rhd_get_tgas</a></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment">  !&gt; Calculates radiation temperature</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a61d5453026a8966daf7186f7472b77e6">rhd_get_trad</a>(w, x, ixI^L, ixO^L, trad)</div><div class="line"><a name="l00692"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a61d5453026a8966daf7186f7472b77e6">  692</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__constants.html">mod_constants</a></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: trad(ixi^s)</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    trad(ixi^s) = (w(ixi^s,<a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a>)&amp;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    /(<a class="code" href="namespacemod__constants.html#ae2cac0f978604eb9045d9e8505e32a16">const_rad_a</a>*<a class="code" href="namespacemod__global__parameters.html#aa1fac5bb69ce3e968348d1435b29f1ac">unit_temperature</a>**4.d0/<a class="code" href="namespacemod__global__parameters.html#a444384f0dec61b149b0b1f969a8b5e77">unit_pressure</a>))**(1.d0/4.d0)</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a61d5453026a8966daf7186f7472b77e6">rhd_get_trad</a></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;  <span class="comment">! Calculate flux f_idim[iw]</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#aee9910e1fecb222fb0bc431bc9977071">rhd_get_flux_cons</a>(w, x, ixI^L, ixO^L, idim, f)</div><div class="line"><a name="l00707"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#aee9910e1fecb222fb0bc431bc9977071">  707</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#a358273045e5e2919f182061c85b77b5b">dust_get_flux</a></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L, idim</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: w(ixi^s, 1:nw), x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>   :: f(ixi^s, nwflux)</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keywordtype">double precision</span>                :: pth(ixi^s), v(ixi^s)</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keywordtype">integer</span>                         :: idir, itr</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">rhd_get_pthermal</a>(w, x, ixi^l, ixo^l, pth)</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#a9332b8eb584ef098cf493259614355df">rhd_get_v</a>(w, x, ixi^l, ixo^l, idim, v)</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>) = v(ixo^s) * w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="comment">! Momentum flux is v_i*m_i, +p in direction idim</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <span class="keywordflow">do</span> idir = 1, <a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;      f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir)) = v(ixo^s) * w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir))</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)) = f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)) + pth(ixo^s)</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;      <span class="comment">! Energy flux is v_i*e + v*p ! Check? m_i/rho*p</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;      f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) = v(ixo^s) * (w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) + pth(ixo^s))</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#ad29473edca9d5d426f3dcdcf8d8e69f6">rhd_radiation_advection</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;      f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a>) = v(ixo^s) * w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a>)</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;      f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a>) = zero</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keywordflow">do</span> itr = 1, <a class="code" href="namespacemod__rhd__phys.html#a09e91916a3e96200c09024b89091111e">rhd_n_tracer</a></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;       f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a9e70a644fd053e828b7ba73af0f80bab">tracer</a>(itr)) = v(ixo^s) * w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a9e70a644fd053e828b7ba73af0f80bab">tracer</a>(itr))</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="comment">! Dust fluxes</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__dust.html#a358273045e5e2919f182061c85b77b5b">dust_get_flux</a>(w, x, ixi^l, ixo^l, idim, f)</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#aee9910e1fecb222fb0bc431bc9977071">rhd_get_flux_cons</a></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;  <span class="comment">! Calculate flux f_idim[iw]</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a9ca65e11c705382335ad41474f56b9e1">rhd_get_flux</a>(wC, w, x, ixI^L, ixO^L, idim, f)</div><div class="line"><a name="l00752"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a9ca65e11c705382335ad41474f56b9e1">  752</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#aba91e073d2ba19189fb1e0e8e3599e45">dust_get_flux_prim</a></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__viscosity.html">mod_viscosity</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__viscosity.html#ad6a3f8605f27c9e28b7f8c75ba81d3f8">visc_get_flux_prim</a> <span class="comment">! viscInDiv</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L, idim</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <span class="comment">! conservative w</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: wC(ixi^s, 1:nw)</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="comment">! primitive w</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>   :: f(ixi^s, nwflux)</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="keywordtype">double precision</span>                :: pth(ixi^s)</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keywordtype">integer</span>                         :: idir, itr</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;       pth(ixo^s) = w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a0a9a0fcf5eb47246bbaa270106b92fe5">p_</a>)</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;       <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">rhd_get_pthermal</a>(w, x, ixi^l, ixo^l, pth)</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>) = w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)) * w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <span class="comment">! Momentum flux is v_i*m_i, +p in direction idim</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keywordflow">do</span> idir = 1, <a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;      f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir)) = w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)) * wc(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir))</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)) = f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)) + pth(ixo^s)</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;      <span class="comment">! Energy flux is v_i*e + v*p ! Check? m_i/rho*p</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;      f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) = w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)) * (wc(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) + w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a0a9a0fcf5eb47246bbaa270106b92fe5">p_</a>))</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#ad29473edca9d5d426f3dcdcf8d8e69f6">rhd_radiation_advection</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;      f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a>) = w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)) * wc(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a>)</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;      f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a>) = zero</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="keywordflow">do</span> itr = 1, <a class="code" href="namespacemod__rhd__phys.html#a09e91916a3e96200c09024b89091111e">rhd_n_tracer</a></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;       f(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a9e70a644fd053e828b7ba73af0f80bab">tracer</a>(itr)) = w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idim)) * w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a9e70a644fd053e828b7ba73af0f80bab">tracer</a>(itr))</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="comment">! Dust fluxes</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__dust.html#aba91e073d2ba19189fb1e0e8e3599e45">dust_get_flux_prim</a>(w, x, ixi^l, ixo^l, idim, f)</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="comment">! Viscosity fluxes - viscInDiv</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a3429d1aaf23051f6d297909eba4ebab6">rhd_viscosity</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__viscosity.html#ad6a3f8605f27c9e28b7f8c75ba81d3f8">visc_get_flux_prim</a>(w, x, ixi^l, ixo^l, idim, f, <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>)</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a9ca65e11c705382335ad41474f56b9e1">rhd_get_flux</a></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="comment">  !&gt; Add geometrical source terms to w</span></div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="comment">  !&gt;</span></div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="comment">  !&gt; Notice that the expressions of the geometrical terms depend only on ndir,</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="comment">  !&gt; not ndim. Eg, they are the same in 2.5D and in 3D, for any geometry.</span></div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="comment">  !&gt;</span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="comment">  !&gt; Ileyk : to do :</span></div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="comment">  !&gt;     - address the source term for the dust in case (typeaxial == &#39;spherical&#39;)</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a587219c99d42811bb189dedf32fc9f6b">rhd_add_source_geom</a>(qdt, ixI^L, ixO^L, wCT, w, x)</div><div class="line"><a name="l00816"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a587219c99d42811bb189dedf32fc9f6b">  816</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__viscosity.html">mod_viscosity</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__viscosity.html#a992638ce7fbbbc28f36a51e4a6d51835">visc_add_source_geom</a> <span class="comment">! viscInDiv</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#a8e84e809ba53fffe368aab3ae16ce5ac">dust_n_species</a>, <a class="code" href="namespacemod__dust.html#a7a080e96d8e9cf5d86eb430bbf82cb4e">dust_mom</a>, <a class="code" href="namespacemod__dust.html#aa6099a97ccb0566c2865b3f939ace603">dust_rho</a>, <a class="code" href="namespacemod__dust.html#a804ba7ea402db06cbf2bb579eddfdf15">dust_small_to_zero</a>, <a class="code" href="hd_2amrvacphys_8t.html#ae969cb894ecbed85e6b802ee03d381ef">set_dusttozero</a>, <a class="code" href="namespacemod__dust.html#a0e0e400aeb3c7f7fe0a828766a3f02cf">dust_min_rho</a></div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: qdt, x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: wCT(ixi^s, 1:nw), w(ixi^s, 1:nw)</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="comment">! to change and to set as a parameter in the parfile once the possibility to</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <span class="comment">! solve the equations in an angular momentum conserving form has been</span></div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="comment">! implemented (change tvdlf.t eg)</span></div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <span class="keywordtype">double precision</span> :: pth(ixi^s), source(ixi^s), minrho</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <span class="keywordtype">integer</span>                         :: iw,idir, h1x^L{^NOONED, h2x^L}</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <span class="keywordtype">integer</span> :: mr_,mphi_ <span class="comment">! Polar var. names</span></div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    <span class="keywordtype">integer</span> :: irho, ifluid, n_fluids</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;       n_fluids = 1 + <a class="code" href="namespacemod__dust.html#a8e84e809ba53fffe368aab3ae16ce5ac">dust_n_species</a></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;       n_fluids = 1</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__global__parameters.html#a47eb4d4eeece6be8a0088411e386ab95">typeaxial</a>)</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <span class="keywordflow">case</span> (<span class="stringliteral">&quot;cylindrical&quot;</span>)</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;       <span class="keywordflow">do</span> ifluid = 0, n_fluids-1</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;          <span class="comment">! s[mr]=(pthermal+mphi**2/rho)/radius</span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;          <span class="keywordflow">if</span> (ifluid == 0) <span class="keywordflow">then</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;             <span class="comment">! gas</span></div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;             irho  = <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;             mr_   = <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(<a class="code" href="namespacemod__global__parameters.html#adc6c978e38a475d912f5a75d19e881ec">r_</a>)</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;             mphi_ = <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(<a class="code" href="namespacemod__global__parameters.html#a2fdefc95920fcbc7824d3a7fd64d56de">phi_</a>)</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;             <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">rhd_get_pthermal</a>(wct, x, ixi^l, ixo^l, source)</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;             minrho = 0.0d0</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;          <span class="keywordflow">else</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;             <span class="comment">! dust : no pressure</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;             irho  = <a class="code" href="namespacemod__dust.html#aa6099a97ccb0566c2865b3f939ace603">dust_rho</a>(ifluid)</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;             mr_   = <a class="code" href="namespacemod__dust.html#a7a080e96d8e9cf5d86eb430bbf82cb4e">dust_mom</a>(<a class="code" href="namespacemod__global__parameters.html#adc6c978e38a475d912f5a75d19e881ec">r_</a>, ifluid)</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;             mphi_ = <a class="code" href="namespacemod__dust.html#a7a080e96d8e9cf5d86eb430bbf82cb4e">dust_mom</a>(<a class="code" href="namespacemod__global__parameters.html#a2fdefc95920fcbc7824d3a7fd64d56de">phi_</a>, ifluid)</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;             source(ixi^s) = zero</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;             minrho = <a class="code" href="namespacemod__dust.html#a0e0e400aeb3c7f7fe0a828766a3f02cf">dust_min_rho</a></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="keywordflow">          end if</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;          <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#a2fdefc95920fcbc7824d3a7fd64d56de">phi_</a> &gt; 0) <span class="keywordflow">then</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;             <span class="keywordflow">where</span> (wct(ixo^s, irho) &gt; minrho)</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                source(ixo^s) = source(ixo^s) + wct(ixo^s, mphi_)**2 / wct(ixo^s, irho)</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                w(ixo^s, mr_) = w(ixo^s, mr_) + qdt * source(ixo^s) / x(ixo^s, <a class="code" href="namespacemod__global__parameters.html#adc6c978e38a475d912f5a75d19e881ec">r_</a>)</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="keywordflow">             end where</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;             <span class="comment">! s[mphi]=(-mphi*mr/rho)/radius</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;             <span class="keywordflow">if</span>(.not. <a class="code" href="namespacemod__global__parameters.html#a46bf424d2b47d434c31a94319a354b4e">angmomfix</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                <span class="keywordflow">where</span> (wct(ixo^s, irho) &gt; minrho)</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;                   source(ixo^s) = -wct(ixo^s, mphi_) * wct(ixo^s, mr_) / wct(ixo^s, irho)</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;                   w(ixo^s, mphi_) = w(ixo^s, mphi_) + qdt * source(ixo^s) / x(ixo^s, <a class="code" href="namespacemod__global__parameters.html#adc6c978e38a475d912f5a75d19e881ec">r_</a>)</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="keywordflow">                end where</span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="keywordflow">             end if</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;          <span class="keywordflow">else</span></div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;             <span class="comment">! s[mr]=2pthermal/radius</span></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;             w(ixo^s, mr_) = w(ixo^s, mr_) + qdt * source(ixo^s) / x(ixo^s, <a class="code" href="namespacemod__global__parameters.html#adc6c978e38a475d912f5a75d19e881ec">r_</a>)</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="keywordflow">          end if</span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="keywordflow">       end do</span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keywordflow">case</span> (<span class="stringliteral">&quot;spherical&quot;</span>)</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;       <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;          <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;Dust geom source terms not implemented yet with spherical geometries&quot;</span>)</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="keywordflow">       end if</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;       mr_   = <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(<a class="code" href="namespacemod__global__parameters.html#adc6c978e38a475d912f5a75d19e881ec">r_</a>)</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;       mphi_ = <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(<a class="code" href="namespacemod__global__parameters.html#a2fdefc95920fcbc7824d3a7fd64d56de">phi_</a>)</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;       h1x^l=ixo^l-<a class="code" href="namespacemod__global__parameters.html#a31226ca76b94f6c33496105fd25e8fd9">kr</a>(1,^<a class="code" href="namespacemod__global__parameters.html#a68549065c490d02e1de338e8a60c3f12">d</a>); {^nooned h2x^l=ixo^l-<a class="code" href="namespacemod__global__parameters.html#a31226ca76b94f6c33496105fd25e8fd9">kr</a>(2,^<a class="code" href="namespacemod__global__parameters.html#a68549065c490d02e1de338e8a60c3f12">d</a>);}</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;       <span class="comment">! s[mr]=((mtheta**2+mphi**2)/rho+2*p)/r</span></div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;       <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#ac35b28a6a4b662912b5d755502927fcb">rhd_get_pthermal</a>(wct, x, ixi^l, ixo^l, pth)</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;       source(ixo^s) = pth(ixo^s) * x(ixo^s, 1) &amp;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            *(block%surfaceC(ixo^s, 1) - block%surfaceC(h1x^s, 1)) &amp;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            /block%dvolume(ixo^s)</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;       <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a> &gt; 1) <span class="keywordflow">then</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;         <span class="keywordflow">do</span> idir = 2, <a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;           source(ixo^s) = source(ixo^s) + wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir))**2 / wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="keywordflow">         end do</span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="keywordflow">       end if</span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;       w(ixo^s, mr_) = w(ixo^s, mr_) + qdt * source(ixo^s) / x(ixo^s, 1)</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;       {^nooned</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;       <span class="comment">! s[mtheta]=-(mr*mtheta/rho)/r+cot(theta)*(mphi**2/rho+p)/r</span></div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;       source(ixo^s) = pth(ixo^s) * x(ixo^s, 1) &amp;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;            * (block%surfaceC(ixo^s, 2) - block%surfaceC(h2x^s, 2)) &amp;</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;            / block%dvolume(ixo^s)</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;       <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a> == 3) <span class="keywordflow">then</span></div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;          source(ixo^s) = source(ixo^s) + (wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(3))**2 / wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)) / tan(x(ixo^s, 2))</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="keywordflow">       end if</span></div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;       <span class="keywordflow">if</span> (.not. <a class="code" href="namespacemod__global__parameters.html#a46bf424d2b47d434c31a94319a354b4e">angmomfix</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;          source(ixo^s) = source(ixo^s) - (wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(2)) * wct(ixo^s, mr_)) / wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="keywordflow">       end if</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;       w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(2)) = w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(2)) + qdt * source(ixo^s) / x(ixo^s, 1)</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;       <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a> == 3) <span class="keywordflow">then</span></div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;         <span class="comment">! s[mphi]=-(mphi*mr/rho)/r-cot(theta)*(mtheta*mphi/rho)/r</span></div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;         <span class="keywordflow">if</span> (.not. <a class="code" href="namespacemod__global__parameters.html#a46bf424d2b47d434c31a94319a354b4e">angmomfix</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;           source(ixo^s) = -(wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(3)) * wct(ixo^s, mr_)) / wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)&amp;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                      - (wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(2)) * wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(3))) / wct(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>) / tan(x(ixo^s, 2))</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;           w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(3)) = w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(3)) + qdt * source(ixo^s) / x(ixo^s, 1)</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="keywordflow">         end if</span></div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="keywordflow">       end if</span></div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;       }</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="keywordflow">    end select</span></div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a> .and. <a class="code" href="namespacemod__dust.html#a804ba7ea402db06cbf2bb579eddfdf15">dust_small_to_zero</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;       <span class="keyword">call </span><a class="code" href="hd_2amrvacphys_8t.html#ae969cb894ecbed85e6b802ee03d381ef">set_dusttozero</a>(qdt, ixi^l, ixo^l,  wct,  w, x)</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a3429d1aaf23051f6d297909eba4ebab6">rhd_viscosity</a>) <span class="keyword">call </span><a class="code" href="namespacemod__viscosity.html#a992638ce7fbbbc28f36a51e4a6d51835">visc_add_source_geom</a>(qdt,ixi^l,ixo^l,wct,w,x)</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a587219c99d42811bb189dedf32fc9f6b">rhd_add_source_geom</a></div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;  <span class="comment">! w[iw]= w[iw]+qdt*S[wCT, qtC, x] where S is the source based on wCT within ixO</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#ae2f35930c999cdc7e1ebd00ebc399e17">rhd_add_source</a>(qdt,ixI^L,ixO^L,wCT,w,x,qsourcesplit,active)</div><div class="line"><a name="l00925"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#ae2f35930c999cdc7e1ebd00ebc399e17">  925</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__radiative__cooling.html">mod_radiative_cooling</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__radiative__cooling.html#ab180d43a71a9fa5e6a6d1ce360d94aa7">radiative_cooling_add_source</a></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#a63222be92b15ca739af19cd425247e3b">dust_add_source</a>, <a class="code" href="namespacemod__dust.html#a7a080e96d8e9cf5d86eb430bbf82cb4e">dust_mom</a>, <a class="code" href="namespacemod__dust.html#aa6099a97ccb0566c2865b3f939ace603">dust_rho</a>, <a class="code" href="namespacemod__dust.html#a8e84e809ba53fffe368aab3ae16ce5ac">dust_n_species</a></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__viscosity.html">mod_viscosity</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__viscosity.html#a61f06d68c91f32ec45245f989be9614c">viscosity_add_source</a></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__usr__methods.html">mod_usr_methods</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__usr__methods.html#a475cb66920b435a067cecc79b38bdf47">usr_gravity</a></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__gravity.html">mod_gravity</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__gravity.html#ab1d9813bcabaa6449eb6534d567537e1">gravity_add_source</a>, <a class="code" href="namespacemod__gravity.html#a000408809c23fbe7c61ae678147c89e3">grav_split</a></div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#a804ba7ea402db06cbf2bb579eddfdf15">dust_small_to_zero</a>, <a class="code" href="hd_2amrvacphys_8t.html#ae969cb894ecbed85e6b802ee03d381ef">set_dusttozero</a></div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: qdt</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: wCT(ixi^s, 1:nw), x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(in)</span>             :: qsourcesplit</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(inout)</span>          :: active</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <span class="keywordtype">double precision</span> :: gravity_field(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="keywordtype">integer</span> :: idust, idim</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#a5d882fb0fb8e6d01178072fde57a0937">rhd_add_radiation_source</a>(qdt,ixi^l,ixo^l,wct,w,x,qsourcesplit,active)</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;      <span class="keyword">call </span>dust_add_source(qdt,ixi^l,ixo^l,wct,w,x,qsourcesplit,active)</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#a08497c026b57c26b43fe9aa77c9990d0">rhd_radiative_cooling</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__radiative__cooling.html#ab180d43a71a9fa5e6a6d1ce360d94aa7">radiative_cooling_add_source</a>(qdt,ixi^l,ixo^l,wct,w,x,&amp;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;           qsourcesplit,active)</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#a3429d1aaf23051f6d297909eba4ebab6">rhd_viscosity</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__viscosity.html#a61f06d68c91f32ec45245f989be9614c">viscosity_add_source</a>(qdt,ixi^l,ixo^l,wct,w,x,&amp;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;           <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>,qsourcesplit,active)</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#aeb8d18cdfea77acf1db7386758e45af8">rhd_gravity</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__gravity.html#ab1d9813bcabaa6449eb6534d567537e1">gravity_add_source</a>(qdt,ixi^l,ixo^l,wct,w,x,&amp;</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;           <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>,qsourcesplit,active)</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a> .and. qsourcesplit .eqv. <a class="code" href="namespacemod__gravity.html#a000408809c23fbe7c61ae678147c89e3">grav_split</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;         active = .true.</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;         <span class="keyword">call </span><a class="code" href="namespacemod__usr__methods.html#a475cb66920b435a067cecc79b38bdf47">usr_gravity</a>(ixi^l, ixo^l, wct, x, gravity_field)</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;         <span class="keywordflow">do</span> idust = 1, dust_n_species</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            <span class="keywordflow">do</span> idim = 1, <a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;               w(ixo^s, dust_mom(idim, idust)) = w(ixo^s, dust_mom(idim, idust)) &amp;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                    + qdt * gravity_field(ixo^s, idim) * wct(ixo^s, dust_rho(idust))</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="keywordflow">            end do</span></div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="keywordflow">         end do</span></div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;         <span class="keywordflow">if</span> (<a class="code" href="namespacemod__dust.html#a804ba7ea402db06cbf2bb579eddfdf15">dust_small_to_zero</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;            <span class="keyword">call </span><a class="code" href="hd_2amrvacphys_8t.html#ae969cb894ecbed85e6b802ee03d381ef">set_dusttozero</a>(qdt, ixi^l, ixo^l,  wct,  w, x)</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="keywordflow">         end if</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="keywordflow">      end if</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#ae2f35930c999cdc7e1ebd00ebc399e17">rhd_add_source</a></div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a5d882fb0fb8e6d01178072fde57a0937">rhd_add_radiation_source</a>(qdt,ixI^L,ixO^L,wCT,w,x,qsourcesplit,active)</div><div class="line"><a name="l00982"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a5d882fb0fb8e6d01178072fde57a0937">  982</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__constants.html">mod_constants</a></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__usr__methods.html">mod_usr_methods</a></div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__fld.html">mod_fld</a></div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: qdt, x(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: wCT(ixi^s,1:nw)</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s,1:nw)</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(in)</span> :: qsourcesplit</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(inout)</span> :: active</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="comment">    !&gt; Update opacities, flux limiter and radiation fluxes</span></div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a18cd3e6670ceeb62df0272131702bc2b">fld_get_opacity</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a2b1606aab3282710571c71588a0da412">fld_get_fluxlimiter</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ab6689aeb8ea556c2e237d385bf25cae7">fld_get_radflux</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a7c57c75a5519ff6d1ac0badc2da7db92">fld_get_eddington</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__fld.html#a856d86414a9d106690e2f9f33976b705">fld_diff_scheme</a> .eq. <span class="stringliteral">&#39;mg&#39;</span>) <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#aa1711732e6003769c59b7b842f316f22">fld_get_diffcoef_central</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <span class="keywordflow">select case</span>(<a class="code" href="namespacemod__rhd__phys.html#a3fe07d784b3360be222c1189f9c34667">rhd_radiation_formalism</a>)</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;fld&#39;</span>)<span class="comment"></span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="comment">      !&gt; diffusion</span></div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;      <span class="comment">! print*, &#39;Doing diffusion stuff&#39;</span></div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a45f980fb838ec629e6a354e7fbd50196">rhd_radiation_diffusion</a>) <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a9daa303d2efe3eed786f669819e2b484">get_fld_diffusion</a>(qdt,ixi^l,ixo^l,wct,w,x,&amp;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>,qsourcesplit,active)<span class="comment"></span></div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="comment">      !&gt; photon tiring, heating and cooling</span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;      <span class="comment">! print*, &#39;Doing bisection stuff&#39;</span></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#ae85f495788a290e4b43177a978e5535e">rhd_energy_interact</a>) <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ad7aa7efd71997039f66577052264a90b">get_fld_energy_interact</a>(qdt,ixi^l,ixo^l,wct,w,x,&amp;</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>,qsourcesplit,active)<span class="comment"></span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="comment">      !&gt; radiation force</span></div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;      <span class="comment">! print*, &#39;Doing radforce stuff&#39;</span></div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a748452f7d3c07b8bdcb8ee6bb016ae5a">rhd_radiation_force</a>) <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a8b296a7d3fd6af5af21981633281db6f">get_fld_rad_force</a>(qdt,ixi^l,ixo^l,wct,w,x,&amp;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        <a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>,qsourcesplit,active)</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;<span class="keywordflow">    case default</span></div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;      <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;Radiation formalism unknown&#39;</span>)</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;<span class="keywordflow">    end select</span></div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a5d882fb0fb8e6d01178072fde57a0937">rhd_add_radiation_source</a></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a2348342fd8f3c2578faf61198c1ab059">rhd_get_dt</a>(w, ixI^L, ixO^L, dtnew, dx^D, x)</div><div class="line"><a name="l01023"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a2348342fd8f3c2578faf61198c1ab059"> 1023</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__dust.html">mod_dust</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__dust.html#a4544afb33be648a3fb4c9a70d6004130">dust_get_dt</a></div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__radiative__cooling.html">mod_radiative_cooling</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__radiative__cooling.html#a5282ffa98e9432247a2f85112def7355">cooling_get_dt</a></div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__viscosity.html">mod_viscosity</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__viscosity.html#a3abc58754cd1fd2237da85b19407d595">viscosity_get_dt</a></div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__gravity.html">mod_gravity</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__gravity.html#a6567eb0ce75b7a2b770ab848461c6fb5">gravity_get_dt</a></div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: dx^D, x(ixi^s, 1:^nd)</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: w(ixi^s, 1:nw)</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: dtnew</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    dtnew = bigdouble</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#a1617de67a8f36702d8c44c273b6e888a">rhd_dust</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__dust.html#a4544afb33be648a3fb4c9a70d6004130">dust_get_dt</a>(w, ixi^l, ixo^l, dtnew, dx^d, x)</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#a08497c026b57c26b43fe9aa77c9990d0">rhd_radiative_cooling</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__radiative__cooling.html#a5282ffa98e9432247a2f85112def7355">cooling_get_dt</a>(w,ixi^l,ixo^l,dtnew,dx^d,x)</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#a3429d1aaf23051f6d297909eba4ebab6">rhd_viscosity</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__viscosity.html#a3abc58754cd1fd2237da85b19407d595">viscosity_get_dt</a>(w,ixi^l,ixo^l,dtnew,dx^d,x)</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacemod__rhd__phys.html#aeb8d18cdfea77acf1db7386758e45af8">rhd_gravity</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__gravity.html#a6567eb0ce75b7a2b770ab848461c6fb5">gravity_get_dt</a>(w,ixi^l,ixo^l,dtnew,dx^d,x)</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a2348342fd8f3c2578faf61198c1ab059">rhd_get_dt</a></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="keyword">  function </span><a class="code" href="namespacemod__rhd__phys.html#a1e07786761252b41b296d48374a982fa">rhd_kin_en</a>(w, ixI^L, ixO^L, inv_rho) <span class="keyword">result</span>(ke)</div><div class="line"><a name="l01055"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a1e07786761252b41b296d48374a982fa"> 1055</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a><span class="keywordtype">, only</span>: nw, <a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>                    :: ixI^L, ixO^L</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>           :: w(ixi^s, nw)</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    <span class="keywordtype">double precision</span>                       :: ke(ixo^s)</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>, <span class="keywordtype">optional</span> :: inv_rho(ixo^s)</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">present</span>(inv_rho)) <span class="keywordflow">then</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;       ke = 0.5d0 * sum(w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(:))**2, dim=<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>+1) * inv_rho</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;       ke = 0.5d0 * sum(w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(:))**2, dim=<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>+1) / w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;<span class="keyword">  end function </span><a class="code" href="namespacemod__rhd__phys.html#a1e07786761252b41b296d48374a982fa">rhd_kin_en</a></div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;<span class="keyword">  function </span><a class="code" href="namespacemod__rhd__phys.html#acb7601f3ca24d7f0ea3f3a26d10543eb">rhd_inv_rho</a>(w, ixI^L, ixO^L) <span class="keyword">result</span>(inv_rho)</div><div class="line"><a name="l01069"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#acb7601f3ca24d7f0ea3f3a26d10543eb"> 1069</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a><span class="keywordtype">, only</span>: nw, <a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a></div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>           :: ixI^L, ixO^L</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>  :: w(ixi^s, nw)</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    <span class="keywordtype">double precision</span>              :: inv_rho(ixo^s)</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <span class="comment">! Can make this more robust</span></div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    inv_rho = 1.0d0 / w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="keyword">  end function </span><a class="code" href="namespacemod__rhd__phys.html#acb7601f3ca24d7f0ea3f3a26d10543eb">rhd_inv_rho</a></div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a8eb91b2b6609e139baefc7bb7858e00c">rhd_handle_small_values</a>(primitive, w, x, ixI^L, ixO^L, subname)</div><div class="line"><a name="l01079"></a><span class="lineno"><a class="line" href="namespacemod__rhd__phys.html#a8eb91b2b6609e139baefc7bb7858e00c"> 1079</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__small__values.html">mod_small_values</a></div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(in)</span>             :: primitive</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L,ixO^L</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s,1:nw)</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: x(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    <span class="keywordtype">character(len=*)</span>, <span class="keywordtype">intent(in)</span>    :: subname</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    <span class="keywordtype">double precision</span> :: smallone</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    <span class="keywordtype">integer</span> :: idir, flag(ixi^s)</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__small__values.html#ae9f015805b337cda4f563826c1e8b7cd">small_values_method</a> == <span class="stringliteral">&quot;ignore&quot;</span>) <span class="keywordflow">return</span></div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__rhd__phys.html#aa3f5abcbbd350c6dea281620666ff371">rhd_check_w</a>(primitive, ixi^l, ixo^l, w, flag)</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    <span class="keywordflow">if</span> (any(flag(ixo^s) /= 0)) <span class="keywordflow">then</span></div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;      <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__small__values.html#ae9f015805b337cda4f563826c1e8b7cd">small_values_method</a>)</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;      <span class="keywordflow">case</span> (<span class="stringliteral">&quot;replace&quot;</span>)</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#a8a1080d6bb670a6a84c5b03bfe5965a1">small_values_fix_iw</a>(<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)) <span class="keywordflow">then</span></div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;          <span class="keywordflow">where</span>(flag(ixo^s) /= 0) w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>) = <a class="code" href="namespacemod__global__parameters.html#ad147dadf78c6587c3b27c5c04039c808">small_density</a></div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;<span class="keywordflow">        end if</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;        <span class="keywordflow">do</span> idir = 1, <a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;          <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#a8a1080d6bb670a6a84c5b03bfe5965a1">small_values_fix_iw</a>(<a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir))) <span class="keywordflow">then</span></div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;            <span class="keywordflow">where</span>(flag(ixo^s) /= 0) w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(idir)) = 0.0d0</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;<span class="keywordflow">          end if</span></div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="keywordflow">        end do</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacemod__rhd__phys.html#a763cd17a63b0406818b9f70677a41ce5">rhd_energy</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;          <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#a8a1080d6bb670a6a84c5b03bfe5965a1">small_values_fix_iw</a>(<a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>)) <span class="keywordflow">then</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;            <span class="keywordflow">if</span>(primitive) <span class="keywordflow">then</span></div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;              <span class="keywordflow">where</span>(flag(ixo^s) /= 0) w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) = <a class="code" href="namespacemod__global__parameters.html#a19f0c8766e32f669bc7680685a55ea33">small_pressure</a></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;              <span class="keywordflow">where</span>(flag(ixo^s) /= 0)</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                <span class="comment">! Add kinetic energy</span></div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#aabe9a44011f984ec2ca1e717411b77cc">e_</a>) = small_e + 0.5d0 * &amp;</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                     sum(w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a48a856ee050da08341a79fbbdbe51ef1">mom</a>(:))**2, dim=<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>+1) / w(ixo^s, <a class="code" href="namespacemod__rhd__phys.html#a438fa542b078ccff06bdb59532a0fe2e">rho_</a>)</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;<span class="keywordflow">              end where</span></div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="keywordflow">            end if</span></div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="keywordflow">          end if</span></div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;<span class="keywordflow">        end if</span></div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacemod__global__parameters.html#a8a1080d6bb670a6a84c5b03bfe5965a1">small_values_fix_iw</a>(<a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a>)) <span class="keywordflow">then</span></div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;          <span class="keywordflow">where</span>(flag(ixo^s) /= 0) w(ixo^s,<a class="code" href="namespacemod__rhd__phys.html#a44bacff24017d807ee5eae9690d30aa7">r_e</a>) = small_r_e</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;<span class="keywordflow">        end if</span></div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;      <span class="keywordflow">case</span> (<span class="stringliteral">&quot;average&quot;</span>)</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__small__values.html#aae6844cbc69148bd30893e8bf5c4b6da">small_values_average</a>(ixi^l, ixo^l, w, x, flag)</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="keywordflow">      case default</span></div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__small__values.html#a5df6526bdf1a454d0da73b1a06f6a852">small_values_error</a>(w, x, ixi^l, ixo^l, flag, subname)</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="keywordflow">      end select</span></div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__rhd__phys.html#a8eb91b2b6609e139baefc7bb7858e00c">rhd_handle_small_values</a></div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;<span class="keyword">end module </span><a class="code" href="namespacemod__rhd__phys.html">mod_rhd_phys</a></div><div class="ttc" id="namespacemod__global__parameters_html"><div class="ttname"><a href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="ttdoc">This module contains definitions of global parameters and variables and some generic functions/subrou...</div><div class="ttdef"><b>Definition:</b> <a href="mod__global__parameters_8t_source.html#l00005">mod_global_parameters.t:5</a></div></div>
./doc/html/mod__rhd__phys_8t_source.html:<div class="ttc" id="namespacemod__fld_html_a627c9fb68be753e35a88ccf99b48390c"><div class="ttname"><a href="namespacemod__fld.html#a627c9fb68be753e35a88ccf99b48390c">mod_fld::fld_init</a></div><div class="ttdeci">subroutine, public fld_init(He_abundance)</div><div class="ttdoc">Initialising FLD-module: Read opacities Initialise Multigrid adimensionalise kappa Add extra variable...</div><div class="ttdef"><b>Definition:</b> <a href="mod__fld_8t_source.html#l00119">mod_fld.t:119</a></div></div>
./doc/html/mod__fld_8t_source.html:<a href="mod__fld_8t.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">!&gt; Nicolas Moens</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!&gt; Module for including flux limited diffusion in hydrodynamics simulations</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">!&gt; Based on Turner and stone 2001</span></div><div class="line"><a name="l00004"></a><span class="lineno"><a class="line" href="namespacemod__fld.html">    4</a></span>&#160;<span class="keyword">module</span> <a class="code" href="namespacemod__fld.html">mod_fld</a></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__multigrid__coupling.html">mod_multigrid_coupling</a></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    <span class="keywordtype">implicit none</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">    !&gt; source split or not</span></div><div class="line"><a name="l00009"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#aab06593c14e3d0d50622c9920576efdf">    9</a></span>&#160;    <span class="keywordtype">logical</span> :: <a class="code" href="namespacemod__fld.html#aab06593c14e3d0d50622c9920576efdf">fld_split</a> = .false.</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    !&gt; Opacity per unit of unit_density</span></div><div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a833746bb6e5dbd734a00ec94b4669b1b">   12</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a833746bb6e5dbd734a00ec94b4669b1b">fld_kappa0</a> = 0.34d0</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    !&gt; mean particle mass</span></div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a1b3ea3f3889855c64aeb21fd813bb7d3">   15</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a1b3ea3f3889855c64aeb21fd813bb7d3">fld_mu</a> = 0.6d0</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">    !&gt; Dimensionless Boltzman constante sigma</span></div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a269027bb742c903e3031eb0682c72e5e">   18</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a269027bb742c903e3031eb0682c72e5e">fld_sigma_0</a></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">    !&gt; Dimensionless speed of light</span></div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a0359f8ad507898ac3da23f0dfdc19b66">   21</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a0359f8ad507898ac3da23f0dfdc19b66">fld_speedofligt_0</a></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">    !&gt; Maximum amount of pseudotimesteps before trying something else</span></div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a6d5dc4491c473a7d1cf12461e2af282a">   24</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a6d5dc4491c473a7d1cf12461e2af282a">fld_maxdw</a> = 100</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    !&gt; Tolerance for bisection method for Energy sourceterms</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    !&gt; This is a percentage of the minimum of gas- and radiation energy</span></div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a1baf3c3f8c4e68834dfedd8f7362663a">   28</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a1baf3c3f8c4e68834dfedd8f7362663a">fld_bisect_tol</a> = 1.d-5</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">    !&gt; Tolerance for adi method for radiative Energy diffusion</span></div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a194cbe85869bf64600561c7bbb6bdbfb">   31</a></span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a194cbe85869bf64600561c7bbb6bdbfb">fld_adi_tol</a> = 1.d-2</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a0d71ddfe9842309c631d26db954f0764">   33</a></span>&#160;    <span class="keywordtype">double precision</span> :: <a class="code" href="namespacemod__fld.html#a0d71ddfe9842309c631d26db954f0764">fld_max_fracdt</a> = 50.d0</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">    !&gt; Index for kappa</span></div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">   36</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">    !&gt; Index for flux limiter</span></div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">   39</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">    !&gt; Index for ratio of scaleheights R</span></div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a4e7f3f006bd6e9bd5c31208cdaa9af2e">   42</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a4e7f3f006bd6e9bd5c31208cdaa9af2e">i_fld_r</a></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><span class="comment">! DELETE WHEN DONE</span><span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    !&gt; Index for testvariable</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    !!</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">    !!</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    !!</span></div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a29e0598af7adc08a2cd3b7fab0227573">   48</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a29e0598af7adc08a2cd3b7fab0227573">i_test</a></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">    !&gt; Index for Flux</span></div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a60125b551ee124d32d798adcfd4325ae">   51</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">allocatable</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a60125b551ee124d32d798adcfd4325ae">i_flux</a>(:)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">    !&gt; Indexes for Eddington Tensor</span></div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a6d9a872cd7d3a3e58de15d3c14d7156e">   54</a></span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">allocatable</span>, <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a6d9a872cd7d3a3e58de15d3c14d7156e">i_edd</a>(:,:)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">    !&gt; Use constant Opacity?</span></div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a4717a388644e4cb1fe9b0e27860d2007">   57</a></span>&#160;    <span class="keywordtype">character(len=8)</span> :: <a class="code" href="namespacemod__fld.html#a4717a388644e4cb1fe9b0e27860d2007">fld_opacity_law</a> = <span class="stringliteral">&#39;const&#39;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    !&gt; Diffusion limit lambda = 0.33</span></div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a6653738fcac09ac966028771a78e4d52">   60</a></span>&#160;    <span class="keywordtype">character(len=16)</span> :: <a class="code" href="namespacemod__fld.html#a6653738fcac09ac966028771a78e4d52">fld_fluxlimiter</a> = <span class="stringliteral">&#39;Pomraning&#39;</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">    !&gt; diffusion coefficient for multigrid method</span></div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">   63</a></span>&#160;    <span class="keywordtype">integer</span> :: <a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">    !&gt; Which method to solve diffusion part</span></div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a856d86414a9d106690e2f9f33976b705">   66</a></span>&#160;    <span class="keywordtype">character(len=8)</span> :: <a class="code" href="namespacemod__fld.html#a856d86414a9d106690e2f9f33976b705">fld_diff_scheme</a> = <span class="stringliteral">&#39;adi&#39;</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">    !&gt; Which method to find the root for the energy interaction polynomial</span></div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ab52da06b97cae443e859349f1c04b5fa">   69</a></span>&#160;    <span class="keywordtype">character(len=8)</span> :: <a class="code" href="namespacemod__fld.html#ab52da06b97cae443e859349f1c04b5fa">fld_interaction_method</a> = <span class="stringliteral">&#39;Bisect&#39;</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    !&gt; Set Diffusion coefficient to unity</span></div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a92f0c135a240fdc9e30f4b183a23495e">   72</a></span>&#160;    <span class="keywordtype">logical</span> :: <a class="code" href="namespacemod__fld.html#a92f0c135a240fdc9e30f4b183a23495e">fld_diff_testcase</a> = .false.</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">    !&gt; public methods</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    !&gt; these are called in mod_hd_phys</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a8b296a7d3fd6af5af21981633281db6f">get_fld_rad_force</a></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#ad7aa7efd71997039f66577052264a90b">get_fld_energy_interact</a></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a9daa303d2efe3eed786f669819e2b484">get_fld_diffusion</a></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a627c9fb68be753e35a88ccf99b48390c">fld_init</a></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#ab6689aeb8ea556c2e237d385bf25cae7">fld_get_radflux</a></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#ab6de94c421ca190d4cc8fbd98890df60">fld_get_radpress</a></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a2b1606aab3282710571c71588a0da412">fld_get_fluxlimiter</a></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#a18cd3e6670ceeb62df0272131702bc2b">fld_get_opacity</a></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#ad26507d278a97823755f6b5521fd192b">get_rad_extravars</a></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordtype">public</span> :: <a class="code" href="namespacemod__fld.html#ab752f856ef112598eddd89a8896ea081">set_mg_bounds</a></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keyword">contains</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">!!!!!!!!!!!!!!!!!!! GENERAL</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">  !&gt; Reading in fld-list parameters from .par file</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a2fab030adfe37e60459f2f6c8140f091">fld_params_read</a>(files)</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a2fab030adfe37e60459f2f6c8140f091">   95</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__global__parameters.html#a2643b30397384bf36289b3afb2d7dda3">unitpar</a></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__constants.html">mod_constants</a></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">character(len=*)</span>, <span class="keywordtype">intent(in)</span> :: files(:)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">integer</span>                      :: n</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    namelist /fld_list/ <a class="code" href="namespacemod__fld.html#a833746bb6e5dbd734a00ec94b4669b1b">fld_kappa0</a>, <a class="code" href="namespacemod__fld.html#aab06593c14e3d0d50622c9920576efdf">fld_split</a>, <a class="code" href="namespacemod__fld.html#a6d5dc4491c473a7d1cf12461e2af282a">fld_maxdw</a>, &amp;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="namespacemod__fld.html#a1baf3c3f8c4e68834dfedd8f7362663a">fld_bisect_tol</a>, <a class="code" href="namespacemod__fld.html#a92f0c135a240fdc9e30f4b183a23495e">fld_diff_testcase</a>, <a class="code" href="namespacemod__fld.html#a194cbe85869bf64600561c7bbb6bdbfb">fld_adi_tol</a>, <a class="code" href="namespacemod__fld.html#a0d71ddfe9842309c631d26db954f0764">fld_max_fracdt</a>,&amp;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="namespacemod__fld.html#a4717a388644e4cb1fe9b0e27860d2007">fld_opacity_law</a>, <a class="code" href="namespacemod__fld.html#a6653738fcac09ac966028771a78e4d52">fld_fluxlimiter</a>, <a class="code" href="namespacemod__fld.html#a856d86414a9d106690e2f9f33976b705">fld_diff_scheme</a>, <a class="code" href="namespacemod__fld.html#ab52da06b97cae443e859349f1c04b5fa">fld_interaction_method</a></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">do</span> n = 1, <span class="keyword">size</span>(files)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;       <span class="keyword">open</span>(<a class="code" href="namespacemod__global__parameters.html#a2643b30397384bf36289b3afb2d7dda3">unitpar</a>, file=trim(files(n)), status=<span class="stringliteral">&quot;old&quot;</span>)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;       <span class="keyword">read</span>(<a class="code" href="namespacemod__global__parameters.html#a2643b30397384bf36289b3afb2d7dda3">unitpar</a>, fld_list, end=111)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;       111    <span class="keyword">close</span>(<a class="code" href="namespacemod__global__parameters.html#a2643b30397384bf36289b3afb2d7dda3">unitpar</a>)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a2fab030adfe37e60459f2f6c8140f091">fld_params_read</a></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">  !&gt; Initialising FLD-module:</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">  !&gt; Read opacities</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  !&gt; Initialise Multigrid</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">  !&gt; adimensionalise kappa</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">  !&gt; Add extra variables to w-array, flux, kappa, eddington Tensor</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  !&gt; Lambda and R</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  !&gt; ...</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a627c9fb68be753e35a88ccf99b48390c">fld_init</a>(He_abundance)</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a627c9fb68be753e35a88ccf99b48390c">  119</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__variables.html">mod_variables</a></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__physics.html">mod_physics</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__physics.html#a7508e8831946d89944fe8533cb5605bc">phys_global_source</a></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__opacity.html">mod_opacity</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__opacity.html#a874f16e98bb18964835a5276da13e9e1">init_opal</a></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__multigrid__coupling.html">mod_multigrid_coupling</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__multigrid__coupling.html#a15efa50f337c8fae0bd4642d73eeb78d">mg_copy_boundary_conditions</a></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: He_abundance</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">integer</span> :: idir,jdir</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">character(len=1)</span> :: ind_1</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">character(len=1)</span> :: ind_2</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">character(len=2)</span> :: cmp_f</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">character(len=5)</span> :: cmp_e</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">    !&gt; read par files</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a2fab030adfe37e60459f2f6c8140f091">fld_params_read</a>(<a class="code" href="namespacemod__global__parameters.html#a551004039cf74031e6bf9e613eb24e64">par_files</a>)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">    !&gt; Set radiative flux as variable</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">allocate</span>(<a class="code" href="namespacemod__fld.html#a60125b551ee124d32d798adcfd4325ae">i_flux</a>(<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a>))</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      <span class="keyword">write</span>(ind_1,<span class="stringliteral">&#39;(I1)&#39;</span>) idir</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      cmp_f = <span class="stringliteral">&#39;F&#39;</span> // ind_1</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      <a class="code" href="namespacemod__fld.html#a60125b551ee124d32d798adcfd4325ae">i_flux</a>(idir) = <a class="code" href="namespacemod__variables.html#a924c3b2f4e13f6f6432de212ac790966">var_set_extravar</a>(cmp_f,cmp_f)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">    !&gt; Introduce opacity, lambda and R as global variables</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a> = <a class="code" href="namespacemod__variables.html#a924c3b2f4e13f6f6432de212ac790966">var_set_extravar</a>(<span class="stringliteral">&quot;Kappa&quot;</span>, <span class="stringliteral">&quot;Kappa&quot;</span>)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a> = <a class="code" href="namespacemod__variables.html#a924c3b2f4e13f6f6432de212ac790966">var_set_extravar</a>(<span class="stringliteral">&quot;lambda&quot;</span>, <span class="stringliteral">&quot;lambda&quot;</span>)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="namespacemod__fld.html#a4e7f3f006bd6e9bd5c31208cdaa9af2e">i_fld_r</a> = <a class="code" href="namespacemod__variables.html#a924c3b2f4e13f6f6432de212ac790966">var_set_extravar</a>(<span class="stringliteral">&quot;fld_R&quot;</span>, <span class="stringliteral">&quot;fld_R&quot;</span>)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><span class="comment">! DELETE WHEN DONE</span><span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><span class="comment"></span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">    !&gt; Introduce test variable globally</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">    !!</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">    !!</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">    !!</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="namespacemod__fld.html#a29e0598af7adc08a2cd3b7fab0227573">i_test</a> = <a class="code" href="namespacemod__variables.html#a924c3b2f4e13f6f6432de212ac790966">var_set_extravar</a>(<span class="stringliteral">&#39;test&#39;</span>,<span class="stringliteral">&#39;test&#39;</span>)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">allocate</span>(<a class="code" href="namespacemod__fld.html#a6d9a872cd7d3a3e58de15d3c14d7156e">i_edd</a>(<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a>,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a>))</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">do</span> idir = 1, <a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      <span class="keywordflow">do</span> jdir = 1, <a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keyword">write</span>(ind_1,<span class="stringliteral">&#39;(I1)&#39;</span>) idir</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keyword">write</span>(ind_2,<span class="stringliteral">&#39;(I1)&#39;</span>) jdir</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        cmp_e = <span class="stringliteral">&#39;Edd&#39;</span> // ind_1 // ind_2</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <a class="code" href="namespacemod__fld.html#a6d9a872cd7d3a3e58de15d3c14d7156e">i_edd</a>(idir,jdir) = <a class="code" href="namespacemod__variables.html#a924c3b2f4e13f6f6432de212ac790966">var_set_extravar</a>(cmp_e, cmp_e)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__fld.html#a856d86414a9d106690e2f9f33976b705">fld_diff_scheme</a> .eq. <span class="stringliteral">&#39;mg&#39;</span>) <span class="keywordflow">then</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      <a class="code" href="namespacemod__global__parameters.html#ac83affec4bc5aca052a0b30a39dd0ebf">use_multigrid</a> = .true.</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      <a class="code" href="namespacemod__physics.html#a7508e8831946d89944fe8533cb5605bc">phys_global_source</a> =&gt; <a class="code" href="namespacemod__fld.html#a1a7591a7c222a6d98c5c3efa3f446394">diffuse_e_rad_mg</a></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      mg_after_new_tree =&gt; <a class="code" href="namespacemod__fld.html#ac2239b68bdd568bfe10653ef34a21e42">set_mg_diffcoef</a></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      mg%n_extra_vars = 1</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      mg%operator_type = mg_vhelmholtz</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      <a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a> = <a class="code" href="namespacemod__variables.html#a924c3b2f4e13f6f6432de212ac790966">var_set_extravar</a>(<span class="stringliteral">&quot;D&quot;</span>, <span class="stringliteral">&quot;D&quot;</span>)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">    !&gt; Check if fld_numdt is not 1</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__fld.html#a6d5dc4491c473a7d1cf12461e2af282a">fld_maxdw</a> .lt. 2) <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;fld_maxdw should be an integer larger than 1&quot;</span>)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">    !&gt; Need mean molecular weight</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">! fld_mu = (1.d0+4.d0*He_abundance)/two</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="namespacemod__fld.html#a1b3ea3f3889855c64aeb21fd813bb7d3">fld_mu</a> = (1.+4*he_abundance)/(2.+3.*he_abundance)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">    !&gt; Dimensionless speed of light</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="namespacemod__fld.html#a0359f8ad507898ac3da23f0dfdc19b66">fld_speedofligt_0</a> = const_c/<a class="code" href="namespacemod__global__parameters.html#a89a8d172b9343dbf2e294f60fb545c51">unit_velocity</a></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">    !&gt; Dimensionless Boltzman constante sigma</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="namespacemod__fld.html#a269027bb742c903e3031eb0682c72e5e">fld_sigma_0</a> = const_sigma*(<a class="code" href="namespacemod__global__parameters.html#aa1fac5bb69ce3e968348d1435b29f1ac">unit_temperature</a>**4.d0)/(<a class="code" href="namespacemod__global__parameters.html#a89a8d172b9343dbf2e294f60fb545c51">unit_velocity</a>*<a class="code" href="namespacemod__global__parameters.html#a444384f0dec61b149b0b1f969a8b5e77">unit_pressure</a>)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">    !&gt; Make kappa dimensionless !!!STILL NEED TO MULTIPLY W RHO</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="namespacemod__fld.html#a833746bb6e5dbd734a00ec94b4669b1b">fld_kappa0</a> = <a class="code" href="namespacemod__fld.html#a833746bb6e5dbd734a00ec94b4669b1b">fld_kappa0</a>/<a class="code" href="namespacemod__global__parameters.html#a22cfbe73fdb5e70be995d8dd50eadc55">unit_opacity</a></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">    !&gt; Read in opacity table if necesary</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__fld.html#a4717a388644e4cb1fe9b0e27860d2007">fld_opacity_law</a> .eq. <span class="stringliteral">&#39;opal&#39;</span>) <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a874f16e98bb18964835a5276da13e9e1">init_opal</a>(he_abundance)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a627c9fb68be753e35a88ccf99b48390c">fld_init</a></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">  !&gt; Compute all extra variables in w-array:</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">  !&gt; Flux, Eddington tensor, lambda, R, kappa</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#ad26507d278a97823755f6b5521fd192b">get_rad_extravars</a>(w, x, ixI^L, ixO^L)</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ad26507d278a97823755f6b5521fd192b">  202</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a18cd3e6670ceeb62df0272131702bc2b">fld_get_opacity</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a2b1606aab3282710571c71588a0da412">fld_get_fluxlimiter</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ab6689aeb8ea556c2e237d385bf25cae7">fld_get_radflux</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a7c57c75a5519ff6d1ac0badc2da7db92">fld_get_eddington</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__fld.html#a856d86414a9d106690e2f9f33976b705">fld_diff_scheme</a> .eq. <span class="stringliteral">&#39;mg&#39;</span>) <span class="keywordflow">then</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#aa1711732e6003769c59b7b842f316f22">fld_get_diffcoef_central</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ab752f856ef112598eddd89a8896ea081">set_mg_bounds</a>()</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#ad26507d278a97823755f6b5521fd192b">get_rad_extravars</a></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">  !&gt; w[iw]=w[iw]+qdt*S[wCT,qtC,x] where S is the source based on wCT within ixO</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">  !&gt; This subroutine handles the radiation force</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a8b296a7d3fd6af5af21981633281db6f">get_fld_rad_force</a>(qdt,ixI^L,ixO^L,wCT,w,x,&amp;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;       energy,qsourcesplit,active)</div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a8b296a7d3fd6af5af21981633281db6f">  223</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__constants.html">mod_constants</a></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__usr__methods.html">mod_usr_methods</a></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__physics.html">mod_physics</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__physics.html#a5eafc92ed1d20cf3416db3f6efccbb29">phys_get_pthermal</a>  <span class="comment">!needed to get temp</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: qdt, x(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: wCT(ixi^s,1:nw)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s,1:nw)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(in)</span> :: energy,qsourcesplit</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(inout)</span> :: active</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordtype">double precision</span> :: radiation_force(ixo^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordtype">integer</span> :: idir, i, jx^L</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">    !&gt; Calculate and add sourceterms</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">if</span>(qsourcesplit .eqv. <a class="code" href="namespacemod__fld.html#aab06593c14e3d0d50622c9920576efdf">fld_split</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      active = .true.</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">      !&gt; Add momentum sourceterms</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      jx^l=ixo^l+<a class="code" href="namespacemod__global__parameters.html#a31226ca76b94f6c33496105fd25e8fd9">kr</a>(idir,^<a class="code" href="namespacemod__global__parameters.html#a68549065c490d02e1de338e8a60c3f12">d</a>);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;      <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a><span class="comment"></span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">        !&gt; Radiation force = kappa*rho/c *Flux</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        radiation_force(ixo^s,idir) = w(ixo^s,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*wct(ixo^s,iw_rho)/<a class="code" href="namespacemod__fld.html#a0359f8ad507898ac3da23f0dfdc19b66">fld_speedofligt_0</a>*w(ixo^s, <a class="code" href="namespacemod__fld.html#a60125b551ee124d32d798adcfd4325ae">i_flux</a>(idir))</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">        !&gt; Momentum equation source term</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        w(ixo^s,iw_mom(idir)) = w(ixo^s,iw_mom(idir)) &amp;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            + qdt * <a class="code" href="namespacemod__constants.html#a3f0de4f07b907ebb3b322fc5cef30724">half</a>*(radiation_force(ixo^s,idir) + radiation_force(jx^s,idir))</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="comment">!+ qdt * radiation_force(ixO^S,idir)</span><span class="comment"></span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">            !&gt; NOT SURE ON HOW TO AVERAGE OVER LEFTHANDSIDE AND RIGHTHANDSIDE FLUX EDGE</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a8b296a7d3fd6af5af21981633281db6f">get_fld_rad_force</a></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">  !&gt; w[iw]=w[iw]+qdt*S[wCT,qtC,x] where S is the source based on wCT within ixO</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">  !&gt; This subroutine handles the energy exchange between gas and radiation</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#ad7aa7efd71997039f66577052264a90b">get_fld_energy_interact</a>(qdt,ixI^L,ixO^L,wCT,w,x,&amp;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;       energy,qsourcesplit,active)</div><div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ad7aa7efd71997039f66577052264a90b">  264</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__constants.html">mod_constants</a></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__usr__methods.html">mod_usr_methods</a></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__physics.html">mod_physics</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__physics.html#a5eafc92ed1d20cf3416db3f6efccbb29">phys_get_pthermal</a>  <span class="comment">!needed to get temp</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: qdt, x(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: wCT(ixi^s,1:nw)</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s,1:nw)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(in)</span> :: energy,qsourcesplit</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(inout)</span> :: active</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">    !&gt; Calculate and add sourceterms</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">if</span>(qsourcesplit .eqv. <a class="code" href="namespacemod__fld.html#aab06593c14e3d0d50622c9920576efdf">fld_split</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      active = .true.<span class="comment"></span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">      !&gt; Add energy sourceterms</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ab84ab77a70bceeb8fa1f837d61a49f95">energy_interaction</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="keywordflow">    end if</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#ad7aa7efd71997039f66577052264a90b">get_fld_energy_interact</a></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">  !&gt; w[iw]=w[iw]+qdt*S[wCT,qtC,x] where S is the source based on wCT within ixO</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">  !&gt; This subroutine handles the diffusion of the radiation energy density,</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">  !&gt; calling either a multigrid-method or an ADI-scheme (perhaps outdated? Need to check).</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">  !&gt; To be added: 1D backward euler</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a9daa303d2efe3eed786f669819e2b484">get_fld_diffusion</a>(qdt,ixI^L,ixO^L,wCT,w,x,&amp;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;       energy,qsourcesplit,active)</div><div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a9daa303d2efe3eed786f669819e2b484">  291</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__constants.html">mod_constants</a></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__usr__methods.html">mod_usr_methods</a></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__physics.html">mod_physics</a></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__physics.html">mod_physics</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__physics.html#a5eafc92ed1d20cf3416db3f6efccbb29">phys_get_pthermal</a>  <span class="comment">!needed to get temp</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: qdt, x(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: wCT(ixi^s,1:nw)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s,1:nw)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordtype">double precision</span> :: D_center(ixi^s)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(in)</span> :: energy,qsourcesplit</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(inout)</span> :: active</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">    !&gt; Calculate and add sourceterms</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">if</span>(qsourcesplit .eqv. <a class="code" href="namespacemod__fld.html#aab06593c14e3d0d50622c9920576efdf">fld_split</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;      active = .true.<span class="comment"></span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">      !&gt; Begin by evolving the radiation energy field</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;      <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__fld.html#a856d86414a9d106690e2f9f33976b705">fld_diff_scheme</a>)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;      <span class="keywordflow">case</span>(<span class="stringliteral">&#39;adi&#39;</span>)</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a5033cee4008623387e883b250edc5818">evolve_e_rad</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;      <span class="keywordflow">case</span>(<span class="stringliteral">&#39;mg&#39;</span>)<span class="comment"></span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">        !&gt; Do nothing OR CHECK WHAT IS ALREADY DONE BY POINTING</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#aa1711732e6003769c59b7b842f316f22">fld_get_diffcoef_central</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ac2239b68bdd568bfe10653ef34a21e42">set_mg_diffcoef</a>()</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ab752f856ef112598eddd89a8896ea081">set_mg_bounds</a>()</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keyword">call </span>phys_global_source(<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a>, <a class="code" href="namespacemod__global__parameters.html#a2bdc961e7304863887ec17a92ae5ac0a">global_time</a>, active)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keywordflow">      case default</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;Numerical diffusionscheme unknown, try adi or mg&#39;</span>)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keywordflow">      end select</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="keywordflow">      end if</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">      !&gt; Set Diffcoef for next timestep?</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#aa1711732e6003769c59b7b842f316f22">fld_get_diffcoef_central</a>(w, x, ixi^l, ixo^l)</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a9daa303d2efe3eed786f669819e2b484">get_fld_diffusion</a></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">  !&gt; Sets the opacity in the w-array</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">  !&gt; by calling mod_opacity</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a18cd3e6670ceeb62df0272131702bc2b">fld_get_opacity</a>(w, x, ixI^L, ixO^L)</div><div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a18cd3e6670ceeb62df0272131702bc2b">  331</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__physics.html">mod_physics</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__physics.html#a5eafc92ed1d20cf3416db3f6efccbb29">phys_get_pthermal</a></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__physics.html">mod_physics</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__physics.html#a1bd8713f2d319f4636d766da3901acdb">phys_get_tgas</a></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__opacity.html">mod_opacity</a></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordtype">double precision</span> :: fld_kappa(ixo^s)</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordtype">double precision</span> :: Temp(ixi^s)</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordtype">double precision</span> :: rho0,Temp0,n,sigma_b</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordtype">integer</span> :: i,j</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__fld.html#a4717a388644e4cb1fe9b0e27860d2007">fld_opacity_law</a>)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;      <span class="keywordflow">case</span>(<span class="stringliteral">&#39;const&#39;</span>)</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        fld_kappa = <a class="code" href="namespacemod__fld.html#a833746bb6e5dbd734a00ec94b4669b1b">fld_kappa0</a></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;      <span class="keywordflow">case</span>(<span class="stringliteral">&#39;kramers&#39;</span>)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        rho0 = half<span class="comment"> !&gt; Take lower value of rho in domain</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        fld_kappa(ixo^s) = <a class="code" href="namespacemod__fld.html#a833746bb6e5dbd734a00ec94b4669b1b">fld_kappa0</a>*((w(ixo^s,iw_rho)/rho0))</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;      <span class="keywordflow">case</span>(<span class="stringliteral">&#39;bump&#39;</span>)<span class="comment"></span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">        !&gt; Opacity bump</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        rho0 = 0.2d0 <span class="comment">!0.5d-1</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        n = 7.d0</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        sigma_b = 2.<a class="code" href="namespacemod__global__parameters.html#a68549065c490d02e1de338e8a60c3f12">d</a>-2</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="comment">!fld_kappa(ixO^S) = fld_kappa0*(one + n*dexp(-((rho0  - w(ixO^S,iw_rho))**two)/rho0))</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        fld_kappa(ixo^s) = <a class="code" href="namespacemod__fld.html#a833746bb6e5dbd734a00ec94b4669b1b">fld_kappa0</a>*(one + n*dexp(-one/sigma_b*(dlog(w(ixo^s,iw_rho)/rho0))**two))</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;      <span class="keywordflow">case</span>(<span class="stringliteral">&#39;non_iso&#39;</span>)</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keyword">call </span>phys_get_pthermal(w,x,ixi^l,ixo^l,temp)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        temp(ixo^s)=temp(ixo^s)/w(ixo^s,iw_rho)</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        rho0 = 0.5d0<span class="comment"> !&gt; Take lower value of rho in domain</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        temp0 = one</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        n = -7.d0/two</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        fld_kappa(ixo^s) = <a class="code" href="namespacemod__fld.html#a833746bb6e5dbd734a00ec94b4669b1b">fld_kappa0</a>*(w(ixo^s,iw_rho)/rho0)*(temp(ixo^s)/temp0)**n</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;      <span class="keywordflow">case</span>(<span class="stringliteral">&#39;opal&#39;</span>)</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="comment">!call mpistop(&quot;Not implemented yet, hold your bloody horses&quot;)</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__physics.html#a1bd8713f2d319f4636d766da3901acdb">phys_get_tgas</a>(w,x,ixi^l,ixo^l,temp)</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordflow">do</span> i = ixomin1,ixomax1</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;          <span class="keywordflow">do</span> j= ixomin2,ixomax2</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            rho0 = w(i,j,iw_rho)*<a class="code" href="namespacemod__global__parameters.html#a20b1887bf28d9921e2193ea1f695cf5a">unit_density</a></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            temp0 = temp(i,j)*<a class="code" href="namespacemod__global__parameters.html#aa1fac5bb69ce3e968348d1435b29f1ac">unit_temperature</a></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="keyword">call </span><a class="code" href="namespacemod__opacity.html#a88caefefb5bdfc048ed50c17c8553d0b">set_opal_opacity</a>(rho0,temp0,n)</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            fld_kappa(i,j) = n/<a class="code" href="namespacemod__global__parameters.html#a22cfbe73fdb5e70be995d8dd50eadc55">unit_opacity</a></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="keywordflow">          enddo</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="keywordflow">        enddo</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="keywordflow">      case default</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;Doesn&#39;t know opacity law&quot;</span>)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="keywordflow">      end select</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;      w(ixo^s, <a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>) = fld_kappa(ixo^s)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a18cd3e6670ceeb62df0272131702bc2b">fld_get_opacity</a></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">  !&gt; Calculate fld flux limiter</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">  !&gt; This subroutine calculates flux limiter lambda using the prescription</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">  !&gt; stored in fld_fluxlimiter.</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">  !&gt; It also calculates the ratio of radiation scaleheight and mean free path</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a2b1606aab3282710571c71588a0da412">fld_get_fluxlimiter</a>(w, x, ixI^L, ixO^L)</div><div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a2b1606aab3282710571c71588a0da412">  391</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__geometry.html">mod_geometry</a></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordtype">double precision</span> :: fld_R(ixi^s), fld_lambda(ixi^s)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordtype">double precision</span> ::  normgrad2(ixi^s)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordtype">double precision</span> :: grad_r_e(ixi^s), rad_e(ixi^s)</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordtype">integer</span> :: idir, i, j</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__fld.html#a6653738fcac09ac966028771a78e4d52">fld_fluxlimiter</a>)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;Diffusion&#39;</span>)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;      w(ixi^s,<a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a>) = one/3.d0</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      w(ixi^s,<a class="code" href="namespacemod__fld.html#a4e7f3f006bd6e9bd5c31208cdaa9af2e">i_fld_r</a>) = zero</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;FreeStream&#39;</span>)<span class="comment"></span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">      !&gt; Calculate R everywhere</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">      !&gt; |grad E|/(rho kappa E)</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;      normgrad2(ixi^s) = zero</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;      rad_e(ixi^s) = w(ixi^s, iw_r_e)</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;      <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a><span class="comment"></span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">        !&gt; gradient or gradientS ?!?!?!?!?!?</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__geometry.html#ad4e9524cb60a1c8ce07d4641fe761251">gradients</a>(rad_e,ixi^l,ixo^l,idir,grad_r_e)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        normgrad2(ixi^s) = normgrad2(ixi^s) + grad_r_e(ixi^s)**2</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="keywordflow">      end do</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;      fld_r(ixi^s) = dsqrt(normgrad2(ixi^s))/(w(ixi^s,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*w(ixi^s,iw_rho)*w(ixi^s,iw_r_e))</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">      !&gt; Calculate the flux limiter, lambda</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">      !&gt; Levermore and Pomraning: lambda = (2 + R)/(6 + 3R + R^2)</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;      fld_lambda(ixi^s) = one/fld_r(ixi^s)</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;      w(ixi^s,<a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a>) = fld_lambda(ixi^s)</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;      w(ixi^s,<a class="code" href="namespacemod__fld.html#a4e7f3f006bd6e9bd5c31208cdaa9af2e">i_fld_r</a>) = fld_r(ixi^s)</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;Pomraning&#39;</span>)<span class="comment"></span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">      !&gt; Calculate R everywhere</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">      !&gt; |grad E|/(rho kappa E)</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;      normgrad2(ixi^s) = zero</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;      rad_e(ixi^s) = w(ixi^s, iw_r_e)</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;      <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a><span class="comment"></span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">        !&gt; gradient or gradientS ?!?!?!?!?!?</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__geometry.html#ad4e9524cb60a1c8ce07d4641fe761251">gradients</a>(rad_e,ixi^l,ixo^l,idir,grad_r_e)</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        normgrad2(ixi^s) = normgrad2(ixi^s) + grad_r_e(ixi^s)**2</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="keywordflow">      end do</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;      fld_r(ixi^s) = dsqrt(normgrad2(ixi^s))/(w(ixi^s,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*w(ixi^s,iw_rho)*w(ixi^s,iw_r_e))</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">      !&gt; Calculate the flux limiter, lambda</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">      !&gt; Levermore and Pomraning: lambda = (2 + R)/(6 + 3R + R^2)</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;      fld_lambda(ixi^s) = (2.d0+fld_r(ixi^s))/(6.d0+3*fld_r(ixi^s)+fld_r(ixi^s)**2.d0)</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;      w(ixi^s,<a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a>) = fld_lambda(ixi^s)</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;      w(ixi^s,<a class="code" href="namespacemod__fld.html#a4e7f3f006bd6e9bd5c31208cdaa9af2e">i_fld_r</a>) = fld_r(ixi^s)</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;Minerbo&#39;</span>)<span class="comment"></span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">      !&gt; Calculate R everywhere</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">      !&gt; |grad E|/(rho kappa E)</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;      normgrad2(ixi^s) = zero</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;      rad_e(ixi^s) = w(ixi^s, iw_r_e)</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;      <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a><span class="comment"></span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">        !&gt; gradient or gradientS ?!?!?!?!?!?</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__geometry.html#ad4e9524cb60a1c8ce07d4641fe761251">gradients</a>(rad_e,ixi^l,ixo^l,idir,grad_r_e)</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        normgrad2(ixi^s) = normgrad2(ixi^s) + grad_r_e(ixi^s)**2</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="keywordflow">      end do</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;      fld_r(ixi^s) = dsqrt(normgrad2(ixi^s))/(w(ixi^s,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*w(ixi^s,iw_rho)*w(ixi^s,iw_r_e))</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">      !&gt; Calculate the flux limiter, lambda</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">      !&gt; Minerbo:</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;      <span class="keywordflow">do</span> i = iximin1, iximax1</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keywordflow">do</span> j = iximin2, iximax2</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;          <span class="keywordflow">if</span> (fld_r(i,j) .lt. 3.d0/2.d0) <span class="keywordflow">then</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            fld_lambda(i,j) = 2.d0/(3.d0 + dsqrt(9.d0 + 12.d0*fld_r(i,j)**2.d0))</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;          <span class="keywordflow">else</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            fld_lambda(i,j) = 1.d0/(1.d0 + fld_r(i,j) + dsqrt(1.d0 + 2.d0*fld_r(i,j)))</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="keywordflow">          endif</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="keywordflow">        enddo</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;      w(ixi^s,<a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a>) = fld_lambda(ixi^s)</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;      w(ixi^s,<a class="code" href="namespacemod__fld.html#a4e7f3f006bd6e9bd5c31208cdaa9af2e">i_fld_r</a>) = fld_r(ixi^s)</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="keywordflow">    case default</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;      <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;Fluxlimiter unknown&#39;</span>)</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="keywordflow">    end select</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a2b1606aab3282710571c71588a0da412">fld_get_fluxlimiter</a></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment">  !&gt; Calculate Radiation Flux</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">  !&gt; stores radiation flux in w-array</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#ab6689aeb8ea556c2e237d385bf25cae7">fld_get_radflux</a>(w, x, ixI^L, ixO^L)</div><div class="line"><a name="l00483"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ab6689aeb8ea556c2e237d385bf25cae7">  483</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__geometry.html">mod_geometry</a></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordtype">double precision</span> :: rad_flux(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordtype">double precision</span> :: L_star, R_star</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordtype">double precision</span> :: grad_r_e(ixi^s)</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keywordtype">double precision</span> :: rad_e(ixi^s)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordtype">integer</span> :: idir</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    rad_e(ixi^s) = w(ixi^s, iw_r_e)</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment">    !&gt; Calculate the Flux using the fld closure relation</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment">    !&gt; F = -c*lambda/(kappa*rho) *grad E</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a><span class="comment"></span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">      !&gt; gradient or gradientS ?!?!?!?!?!?</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__geometry.html#ad4e9524cb60a1c8ce07d4641fe761251">gradients</a>(rad_e,ixi^l,ixo^l,idir,grad_r_e)</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;      rad_flux(ixi^s, idir) = -<a class="code" href="namespacemod__fld.html#a0359f8ad507898ac3da23f0dfdc19b66">fld_speedofligt_0</a>*w(ixi^s,<a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a>)/(w(ixi^s,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*w(ixi^s,iw_rho))*grad_r_e(ixi^s)</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    w(ixi^s,<a class="code" href="namespacemod__fld.html#a29e0598af7adc08a2cd3b7fab0227573">i_test</a>) = grad_r_e(ixi^s)</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">    !&gt;CHEATY BIT:</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="comment">! rad_flux(ixImin1:ixImax1,ixOmin2,2) = rad_flux(ixImin1:ixImax1,ixOmin2+1,2)</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="comment">! rad_flux(ixImin1:ixImax1,ixOmax2,2) = rad_flux(ixImin1:ixImax1,ixOmax2-1,2)</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    w(ixi^s,<a class="code" href="namespacemod__fld.html#a60125b551ee124d32d798adcfd4325ae">i_flux</a>(:)) = rad_flux(ixi^s,:)</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#ab6689aeb8ea556c2e237d385bf25cae7">fld_get_radflux</a></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">  !&gt; Calculate Eddington-tensor</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">  !&gt; Stores Eddington-tensor in w-array</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a7c57c75a5519ff6d1ac0badc2da7db92">fld_get_eddington</a>(w, x, ixI^L, ixO^L)</div><div class="line"><a name="l00517"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a7c57c75a5519ff6d1ac0badc2da7db92">  517</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__geometry.html">mod_geometry</a></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordtype">double precision</span> :: eddington_tensor(ixo^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keywordtype">double precision</span> :: tnsr2(ixo^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordtype">double precision</span> :: normgrad2(ixo^s), f(ixo^s)</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordtype">double precision</span> :: grad_r_e(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>), rad_e(ixi^s)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordtype">integer</span> :: i,j, idir,jdir</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">    !&gt; Calculate R everywhere</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment">    !&gt; |grad E|/(rho kappa E)</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    normgrad2(ixo^s) = zero</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    rad_e(ixi^s) = w(ixi^s, iw_r_e)</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    grad_r_e(ixi^s,:) = zero</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a><span class="comment"></span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment">      !&gt; gradient or gradientS ?!?!?!?!?!?</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__geometry.html#ad4e9524cb60a1c8ce07d4641fe761251">gradients</a>(rad_e,ixi^l,ixo^l,idir,grad_r_e(ixi^s,idir))</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;      normgrad2(ixo^s) = normgrad2(ixo^s) + grad_r_e(ixo^s,idir)**two</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="comment">! print*, w(10,nghostcells-2:nghostcells+3,iw_r_e)</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="comment">! print*, grad_r_e(10,nghostcells-2:nghostcells+3,2)</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="comment">! print*, &#39;------------------------------------------------------------------&#39;</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment">    !&gt; Calculate radiation pressure</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment">    !&gt; P = (lambda + lambda^2 R^2)*E</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    f(ixo^s) = w(ixo^s,<a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a>) + w(ixo^s, <a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a>)**two * w(ixo^s, <a class="code" href="namespacemod__fld.html#a4e7f3f006bd6e9bd5c31208cdaa9af2e">i_fld_r</a>)**two</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    f(ixo^s) = one/two*(one-f(ixo^s)) + one/two*(3.d0*f(ixo^s) - one)</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;      eddington_tensor(ixo^s,idir,idir) = half*(one-f(ixo^s))</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;      <span class="keywordflow">do</span> jdir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        <span class="keywordflow">if</span> (idir .ne. jdir) eddington_tensor(ixo^s,idir,jdir) = zero</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        tnsr2(ixo^s,idir,jdir) =  half*(3.d0*f(ixo^s) - 1)&amp;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        *grad_r_e(ixo^s,idir)*grad_r_e(ixo^s,jdir)/normgrad2(ixo^s)</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;      <span class="keywordflow">do</span> jdir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <span class="keywordflow">where</span> ((tnsr2(ixo^s,idir,jdir) .eq. tnsr2(ixo^s,idir,jdir)) &amp;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;          .and. (normgrad2(ixo^s) .gt. smalldouble))</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;          eddington_tensor(ixo^s,idir,jdir) = eddington_tensor(ixo^s,idir,jdir) + tnsr2(ixo^s,idir,jdir)</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="keywordflow">        endwhere</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keywordflow">do</span> idir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;      <span class="keywordflow">do</span> jdir = 1,<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        w(ixo^s,<a class="code" href="namespacemod__fld.html#a6d9a872cd7d3a3e58de15d3c14d7156e">i_edd</a>(idir,jdir)) = eddington_tensor(ixo^s,idir,jdir)</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a7c57c75a5519ff6d1ac0badc2da7db92">fld_get_eddington</a></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment">  !&gt; Calculate Radiation Pressure</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment">  !&gt; Returns Radiation Pressure as tensor</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#ab6de94c421ca190d4cc8fbd98890df60">fld_get_radpress</a>(w, x, ixI^L, ixO^L, rad_pressure)</div><div class="line"><a name="l00581"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ab6de94c421ca190d4cc8fbd98890df60">  581</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordtype">double precision</span>             :: eddington_tensor(ixo^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: rad_pressure(ixo^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordtype">integer</span> i,j</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keywordflow">do</span> i=1,<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;      <span class="keywordflow">do</span> j=1,<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        rad_pressure(ixo^s,i,j) = w(ixo^s,<a class="code" href="namespacemod__fld.html#a6d9a872cd7d3a3e58de15d3c14d7156e">i_edd</a>(i,j))* w(ixo^s,iw_r_e)</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#ab6de94c421ca190d4cc8fbd98890df60">fld_get_radpress</a></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;  <span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;  <span class="comment">!!!!!!!!!!!!!!!!!!! Multigrid diffusion</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;  <span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment">  !&gt; Calling all subroutines to perform the multigrid method</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="comment">  !&gt; Communicates rad_e and diff_coeff to multigrid library</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a1a7591a7c222a6d98c5c3efa3f446394">diffuse_e_rad_mg</a>(qdt, qt, active)</div><div class="line"><a name="l00605"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a1a7591a7c222a6d98c5c3efa3f446394">  605</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__multigrid__coupling.html">mod_multigrid_coupling</a></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keywordtype">use </span>m_diffusion</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: qdt, qt</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(inout)</span>       :: active</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keywordtype">double precision</span>             :: max_res</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__multigrid__coupling.html#af23020aa8a6dba2e8983aa2ac07b809d">mg_copy_to_tree</a>(iw_r_e, mg_iphi, .false., .false.)</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="keyword">call </span>diffusion_solve_vcoeff(<a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>, qdt, 2, 1.<a class="code" href="namespacemod__global__parameters.html#a68549065c490d02e1de338e8a60c3f12">d</a>-5)</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__multigrid__coupling.html#aef5babc99d89a3deb627ec0d50d603f6">mg_copy_from_tree</a>(mg_iphi, iw_r_e)</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    active = .true.</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a1a7591a7c222a6d98c5c3efa3f446394">diffuse_e_rad_mg</a></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="comment">  !&gt; Calculates cell-centered diffusion coefficient to be used in multigrid</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#aa1711732e6003769c59b7b842f316f22">fld_get_diffcoef_central</a>(w, x, ixI^L, ixO^L)</div><div class="line"><a name="l00621"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#aa1711732e6003769c59b7b842f316f22">  621</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__geometry.html">mod_geometry</a></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keywordtype">double precision</span> :: max_D(ixi^s), grad_r_e(ixi^s), rad_e(ixi^s)</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordtype">integer</span> :: idir,i,j</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__fld.html#a92f0c135a240fdc9e30f4b183a23495e">fld_diff_testcase</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;      <span class="comment">!w(ixI^S,i_diff_mg) = one!*unit_length/unit_velocity</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;      i = <a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>+1</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;      w(ixi^s,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>) = <a class="code" href="namespacemod__fld.html#a0359f8ad507898ac3da23f0dfdc19b66">fld_speedofligt_0</a>*w(i,i,<a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a>)/(w(i,i,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*w(i,i,iw_rho))</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;      w(ixi^s,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>) = 28.70d0</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keywordflow">else</span><span class="comment"></span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment">      !&gt; calculate diffusion coefficient</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;      w(ixo^s,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>) = <a class="code" href="namespacemod__fld.html#a0359f8ad507898ac3da23f0dfdc19b66">fld_speedofligt_0</a>*w(ixo^s,<a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a>)/(w(ixo^s,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*w(ixo^s,iw_rho))</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;      <span class="keywordflow">do</span> i = iximin1,iximax1</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        w(i,iximin2:iximin2+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>) = w(i,iximin2+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>)</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        w(i,iximax2-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>+1:iximin2,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>) = w(i,iximax2-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>)</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;      <span class="keywordflow">do</span> i = iximin2,iximax2</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        w(iximin1:iximin1+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1,i,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>) = w(iximin1+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,i,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>)</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        w(iximax1-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>+1:iximin1,i,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>) = w(iximax1-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,i,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>)</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="comment">      !&gt; Check if energy doesn&#39;t go faster than speed of light</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;      <span class="comment">!for simplicity, only in direction 2</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;      rad_e(ixi^s) = w(ixi^s,iw_r_e)</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__geometry.html#ad4e9524cb60a1c8ce07d4641fe761251">gradients</a>(rad_e,ixi^l,ixo^l,2,grad_r_e)</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;      max_d(ixo^s) = abs(<a class="code" href="namespacemod__fld.html#a0359f8ad507898ac3da23f0dfdc19b66">fld_speedofligt_0</a>*rad_e(ixo^s)/grad_r_e(ixo^s))</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;      <span class="keywordflow">do</span> i = ixomin1,ixomax1</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        <span class="keywordflow">do</span> j = ixomin2,ixomax2</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;          <span class="comment">! print*, i, j, w(i,j,i_diff_mg), max_D(i,j)</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;          <span class="comment">! if (w(i,j,i_diff_mg) .gt. max_D(i,j)) &amp;</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;          <span class="comment">! call mpistop(&#39;You have reached maximal D, the D is too big&#39;)</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;          w(i,j,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>) = min(w(i,j,<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>), max_d(i,j))</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="keywordflow">        enddo</span></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#aa1711732e6003769c59b7b842f316f22">fld_get_diffcoef_central</a></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment">  !&gt; Communicates diffusion coeff to multigrid library</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#ac2239b68bdd568bfe10653ef34a21e42">set_mg_diffcoef</a>()</div><div class="line"><a name="l00672"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ac2239b68bdd568bfe10653ef34a21e42">  672</a></span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__multigrid__coupling.html#af23020aa8a6dba2e8983aa2ac07b809d">mg_copy_to_tree</a>(<a class="code" href="namespacemod__fld.html#ada3e212a237e18cb9a3166799117c6fa">i_diff_mg</a>, mg_iveps, .true., .true.)</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#ac2239b68bdd568bfe10653ef34a21e42">set_mg_diffcoef</a></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="comment">  !&gt; Sets boundary conditions for multigrid, based on hydro-bounds</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#ab752f856ef112598eddd89a8896ea081">set_mg_bounds</a>()</div><div class="line"><a name="l00677"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ab752f856ef112598eddd89a8896ea081">  677</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keywordtype">integer</span> :: iB</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keywordflow">do</span> ib = 1,4</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;      <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__global__parameters.html#a07a5d2c56f4bfdf1e95bb650a25ad31f">typeboundary</a>(iw_r_e, ib))</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;      <span class="keywordflow">case</span> (<span class="stringliteral">&#39;symm&#39;</span>)</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;         <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_type = mg_bc_neumann</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;         <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_value = 0.0_dp</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;      <span class="keywordflow">case</span> (<span class="stringliteral">&#39;asymm&#39;</span>)</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;         <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_type = mg_bc_dirichlet</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;         <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_value = 0.0_dp</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;      <span class="keywordflow">case</span> (<span class="stringliteral">&#39;cont&#39;</span>)</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;         <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_type = mg_bc_continuous</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;      <span class="keywordflow">case</span> (<span class="stringliteral">&#39;periodic&#39;</span>)<span class="comment"></span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="comment">        !&gt; Do nothing</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;      <span class="keywordflow">case</span> (<span class="stringliteral">&#39;special&#39;</span>)</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        <span class="comment">!call mpistop(&#39;Hold your bloody horses, not implemented yet.&#39;)</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="keywordflow">select case</span> (ib)</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        <span class="keywordflow">case</span> (1)</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;           <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_type = mg_bc_continuous</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <span class="keywordflow">case</span> (2)</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;           <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_type = mg_bc_continuous</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <span class="keywordflow">case</span> (3)</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;          <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_type = mg_bc_dirichlet</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;          <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_value = 3.0174800255830467</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <span class="keywordflow">case</span> (4)</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;          <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_type = mg_bc_continuous</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;          <a class="code" href="namespacemod__multigrid__coupling.html#a142d2164d06b247e80e61927349a1d36">mg</a>%bc(ib, mg_iphi)%bc_value = 0.0_dp</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="keywordflow">        case default</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;          print *, <span class="stringliteral">&quot;Not a standard: &quot;</span>, trim(<a class="code" href="namespacemod__global__parameters.html#a07a5d2c56f4bfdf1e95bb650a25ad31f">typeboundary</a>(iw_r_e, ib))</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;          error stop <span class="stringliteral">&quot;You have to set a user-defined boundary method&quot;</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="keywordflow">        end select</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="keywordflow">      case default</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;         print *, <span class="stringliteral">&quot;Not a standard: &quot;</span>, trim(<a class="code" href="namespacemod__global__parameters.html#a07a5d2c56f4bfdf1e95bb650a25ad31f">typeboundary</a>(iw_r_e, ib))</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;         error stop <span class="stringliteral">&quot;You have to set a user-defined boundary method&quot;</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="keywordflow">      end select</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#ab752f856ef112598eddd89a8896ea081">set_mg_bounds</a></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;  <span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;  <span class="comment">!!!!!!!!!!!!!!!!!!! ADI</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;  <span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="comment">  !&gt; Main loop for ADI scheme.</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="comment">  !&gt; Here, the splitting of the hydro-timestep, nr of pseudo-steps</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="comment">  !&gt; and error-controll are performed</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a5033cee4008623387e883b250edc5818">evolve_e_rad</a>(w, x, ixI^L, ixO^L)</div><div class="line"><a name="l00724"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a5033cee4008623387e883b250edc5818">  724</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: ixI^L, ixO^L</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keywordtype">double precision</span> :: E_new(ixi^s), E_old(ixi^s), ADI_Error</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keywordtype">double precision</span> :: frac_grid</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordtype">integer</span> :: w_max, frac_dt</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keywordtype">logical</span> :: converged</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <span class="keywordtype">integer</span> :: i</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    e_new(ixi^s) = w(ixi^s,iw_r_e)</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    converged = .false.</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    adi_error = bigdouble</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="comment">! w_max = 1</span><span class="comment"></span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="comment">    !&gt; Trying out something new</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="comment">! This should make sure that the amount of pseudotimesteps</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="comment">! Goes down with one after completing a hydro step.</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    w_max = max(1,w_max/2)</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    frac_grid = two</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    frac_dt = 1</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <span class="keywordflow">do</span> <span class="keywordflow">while</span> (converged .eqv. .false.)</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="comment">      !&gt; Check if solution converged</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;      <span class="keywordflow">if</span> (adi_error .lt. <a class="code" href="namespacemod__fld.html#a194cbe85869bf64600561c7bbb6bdbfb">fld_adi_tol</a>) <span class="keywordflow">then</span><span class="comment"></span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="comment">        !&gt; If converged in former loop, break loop</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        converged = .true.</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;      <span class="keywordflow">else</span><span class="comment"></span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="comment">        !&gt; Reset E_new</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        e_old(ixi^s) = w(ixi^s,iw_r_e)</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        e_new(ixi^s) = w(ixi^s,iw_r_e)</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="comment">        !&gt; If no convergence, adapt pseudostepping</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        w_max = 2*w_max</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        frac_grid = 2*frac_grid</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment">      !&gt; Evolve using ADI</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;      <span class="keywordflow">if</span> (converged .eqv. .false.) <span class="keywordflow">then</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a024402f9f40e6909ca293497afa4ac80">evolve_adi</a>(w, x, e_new, e_old, w_max, frac_grid, ixi^l, ixo^l)</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a2c52b08103245306534a0652d758da29">error_check_adi</a>(w, x, e_new, e_old, ixi^l, ixo^l, adi_error)<span class="comment"> !&gt; SHOULD THIS BE DONE EVERY ITERATION???</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        <span class="keywordflow">if</span> (adi_error .lt. <a class="code" href="namespacemod__fld.html#a194cbe85869bf64600561c7bbb6bdbfb">fld_adi_tol</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;          converged = .true.</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="keywordflow">        endif</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="comment">      !&gt; If adjusting pseudostep doesn&#39;t work, divide the actual timestep in smaller parts</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;      <span class="keywordflow">if</span> (w_max .gt. <a class="code" href="namespacemod__fld.html#a6d5dc4491c473a7d1cf12461e2af282a">fld_maxdw</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        <span class="keywordflow">if</span> (converged .eqv. .false.) <span class="keywordflow">then</span><span class="comment"></span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="comment">          !&gt; use a smaller timestep than the hydrodynamical one</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;          <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a5d7deb386a485adf28fd8e94dab29f3e">half_timestep_adi</a>(w, x, e_new, e_old, ixi^l, ixo^l, converged)</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;          <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a2c52b08103245306534a0652d758da29">error_check_adi</a>(w, x, e_new, e_old, ixi^l, ixo^l, adi_error)</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;          <span class="keywordflow">if</span> (adi_error .lt. <a class="code" href="namespacemod__fld.html#a194cbe85869bf64600561c7bbb6bdbfb">fld_adi_tol</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            converged = .true.</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="keywordflow">          endif</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="keywordflow">        endif</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    w(ixo^s,iw_r_e) = e_new(ixo^s)</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a5033cee4008623387e883b250edc5818">evolve_e_rad</a></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="comment">  !&gt; Perform ADI on half a hydro-timestep</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a5d7deb386a485adf28fd8e94dab29f3e">half_timestep_adi</a>(w, x, E_new, E_old, ixI^L, ixO^L, converged)</div><div class="line"><a name="l00794"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a5d7deb386a485adf28fd8e94dab29f3e">  794</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: ixI^L, ixO^L</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, 1:nw), x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: E_old(ixi^s)</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: E_new(ixi^s)</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    <span class="keywordtype">logical</span>, <span class="keywordtype">intent(inout)</span> :: converged</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="keywordtype">double precision</span> :: frac_grid</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="keywordtype">double precision</span> :: E_loc(ixi^s)</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keywordtype">double precision</span> :: saved_dt, ADI_Error</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <span class="keywordtype">integer</span> :: i,  w_max, frac_dt</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    saved_dt = <a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    adi_error = bigdouble</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    frac_dt = 1</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    5231 frac_dt = 2*frac_dt</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    w_max = 1</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    frac_grid = two</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordflow">if</span> (frac_dt .gt. <a class="code" href="namespacemod__fld.html#a0d71ddfe9842309c631d26db954f0764">fld_max_fracdt</a>) <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;No convergence after halving timestep N times&quot;</span>)</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a> = <a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a>/frac_dt</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    e_loc = e_old</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <span class="keywordflow">do</span> i = 1,frac_dt</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;      <span class="comment">!---------------------------------------------------------------</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;      <span class="keywordflow">do</span> <span class="keywordflow">while</span> (converged .eqv. .false.)<span class="comment"></span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="comment">        !&gt; Check if solution converged</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        <span class="keywordflow">if</span> (adi_error .lt. <a class="code" href="namespacemod__fld.html#a194cbe85869bf64600561c7bbb6bdbfb">fld_adi_tol</a>) <span class="keywordflow">then</span><span class="comment"></span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="comment">          !&gt; If converged in former loop, break loop</span></div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;          converged = .true.</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;          <span class="keywordflow">goto</span> 7895</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        <span class="keywordflow">else</span><span class="comment"></span></div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;<span class="comment">          !&gt; If no convergence, adapt pseudostepping</span></div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;          w_max = 2*w_max</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;          frac_grid = 2*frac_grid</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="keywordflow">        endif</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment">        !&gt; Evolve using ADI</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a024402f9f40e6909ca293497afa4ac80">evolve_adi</a>(w, x, e_new, e_loc, w_max, frac_grid, ixi^l, ixo^l)</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a2c52b08103245306534a0652d758da29">error_check_adi</a>(w, x, e_new, e_loc, ixi^l, ixo^l, adi_error)<span class="comment"> !&gt; SHOULD THIS BE DONE EVERY ITERATION???</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="comment">        !&gt; If adjusting pseudostep doesn&#39;t work, divide the actual timestep in smaller parts</span></div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        <span class="keywordflow">if</span> (w_max .gt. <a class="code" href="namespacemod__fld.html#a6d5dc4491c473a7d1cf12461e2af282a">fld_maxdw</a>) <span class="keywordflow">goto</span> 5231</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        <span class="keywordflow">if</span> (adi_error .lt. <a class="code" href="namespacemod__fld.html#a194cbe85869bf64600561c7bbb6bdbfb">fld_adi_tol</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;          converged = .true.</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="keywordflow">        endif</span></div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;      <span class="comment">!---------------------------------------------------------------</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;      7895 e_loc = e_new</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a> = saved_dt</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a5d7deb386a485adf28fd8e94dab29f3e">half_timestep_adi</a></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment">  !&gt; Calculate error after one ADI-timestep</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a2c52b08103245306534a0652d758da29">error_check_adi</a>(w, x, E_new, E_old, ixI^L, ixO^L, ADI_Error)</div><div class="line"><a name="l00853"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a2c52b08103245306534a0652d758da29">  853</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: ixI^L, ixO^L</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>), w(ixi^s, 1:nw)</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: E_new(ixi^s), E_old(ixi^s)</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: ADI_Error</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordtype">double precision</span> :: LHS(ixo^s), RHS(ixo^s), D(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    <span class="keywordtype">integer</span> :: jx1^L, hx1^L,jx2^L, hx2^L</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keywordtype">integer</span> :: i</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    jx1^l=ixo^l+<a class="code" href="namespacemod__global__parameters.html#a31226ca76b94f6c33496105fd25e8fd9">kr</a>(1,^d);</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    hx1^l=ixo^l-<a class="code" href="namespacemod__global__parameters.html#a31226ca76b94f6c33496105fd25e8fd9">kr</a>(1,^d);</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    jx2^l=ixo^l+<a class="code" href="namespacemod__global__parameters.html#a31226ca76b94f6c33496105fd25e8fd9">kr</a>(2,^d);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    hx2^l=ixo^l-<a class="code" href="namespacemod__global__parameters.html#a31226ca76b94f6c33496105fd25e8fd9">kr</a>(2,^d);</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ae6af74a6fd2793c1f267db6bebd56034">fld_get_diffcoef</a>(w, x, ixi^l, ixo^l, d)</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment">    !&gt; LHS = dx^2/dt * (E_new - E_old)</span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    lhs(ixo^s) = (x(ixomin1+1,ixomin2,1)-x(ixomin1,ixomin2,1))*&amp;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    (x(ixomin1,ixomin2+1,2)-x(ixomin1,ixomin2,2))/<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a>*&amp;</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    (e_new(ixo^s) - e_old(ixo^s))</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="comment">    !&gt; RHS = D1(E_+ - E) - D1(E - E_-) + D2(E_+ - E) - D2(E - E_-)</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    rhs(ixo^s) = &amp;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;      d(jx1^s,1)*(e_new(jx1^s) - e_new(ixo^s)) &amp;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    - d(ixo^s,1)*(e_new(ixo^s) - e_new(hx1^s)) &amp;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    + d(jx2^s,2)*(e_new(jx2^s) - e_new(ixo^s)) &amp;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    - d(ixo^s,2)*(e_new(ixo^s) - e_new(hx2^s))</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    adi_error = maxval(abs((rhs-lhs)/(e_old/<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a>)))<span class="comment"> !&gt; Try mean value or smtn</span></div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <span class="comment">!ADI_Error = sum(abs((RHS-LHS)/(E_old/dt)))/((ixOmax1-ixOmin1)*(ixOmax2-ixOmin2))</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a2c52b08103245306534a0652d758da29">error_check_adi</a></div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="comment">  !&gt; Do all pseudo-timesteps to advance one hydro timestep.</span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="comment">  !&gt; This routine loops over the pseudo-steps, each time doing 2 matrix-inversions</span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a024402f9f40e6909ca293497afa4ac80">evolve_adi</a>(w, x, E_new, E_old, w_max, frac_grid, ixI^L, ixO^L)</div><div class="line"><a name="l00890"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a024402f9f40e6909ca293497afa4ac80">  890</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: ixI^L, ixO^L, w_max</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, 1:nw), x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>), frac_grid</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: E_old(ixi^s)</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: E_new(ixi^s)</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    <span class="keywordtype">double precision</span> :: E_m(ixi^s), E_n(ixi^s)</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="keywordtype">double precision</span> :: diag1(iximax1,iximax2),sub1(iximax1,iximax2),sup1(iximax1,iximax2),bvec1(iximax1,iximax2)</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="keywordtype">double precision</span> :: diag2(iximax2,iximax1),sub2(iximax2,iximax1),sup2(iximax2,iximax1),bvec2(iximax2,iximax1)</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <span class="keywordtype">double precision</span> :: Evec1(iximin1:iximax1), Evec2(iximin2:iximax2)</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    <span class="keywordtype">double precision</span> :: dw, w0, w1</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <span class="keywordtype">integer</span> :: m, j, i</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    w0 = (x(ixomin1+1,ixomin2,1)-x(ixomin1,ixomin2,1))&amp;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    *(x(ixomin1,ixomin2+1,2)-x(ixomin1,ixomin2,2))/frac_grid</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    w1 = (x(ixomax1,ixomin2,1)-x(ixomin1,ixomin2,1))&amp;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    *(x(ixomin1,ixomax2,2)-x(ixomin1,ixomin2,2))/frac_grid <span class="comment">!4.d0</span></div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    e_m = e_old</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="keywordflow">do</span> m = 1,w_max</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;      e_n = e_old</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="comment">      !&gt; Set pseudotimestep</span></div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;      dw = w0*(w1/w0)**((m-one)/(w_max-one))</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a33da3340a6dfa6746c33ebfea720c031">adi_boundary_conditions</a>(ixi^l,ixo^l,e_m,w,x)</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="comment">      !&gt; Setup matrix and vector for sweeping in direction 1</span></div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ab90aa43ab27ea3d8f9bbbbd2baac31e1">make_matrix</a>(x,w,dw,e_m,e_n,1,iximax1,ixi^l, ixo^l,diag1,sub1,sup1,bvec1,diag2,sub2,sup2,bvec2)</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;      <span class="keywordflow">do</span> j = iximin2,iximax2</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        evec1(iximin1:iximax1) = e_m(iximin1:iximax1,j)</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#abf095896983d6323156ae2773eb514f6">solve_tridiag</a>(ixomin1,ixomax1,iximin1,iximax1,diag1(:,j),sub1(:,j),sup1(:,j),bvec1(:,j),evec1)</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;        <span class="comment">!E_m(ixOmin1:ixOmax1,j) = Evec1(ixOmin1:ixOmax1)</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;        e_m(iximin1:iximax1,j) = evec1(iximin1:iximax1)</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a33da3340a6dfa6746c33ebfea720c031">adi_boundary_conditions</a>(ixi^l,ixo^l,e_m,w,x)</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment">      !&gt; Setup matrix and vector for sweeping in direction 2</span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ab90aa43ab27ea3d8f9bbbbd2baac31e1">make_matrix</a>(x,w,dw,e_m,e_n,2,iximax2,ixi^l,ixo^l,diag1,sub1,sup1,bvec1,diag2,sub2,sup2,bvec2)</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;      <span class="keywordflow">do</span> j = iximin1,iximax1</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        evec2(iximin2:iximax2) = e_m(j,iximin2:iximax2)</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#abf095896983d6323156ae2773eb514f6">solve_tridiag</a>(ixomin2,ixomax2,iximin2,iximax2,diag2(:,j),sub2(:,j),sup2(:,j),bvec2(:,j),evec2)</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;        <span class="comment">!E_m(j,ixOmin2:ixOmax2) = Evec2(ixOmin2:ixOmax2)</span></div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        e_m(j,iximin2:iximax2) = evec2(iximin2:iximax2)</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a33da3340a6dfa6746c33ebfea720c031">adi_boundary_conditions</a>(ixi^l,ixo^l,e_m,w,x)</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    e_new = e_m</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a024402f9f40e6909ca293497afa4ac80">evolve_adi</a></div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="comment">  !&gt; Calculate cell-faced diffusion coefficient out 6 neighbouring cells</span></div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#ae6af74a6fd2793c1f267db6bebd56034">fld_get_diffcoef</a>(w, x, ixI^L, ixO^L, D)</div><div class="line"><a name="l00946"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ae6af74a6fd2793c1f267db6bebd56034">  946</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, 1:nw)</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: D(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    <span class="keywordtype">double precision</span> :: D_center(ixi^s)</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    <span class="keywordtype">integer</span> :: idir,i,j</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacemod__fld.html#a92f0c135a240fdc9e30f4b183a23495e">fld_diff_testcase</a>) <span class="keywordflow">then</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;      <span class="comment">!dE/dt + D dE/dx2</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;      <span class="comment">! [D] = x2/t = [v*l]</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;      d(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>) = one/(<a class="code" href="namespacemod__global__parameters.html#a47d2d22b0a9fe03c44e2b7c76bd96cea">unit_length</a>*<a class="code" href="namespacemod__global__parameters.html#a89a8d172b9343dbf2e294f60fb545c51">unit_velocity</a>)</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    <span class="keywordflow">else</span><span class="comment"></span></div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;<span class="comment">      !&gt; calculate diffusion coefficient</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;      d_center(ixo^s) = <a class="code" href="namespacemod__fld.html#a0359f8ad507898ac3da23f0dfdc19b66">fld_speedofligt_0</a>*w(ixo^s,<a class="code" href="namespacemod__fld.html#a04fd2845a2f1bacae5e0899a71b63a04">i_lambda</a>)/(w(ixo^s,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*w(ixo^s,iw_rho))</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="comment">      !&gt; Extrapolate lambda to ghostcells</span></div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<span class="comment">      !&gt; Edges</span></div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;<span class="comment">      !&gt; To calculate the diffusion coefficient at the ghostcells, copy lambda from grid, but use correct kappa and rho</span></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;      <span class="keywordflow">do</span> i = 0,<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        d_center(iximin1+i,:) = d_center(iximin1+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,:)</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        d_center(iximax1-i,:) = d_center(iximax1-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,:)</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;        d_center(:,iximin2+i) = d_center(:,iximin2+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>)</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;        d_center(:,iximax2-i) = d_center(:,iximax2-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>)</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="keywordflow">      end do</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;      <span class="comment">!call Diff_boundary_conditions(ixI^L,ixO^L,D)</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="comment">      !&gt; Corners</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;      <span class="keywordflow">do</span> i = 0,<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;        <span class="keywordflow">do</span> j = 0, <a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;          d_center(iximin1+i,iximax2-j) = d_center(iximin1+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,iximax2-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>)</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;          d_center(iximax1-i,iximax2-j) = d_center(iximax1-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,iximax2-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>)</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;          d_center(iximin1+i,iximin2+j) = d_center(iximin1+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,iximin2+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>)</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;          d_center(iximax1-i,iximin2+j) = d_center(iximax1-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,iximin2+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>)</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;<span class="keywordflow">        end do</span></div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;<span class="keywordflow">      end do</span></div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;<span class="comment">      !&gt; Go from cell center to cell face</span></div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;      <span class="keywordflow">do</span> i = iximin1+1, iximax1</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;      <span class="keywordflow">do</span> j = iximin2+1, iximax2</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;         <span class="comment">! D(i,j,1) = (D_center(i,j) + D_center(i-1,j))/two</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;         <span class="comment">! D(i,j,2) = (D_center(i,j) + D_center(i,j-1))/two</span></div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        d(i,j,1) = (2*d_center(i,j) + 2*d_center(i-1,j)&amp;</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                  + d_center(i,j+1) + d_center(i-1,j+1)&amp;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                  + d_center(i,j-1) + d_center(i-1,j-1))/8.d0</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        d(i,j,2) = (2*d_center(i,j) + 2*d_center(i,j-1)&amp;</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                  + d_center(i+1,j) + d_center(i+1,j-1)&amp;</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                  + d_center(i-1,j) + d_center(i-1,j-1))/8.d0</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;      d(iximin1,:,1) = d_center(iximin1,:)</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;      d(:,iximin2,1) = d_center(:,iximin2)</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;      d(iximin1,:,2) = d_center(iximin1,:)</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;      d(:,iximin2,2) = d_center(:,iximin2)</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;      <span class="comment">!D(:,ixImax2-2,:) = D(:,ixImax2-3,:)</span></div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#ae6af74a6fd2793c1f267db6bebd56034">fld_get_diffcoef</a></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<span class="comment">  !&gt; Construct the matrix out of rad-hydro variables</span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#ab90aa43ab27ea3d8f9bbbbd2baac31e1">make_matrix</a>(x,w,dw,E_m,E_n,sweepdir,ixImax,ixI^L,ixO^L,diag1,sub1,sup1,bvec1,diag2,sub2,sup2,bvec2)</div><div class="line"><a name="l01013"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ab90aa43ab27ea3d8f9bbbbd2baac31e1"> 1013</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: sweepdir, ixImax</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>          :: ixI^L, ixO^L</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s, 1:nw), dw</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: x(ixi^s, 1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: E_n(ixi^s), E_m(ixi^s)</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: diag1(iximin1:iximax1,iximin2:iximax2),sub1(iximin1:iximax1,iximin2:iximax2)</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: sup1(iximin1:iximax1,iximin2:iximax2),bvec1(iximin1:iximax1,iximin2:iximax2)</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: diag2(iximin2:iximax2,iximin1:iximax1),sub2(iximin2:iximax2,iximin1:iximax1)</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span>:: sup2(iximin2:iximax2,iximin1:iximax1),bvec2(iximin2:iximax2,iximin1:iximax1)</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="keywordtype">double precision</span> :: D(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>), h, beta(0:iximax), delta_x</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    <span class="keywordtype">integer</span> :: idir,i,j</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ae6af74a6fd2793c1f267db6bebd56034">fld_get_diffcoef</a>(w, x, ixi^l, ixo^l, d)</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    <span class="comment">!calculate h</span></div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keywordflow">if</span> (sweepdir == 1) <span class="keywordflow">then</span></div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;      delta_x = x(ixomin1+1,ixomin2,1)-x(ixomin1,ixomin2,1)</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;      <span class="comment">!delta_x = x(ixOmin1,ixOmin2+1,2)-x(ixOmin1,ixOmin2,2)</span></div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    <span class="keywordflow">elseif</span> (sweepdir == 2) <span class="keywordflow">then</span></div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;      <span class="comment">!delta_x = x(ixOmin1+1,ixOmin2,1)-x(ixOmin1,ixOmin2,1)</span></div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;      delta_x = x(ixomin1,ixomin2+1,2)-x(ixomin1,ixomin2,2)</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    h = dw/(two*delta_x**two)</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="comment">    !&gt; Matrix depends on sweepingdirection</span></div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="keywordflow">if</span> (sweepdir == 1) <span class="keywordflow">then</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;      <span class="comment">!calculate matrix for sweeping in 1-direction</span></div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;      <span class="keywordflow">do</span> j = iximin2,iximax2</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;       <span class="comment">!calculate beta</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;       <span class="keywordflow">do</span> i = iximin1,iximax1-1</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;         beta(i) = one + dw/(two*<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a>) + h*(d(i+1,j,1)+d(i,j,1))</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="keywordflow">       enddo</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;       <span class="keywordflow">do</span> i = iximin1,iximax1-1</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;         diag1(i,j) = beta(i)</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;         sub1(i+1,j) = -h*d(i+1,j,1)</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;         sup1(i,j) = -h*d(i+1,j,1)</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;         bvec1(i,j) = (one - h*(d(i,j+1,2)+d(i,j,2)))*e_m(i,j) &amp;</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;         + h*d(i,j+1,2)*e_m(i,j+1) + h*d(i,j,2)*e_m(i,j-1) + dw/(two*<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a>)*e_n(i,j)</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="keywordflow">       enddo</span></div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="comment">       !&gt; Boundary conditions on matrix</span></div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;       sub1(iximin1,j) = zero</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;       sup1(iximax1,j) = zero</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;       diag1(iximin1,j) = beta(iximin1) - h*d(iximin1,j,1)</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;       diag1(iximax1,j) = beta(iximax1-1) - h*d(iximax1,j,1)</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;       bvec1(iximax1,j) = (one - h*(d(iximax1,j+1,2)+d(iximax1,j,2)))*e_m(iximax1,j) &amp;</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;       + h*d(iximax1,j+1,2)*e_m(iximax1,j+1) + h*d(iximax1,j,2)*e_m(iximax1,j-1) + dw/(two*<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a>)*e_n(iximax1,j)</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    <span class="keywordflow">elseif</span> ( sweepdir == 2 ) <span class="keywordflow">then</span></div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;      <span class="comment">!calculate matrix for sweeping in 2-direction</span></div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;      <span class="keywordflow">do</span> j = iximin1,iximax1</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;       <span class="comment">!calculate beta</span></div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;       <span class="keywordflow">do</span> i = iximin2,iximax2-1</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;         beta(i) = one + dw/(two*<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a>) + h*(d(j,i+1,2)+d(j,i,2))</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="keywordflow">       enddo</span></div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;       <span class="keywordflow">do</span> i = iximin2,iximax2-1</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;         diag2(i,j) = beta(i)</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;         sub2(i+1,j) = -h*d(j,i+1,2)</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;         sup2(i,j) = -h*d(j,i+1,2)</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;         bvec2(i,j) = (one - h*(d(j+1,i,1)+d(j,i,1)))*e_m(j,i) &amp;</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;         + h*d(j+1,i,1)*e_m(j+1,i) + h*d(j,i,1)*e_m(j-1,i) + dw/(two*<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a>)*e_n(j,i)</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="keywordflow">       enddo</span></div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment">       !&gt; Boundary conditions on matrix</span></div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;       sub2(iximin2,j) = zero</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;       sup2(iximax2,j) = zero</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;       diag2(iximin2,j) = beta(iximin2) - h*d(j,iximin2,2)</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;       diag2(iximax2,j) = beta(iximax2-1) - h*d(j,iximax2,2)</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;       bvec2(iximax2,j) = (one - h*(d(j+1,iximax2,1)+d(j,iximax2,1)))*e_m(j,iximax2) &amp;</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;       + h*d(j+1,iximax2,1)*e_m(j+1,iximax2) + h*d(j,iximax2,1)*e_m(j-1,iximax2) + dw/(two*<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a>)*e_n(j,iximax2)</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;      <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;sweepdirection unknown&quot;</span>)</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#ab90aa43ab27ea3d8f9bbbbd2baac31e1">make_matrix</a></div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;<span class="comment">  !&gt; Invert a tridiagonal matrix using Thomas&#39; method</span></div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#abf095896983d6323156ae2773eb514f6">solve_tridiag</a>(ixOmin,ixOmax,ixImin,ixImax,diag,sub,sup,bvec,Evec)</div><div class="line"><a name="l01098"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#abf095896983d6323156ae2773eb514f6"> 1098</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <span class="keywordtype">implicit none</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: ixOmin,ixOmax,ixImin,ixImax</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: diag(iximin:iximax), bvec(iximin:iximax)</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: sub(iximin:iximax), sup(iximin:iximax)</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: Evec(iximin:iximax)</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    <span class="keywordtype">double precision</span> :: cp(iximin:iximax), dp(iximin:iximax)</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;    <span class="keywordtype">integer</span> :: i</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    <span class="comment">! initialize c-prime and d-prime</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    cp(iximin) = sup(iximin)/diag(iximin)</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    dp(iximin) = bvec(iximin)/diag(iximin)</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    <span class="comment">! solve for vectors c-prime and d-prime</span></div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    <span class="keywordflow">do</span> i = iximin+1 ,iximax-1</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;      cp(i) = sup(i)/(diag(i)-cp(i-1)*sub(i))</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;      dp(i) = (bvec(i)-dp(i-1)*sub(i))/(diag(i)-cp(i-1)*sub(i))</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    dp(iximax) = (bvec(iximax)-dp(iximax-1)*sub(iximax))/(diag(iximax)-cp(iximax-1)*sub(iximax))</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    <span class="comment">! initialize x</span></div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    evec(iximax-1) = dp(iximax-1)</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    <span class="comment">! solve for x from the vectors c-prime and d-prime</span></div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    <span class="keywordflow">do</span> i = iximax-2, iximin+1, -1</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;      evec(i) = dp(i)-cp(i)*evec(i+1)</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#abf095896983d6323156ae2773eb514f6">solve_tridiag</a></div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="comment">  !&gt; Perform boundary conditions to the tridiagonal matrix</span></div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a33da3340a6dfa6746c33ebfea720c031">adi_boundary_conditions</a>(ixI^L,ixO^L,E_m,w,x)</div><div class="line"><a name="l01130"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a33da3340a6dfa6746c33ebfea720c031"> 1130</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__usr__methods.html">mod_usr_methods</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__usr__methods.html#a3d18fc740a3fc80e948ed93c224afbbe">usr_radiation_bc</a></div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: ixI^L,ixO^L</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: w(ixi^s,1:nw),x(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: E_m(ixi^s)</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    <span class="keywordtype">integer</span> :: iB</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    <span class="keywordtype">integer</span> g, h</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    <span class="comment">!call mpistop(&#39;Check if typeboundary(:,4) is defined&#39;)</span></div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="comment">    !&gt; Boundary conditions for bound 1 (left)</span></div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__global__parameters.html#a07a5d2c56f4bfdf1e95bb650a25ad31f">typeboundary</a>(iw_r_e,1))</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;periodic&#39;</span>)</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;      e_m(iximin1:iximin1+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1,:) = e_m(iximax1-2*<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>+1:iximax1-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>,:)</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;cont&#39;</span>)</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;      <span class="keywordflow">do</span> g=1,<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a></div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;        e_m(ixomin1-g,:) = 2.d0*e_m(ixomin1-g+1,:) - e_m(ixomin1-g+2,:)</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;noinflow&#39;</span>)</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;      <span class="keywordflow">do</span> g=1,<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a></div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;        e_m(ixomin1-g,:) = 2.d0*e_m(ixomin1-g+1,:) - e_m(ixomin1-g+2,:)</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;        <span class="keywordflow">do</span> h=iximin2,iximax2</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;          e_m(g,h) = min(e_m(g,h),e_m(g+1,h))</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;<span class="keywordflow">        enddo</span></div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;fixed&#39;</span>)</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;      e_m(iximin1:iximin1+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1,:) = w(iximin1:iximin1+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1,:,iw_r_e)</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;special&#39;</span>)</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;      <span class="keywordflow">if</span> (.not. <span class="keyword">associated</span>(<a class="code" href="namespacemod__usr__methods.html#a3d18fc740a3fc80e948ed93c224afbbe">usr_radiation_bc</a>)) <span class="keywordflow">then</span></div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;        <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;special ADI boundary not defined&quot;</span>)</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__usr__methods.html#a3d18fc740a3fc80e948ed93c224afbbe">usr_radiation_bc</a>(<a class="code" href="namespacemod__global__parameters.html#a2bdc961e7304863887ec17a92ae5ac0a">global_time</a>,ixi^l,1,w,e_m,x)</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;<span class="keywordflow">    case default</span></div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;      <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;ADI boundary not defined&quot;</span>)</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;<span class="keywordflow">    end select</span></div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;<span class="comment">    !&gt; Boundary conditions for bound 2 (right)</span></div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__global__parameters.html#a07a5d2c56f4bfdf1e95bb650a25ad31f">typeboundary</a>(iw_r_e,2))</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;periodic&#39;</span>)</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;      e_m(iximax1-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>+1:iximax1,:) = e_m(iximin1+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>:iximin1+2*<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1,:)</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;cont&#39;</span>)</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;      <span class="keywordflow">do</span> g=1,<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a></div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;        e_m(ixomax1+g,:) = 2.d0*e_m(ixomax1+g-1,:) - e_m(ixomax1+g-2,:)</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;fixed&#39;</span>)</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;      e_m(ixomax1+1:iximax1,:) = w(ixomax1+1:iximax1,:,iw_r_e)</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;special&#39;</span>)</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;      <span class="keywordflow">if</span> (.not. <span class="keyword">associated</span>(<a class="code" href="namespacemod__usr__methods.html#a3d18fc740a3fc80e948ed93c224afbbe">usr_radiation_bc</a>)) <span class="keywordflow">then</span></div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;        <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;special ADI boundary not defined&quot;</span>)</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__usr__methods.html#a3d18fc740a3fc80e948ed93c224afbbe">usr_radiation_bc</a>(<a class="code" href="namespacemod__global__parameters.html#a2bdc961e7304863887ec17a92ae5ac0a">global_time</a>,ixi^l,2,w,e_m,x)</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;<span class="keywordflow">    case default</span></div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;      <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;ADI boundary not defined&quot;</span>)</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;<span class="keywordflow">    end select</span></div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;<span class="comment">    !&gt; Boundary conditions for bound 3 (bottom)</span></div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__global__parameters.html#a07a5d2c56f4bfdf1e95bb650a25ad31f">typeboundary</a>(iw_r_e,3))</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;periodic&#39;</span>)</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;      e_m(:,iximin2:iximin2+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1) = e_m(:,iximax2-2*<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>+1:iximax2-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>)</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;cont&#39;</span>)</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;      <span class="keywordflow">do</span> g=1,<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a></div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;        e_m(:,ixomin2-g) = 2.d0*e_m(:,ixomin2-g+1) - e_m(:,ixomin2-g+2)</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;fixed&#39;</span>)</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;      e_m(:,iximin2:iximin2+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1) = w(:,iximin2:iximin2+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1,iw_r_e)</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;special&#39;</span>)</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;      <span class="keywordflow">if</span> (.not. <span class="keyword">associated</span>(<a class="code" href="namespacemod__usr__methods.html#a3d18fc740a3fc80e948ed93c224afbbe">usr_radiation_bc</a>)) <span class="keywordflow">then</span></div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;        <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;special ADI boundary not defined&quot;</span>)</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__usr__methods.html#a3d18fc740a3fc80e948ed93c224afbbe">usr_radiation_bc</a>(<a class="code" href="namespacemod__global__parameters.html#a2bdc961e7304863887ec17a92ae5ac0a">global_time</a>,ixi^l,3,w,e_m,x)</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;<span class="keywordflow">    case default</span></div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;      <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;ADI boundary not defined&quot;</span>)</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;<span class="keywordflow">    end select</span></div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;<span class="comment">    !&gt; Boundary conditions for bound 4 (top)</span></div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    <span class="keywordflow">select case</span> (<a class="code" href="namespacemod__global__parameters.html#a07a5d2c56f4bfdf1e95bb650a25ad31f">typeboundary</a>(iw_r_e,4))</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;periodic&#39;</span>)</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;      e_m(:,iximax2-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>+1:iximax2) = e_m(:,iximin2+<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>:iximin2+2*<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1)</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;cont&#39;</span>)</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;      <span class="keywordflow">do</span> g = 1,<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a></div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;        e_m(:,ixomax2+g) = 2.d0*e_m(:,ixomax2+g-1) - e_m(:,ixomax2+g-2)</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;noinflow&#39;</span>)</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;      <span class="keywordflow">do</span> g = 1,<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a></div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;        e_m(:,ixomax2+g) = 2.d0*e_m(:,ixomax2+g-1) - e_m(:,ixomax2+g-2)</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        <span class="keywordflow">do</span> h=iximin1,iximax1</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;          e_m(h,g) = min(e_m(h,g),e_m(h,g-1))</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;<span class="keywordflow">        enddo</span></div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;fixed&#39;</span>)</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;      e_m(:,iximax2-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>+1:iximax2) = w(:,iximax2-<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>+1:iximax2,iw_r_e)</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    <span class="keywordflow">case</span>(<span class="stringliteral">&#39;special&#39;</span>)</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;      <span class="keywordflow">if</span> (.not. <span class="keyword">associated</span>(<a class="code" href="namespacemod__usr__methods.html#a3d18fc740a3fc80e948ed93c224afbbe">usr_radiation_bc</a>)) <span class="keywordflow">then</span></div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;        <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;special ADI boundary not defined&quot;</span>)</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;      <span class="keyword">call </span><a class="code" href="namespacemod__usr__methods.html#a3d18fc740a3fc80e948ed93c224afbbe">usr_radiation_bc</a>(<a class="code" href="namespacemod__global__parameters.html#a2bdc961e7304863887ec17a92ae5ac0a">global_time</a>,ixi^l,4,w,e_m,x)</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;<span class="keywordflow">    case default</span></div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;      <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;ADI boundary not defined&quot;</span>)</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;<span class="keywordflow">    end select</span></div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;<span class="comment">    !&gt; Corners</span></div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    <span class="keywordflow">do</span> g = 0,<a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;      <span class="keywordflow">do</span> h = 0, <a class="code" href="namespacemod__global__parameters.html#ab7c7effa3bb9a3ba7e79fd548fc7c8aa">nghostcells</a>-1</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;        e_m(ixomin1-g,ixomin2-h) = w(ixomin1,ixomin2,iw_r_e)</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;        e_m(ixomax1+g,ixomin2-h) = w(ixomax1,ixomin2,iw_r_e)</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;        e_m(ixomin1-g,ixomax2+h) = w(ixomin1,ixomax2,iw_r_e)</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;        e_m(ixomax1+g,ixomax2+h) = w(ixomax1,ixomax2,iw_r_e)</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;<span class="keywordflow">      end do</span></div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;<span class="keywordflow">    end do</span></div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a33da3340a6dfa6746c33ebfea720c031">adi_boundary_conditions</a></div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;  <span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;  <span class="comment">!!!!!!!!!!!!!!!!!!! Gas-Rad Energy interaction</span></div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;  <span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;<span class="comment">  !&gt; This subroutine calculates the radiation heating, radiation cooling</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;<span class="comment">  !&gt; and photon tiring using an implicit scheme.</span></div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;<span class="comment">  !&gt; These sourceterms are applied using the root-finding of a 4th order polynomial</span></div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;<span class="comment">  !&gt; This routine loops over every cell in the domain</span></div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;<span class="comment">  !&gt; and computes the coefficients of the polynomials in every cell</span></div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#ab84ab77a70bceeb8fa1f837d61a49f95">energy_interaction</a>(w, x, ixI^L, ixO^L)</div><div class="line"><a name="l01253"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ab84ab77a70bceeb8fa1f837d61a49f95"> 1253</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__geometry.html">mod_geometry</a></div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__physics.html">mod_physics</a><span class="keywordtype">, only</span>: <a class="code" href="namespacemod__physics.html#a1bd8713f2d319f4636d766da3901acdb">phys_get_tgas</a></div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>             :: ixI^L, ixO^L</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: x(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a>)</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: w(ixi^s,1:nw)</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    <span class="keywordtype">double precision</span> :: div_v(ixi^s,1:<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a>,1:<a class="code" href="namespacemod__global__parameters.html#a6d65136b05163940551f4704a2dc13b8">ndir</a>)</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    <span class="keywordtype">double precision</span> :: divvP(ixo^s)</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    <span class="keywordtype">double precision</span> :: temperature(ixi^s), vel(ixi^s)</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    <span class="keywordtype">double precision</span> :: a1(ixo^s), a2(ixo^s), a3(ixo^s)</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    <span class="keywordtype">double precision</span> :: c0(ixo^s), c1(ixo^s)</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;    <span class="keywordtype">double precision</span> :: e_gas(ixo^s), E_rad(ixo^s)</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    <span class="keywordtype">double precision</span> :: grad_v(ixi^s)</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    <span class="keywordtype">integer</span> :: i,j,idir</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;<span class="comment">    !&gt; calculate tensor div_v</span></div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;    <span class="keywordflow">do</span> i = 1,<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a></div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;      <span class="keywordflow">do</span> j = 1,<a class="code" href="namespacemod__global__parameters.html#a44dda3cb334ff384ee40e1797717cc38">ndim</a></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;        vel(ixi^s) = w(ixi^s,iw_mom(j))<span class="comment"></span></div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;<span class="comment">        !&gt; gradient or gradientS ?!?!?!?!?!?</span></div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__geometry.html#a92ec4e2c8ae00a42bf5bf2c1ce3a26c4">gradient</a>(vel,ixi^l,ixo^l,i,grad_v)</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;        div_v(ixo^s,i,j) = grad_v(ixo^s)</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;<span class="keywordflow">      enddo</span></div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;<span class="comment">    !&gt;eq 34 Turner and stone (Only 2D)</span></div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    divvp(ixo^s) = div_v(ixo^s,1,1)*w(ixo^s,<a class="code" href="namespacemod__fld.html#a6d9a872cd7d3a3e58de15d3c14d7156e">i_edd</a>(1,1))  &amp;</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;                 + div_v(ixo^s,2,2)*w(ixo^s,<a class="code" href="namespacemod__fld.html#a6d9a872cd7d3a3e58de15d3c14d7156e">i_edd</a>(2,2))  &amp;</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;                 + div_v(ixo^s,1,2)*w(ixo^s,<a class="code" href="namespacemod__fld.html#a6d9a872cd7d3a3e58de15d3c14d7156e">i_edd</a>(1,2))  &amp;</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                 + div_v(ixo^s,2,1)*w(ixo^s,<a class="code" href="namespacemod__fld.html#a6d9a872cd7d3a3e58de15d3c14d7156e">i_edd</a>(2,1))</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    divvp(ixo^s) = divvp(ixo^s)*w(ixo^s,iw_r_e)</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;<span class="comment">    !&gt; Get temperature</span></div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__physics.html#a1bd8713f2d319f4636d766da3901acdb">phys_get_tgas</a>(w,x,ixi^l,ixo^l,temperature)</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    e_gas(ixo^s) = w(ixo^s,iw_e)</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    e_rad(ixo^s) = w(ixo^s,iw_r_e)</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;<span class="comment">    !&gt; Calculate coefficients for polynomial</span></div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;    a1(ixo^s) = 4*w(ixo^s,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*w(ixo^s,iw_rho)*<a class="code" href="namespacemod__fld.html#a269027bb742c903e3031eb0682c72e5e">fld_sigma_0</a>*(temperature(ixo^s)/e_gas(ixo^s))**4.d0*<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a></div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;    a2(ixo^s) = <a class="code" href="namespacemod__fld.html#a0359f8ad507898ac3da23f0dfdc19b66">fld_speedofligt_0</a>*w(ixo^s,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*w(ixo^s,iw_rho)*<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a></div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    a3(ixo^s) = divvp(ixo^s)/e_rad(ixo^s)*<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a></div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    c0(ixo^s) = ((one + a1(ixo^s) + a3(ixo^s))*e_gas(ixo^s) + a2(ixo^s)*e_rad(ixo^s))/(a1(ixo^s)*(one + a3(ixo^s)))</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    c1(ixo^s) = (one + a1(ixo^s) + a3(ixo^s))/(a1(ixo^s)*(one + a3(ixo^s)))</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    <span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    <span class="comment">!! Dimensionless notation for do loop with LASY:</span></div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    <span class="comment">! {do ix^D=1,100 \ }</span></div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    <span class="comment">! a(ix^D)= ix^D*</span></div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;    <span class="comment">! {enddo\ }</span></div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    <span class="comment">! which translates to:</span></div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;    <span class="comment">! do ix1=1,100</span></div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;    <span class="comment">! do ix2=1,100</span></div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    <span class="comment">!     a(ix1,ix2)= ix1*ix2</span></div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    <span class="comment">! enddo</span></div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    <span class="comment">! enddo</span></div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    <span class="comment">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    <span class="comment">!Do similar stuff for the eddington_tensor</span></div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;<span class="comment">    !&gt; Loop over every cell for bisection method</span></div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    <span class="keywordflow">do</span> i = ixomin1,ixomax1</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    <span class="keywordflow">do</span> j =  ixomin2,ixomax2</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;      <span class="keywordflow">select case</span>(<a class="code" href="namespacemod__fld.html#ab52da06b97cae443e859349f1c04b5fa">fld_interaction_method</a>)</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;      <span class="keywordflow">case</span>(<span class="stringliteral">&#39;Bisect&#39;</span>)</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#ae111198d92df820a9edeaf0073f4107e">bisection_method</a>(e_gas(i,j), e_rad(i,j), c0(i,j), c1(i,j))</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;      <span class="keywordflow">case</span>(<span class="stringliteral">&#39;Newton&#39;</span>)</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#afd1668b588f8b86ac4d95d46ee2ecd1f">newton_method</a>(e_gas(i,j), e_rad(i,j), c0(i,j), c1(i,j))</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;      <span class="keywordflow">case</span>(<span class="stringliteral">&#39;Halley&#39;</span>)</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;        <span class="keyword">call </span><a class="code" href="namespacemod__fld.html#a6b4aeeffe4c5918e0bd2a8858efea215">halley_method</a>(e_gas(i,j), e_rad(i,j), c0(i,j), c1(i,j))</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;<span class="keywordflow">      case default</span></div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;        <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;root-method not known&#39;</span>)</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;<span class="keywordflow">      end select</span></div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;<span class="comment">    !&gt; Update gas-energy in w</span></div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    w(ixo^s,iw_e) = e_gas(ixo^s)</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;<span class="comment">    !&gt; Calculate new radiation energy</span></div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;<span class="comment">    !&gt; Get temperature</span></div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    <span class="keyword">call </span><a class="code" href="namespacemod__physics.html#a1bd8713f2d319f4636d766da3901acdb">phys_get_tgas</a>(w,x,ixi^l,ixo^l,temperature)</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;<span class="comment">    !&gt; Update a1</span></div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    a1(ixo^s) = 4*w(ixo^s,<a class="code" href="namespacemod__fld.html#a909ac07bb5c8112ef4348cf386d0a992">i_op</a>)*w(ixo^s,iw_rho)*<a class="code" href="namespacemod__fld.html#a269027bb742c903e3031eb0682c72e5e">fld_sigma_0</a>*(temperature(ixo^s)/e_gas(ixo^s))**4.d0*<a class="code" href="namespacemod__global__parameters.html#a696248795de3f887232834d6136b8501">dt</a></div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;<span class="comment">    !&gt; advance E_rad</span></div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    e_rad(ixo^s) = (a1*e_gas(ixo^s)**4.d0 + e_rad(ixo^s))/(one + a2 + a3)</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;<span class="comment">    !&gt; Update rad-energy in w</span></div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    w(ixo^s,iw_r_e) = e_rad(ixo^s)</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#ab84ab77a70bceeb8fa1f837d61a49f95">energy_interaction</a></div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;<span class="comment">  !&gt; Find the root of the 4th degree polynomial using the bisection method</span></div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#ae111198d92df820a9edeaf0073f4107e">bisection_method</a>(e_gas, E_rad, c0, c1)</div><div class="line"><a name="l01355"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ae111198d92df820a9edeaf0073f4107e"> 1355</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: c0, c1</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: E_rad</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: e_gas</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    <span class="keywordtype">double precision</span> :: bisect_a, bisect_b, bisect_c</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    <span class="keywordtype">integer</span> :: n, max_its</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    n = 0</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    max_its = 1d7</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    bisect_a = zero</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;    bisect_b = 1.2d0*max(abs(c0/c1),abs(c0)**(1.d0/4.d0))</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    <span class="comment">! do while (abs(Polynomial_Bisection(bisect_b, c0, c1)-Polynomial_Bisection(bisect_a, c0, c1))&amp;</span></div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    <span class="comment">!    .ge. fld_bisect_tol*min(e_gas,E_rad))</span></div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    <span class="keywordflow">do</span> <span class="keywordflow">while</span> (abs(bisect_b-bisect_a) .ge. <a class="code" href="namespacemod__fld.html#a1baf3c3f8c4e68834dfedd8f7362663a">fld_bisect_tol</a>*min(e_gas,e_rad))</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;      bisect_c = (bisect_a + bisect_b)/two</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;      n = n +1</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;      <span class="keywordflow">if</span> (n .gt. max_its) <span class="keywordflow">then</span></div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;        <span class="comment">!print*, &#39;Bisection tolerance not reached&#39;</span></div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;        <span class="comment">!print*, &#39;relative error ~&#39;, abs(bisect_b-bisect_a)/min(e_gas,E_rad)</span></div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;        <span class="comment">! bisect_a = bisect_c</span></div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;        <span class="comment">! bisect_b = bisect_c</span></div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;        <span class="keywordflow">goto</span> 2435</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;        <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&#39;No convergece in bisection scheme&#39;</span>)</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_a, c0, c1)*&amp;</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;      <a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_b, c0, c1) .lt. zero) <span class="keywordflow">then</span></div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_a, c0, c1)*&amp;</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;        <a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_c, c0, c1) .lt. zero) <span class="keywordflow">then</span></div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;          bisect_b = bisect_c</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;        <span class="keywordflow">elseif</span> (<a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_b, c0, c1)*&amp;</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;        <a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_c, c0, c1) .lt. zero) <span class="keywordflow">then</span></div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;          bisect_a = bisect_c</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;        <span class="keywordflow">elseif</span> (<a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_a, c0, c1) .eq. zero) <span class="keywordflow">then</span></div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;          bisect_b = bisect_a</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;          bisect_c = bisect_a</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;          <span class="keywordflow">goto</span> 2435</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;        <span class="keywordflow">elseif</span> (<a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_b, c0, c1) .eq. zero) <span class="keywordflow">then</span></div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;          bisect_a = bisect_b</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;          bisect_c = bisect_b</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;          <span class="keywordflow">goto</span> 2435</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;        <span class="keywordflow">elseif</span> (<a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_c, c0, c1) .eq. zero) <span class="keywordflow">then</span></div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;          bisect_a = bisect_c</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;          bisect_b = bisect_c</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;          <span class="keywordflow">goto</span> 2435</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;          <span class="keyword">call </span><a class="code" href="comm__lib_8t.html#a49b49ea9ffbbadfe688e332921c4cddd">mpistop</a>(<span class="stringliteral">&quot;Problem with fld bisection method&quot;</span>)</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;<span class="keywordflow">        endif</span></div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;      <span class="keywordflow">elseif</span> (<a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_a, c0, c1) &amp;</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;        - <a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_b, c0, c1) .lt. <a class="code" href="namespacemod__fld.html#a1baf3c3f8c4e68834dfedd8f7362663a">fld_bisect_tol</a>*<a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_a, c0, c1)) <span class="keywordflow">then</span></div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;        <span class="keywordflow">goto</span> 2435</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;      <span class="keywordflow">else</span></div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;        bisect_a = e_gas</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;        bisect_b = e_gas</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;        print*, <span class="stringliteral">&quot;IGNORING GAS-RAD ENERGY EXCHANGE &quot;</span>, c0, c1</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;        print*, <a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_a, c0, c1), <a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_b, c0, c1)</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_a, c0, c1) .le. smalldouble) <span class="keywordflow">then</span></div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;          bisect_b = bisect_a</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;        <span class="keywordflow">elseif</span> (<a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(bisect_a, c0, c1) .le. smalldouble) <span class="keywordflow">then</span></div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;          bisect_a = bisect_b</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;<span class="keywordflow">        endif</span></div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;        <span class="keywordflow">goto</span> 2435</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;      2435 e_gas = (bisect_a + bisect_b)/two</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#ae111198d92df820a9edeaf0073f4107e">bisection_method</a></div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;<span class="comment">  !&gt; Find the root of the 4th degree polynomial using the Newton-Ralphson method</span></div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#afd1668b588f8b86ac4d95d46ee2ecd1f">newton_method</a>(e_gas, E_rad, c0, c1)</div><div class="line"><a name="l01438"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#afd1668b588f8b86ac4d95d46ee2ecd1f"> 1438</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: c0, c1</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: E_rad</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: e_gas</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;    <span class="keywordtype">double precision</span> :: xval, yval, der, deltax</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    yval = bigdouble</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    xval = e_gas</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    der = one</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    deltax = one</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;<span class="comment">    !&gt; Compare error with dx = dx/dy dy</span></div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    <span class="keywordflow">do</span> <span class="keywordflow">while</span> (abs(deltax) .gt. <a class="code" href="namespacemod__fld.html#a1baf3c3f8c4e68834dfedd8f7362663a">fld_bisect_tol</a>)</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;      yval = <a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(xval, c0, c1)</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;      der = <a class="code" href="namespacemod__fld.html#ac956fe2dd223e2039a113a0d0c2991d0">dpolynomial_bisection</a>(xval, c0, c1)</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;      deltax = -yval/der</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;      xval = xval + deltax</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    e_gas = xval</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#afd1668b588f8b86ac4d95d46ee2ecd1f">newton_method</a></div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;<span class="comment">  !&gt; Find the root of the 4th degree polynomial using the Halley method</span></div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacemod__fld.html#a6b4aeeffe4c5918e0bd2a8858efea215">halley_method</a>(e_gas, E_rad, c0, c1)</div><div class="line"><a name="l01464"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a6b4aeeffe4c5918e0bd2a8858efea215"> 1464</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: c0, c1</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span>    :: E_rad</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(inout)</span> :: e_gas</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    <span class="keywordtype">double precision</span> :: xval, yval, der, dder, deltax</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    yval = bigdouble</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    xval = e_gas</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    der = one</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    dder = one</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;    deltax = one</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;<span class="comment">    !&gt; Compare error with dx = dx/dy dy</span></div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    <span class="keywordflow">do</span> <span class="keywordflow">while</span> (abs(deltax) .gt. <a class="code" href="namespacemod__fld.html#a1baf3c3f8c4e68834dfedd8f7362663a">fld_bisect_tol</a>)</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;      yval = <a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(xval, c0, c1)</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;      der = <a class="code" href="namespacemod__fld.html#ac956fe2dd223e2039a113a0d0c2991d0">dpolynomial_bisection</a>(xval, c0, c1)</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;      dder = <a class="code" href="namespacemod__fld.html#a5c3cb192d4ff204d751bbabdc46570a3">ddpolynomial_bisection</a>(xval, c0, c1)</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;      deltax = -two*yval*der/(two*der**2 - yval*dder)</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;      xval = xval + deltax</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;<span class="keywordflow">    enddo</span></div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;    e_gas = xval</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacemod__fld.html#a6b4aeeffe4c5918e0bd2a8858efea215">halley_method</a></div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;<span class="comment">  !&gt; Evaluate polynomial at argument e_gas</span></div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;<span class="keyword">  function </span><a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a>(e_gas, c0, c1) <span class="keyword">result</span>(val)</div><div class="line"><a name="l01492"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0"> 1492</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: e_gas</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: c0, c1</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;    <span class="keywordtype">double precision</span> :: val</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    val = e_gas**4.d0 + c1*e_gas - c0</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;<span class="keyword">  end function </span><a class="code" href="namespacemod__fld.html#a8ec89cf1950c713250b72d34680df7c0">polynomial_bisection</a></div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;<span class="comment">  !&gt; Evaluate first derivative of polynomial at argument e_gas</span></div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;<span class="keyword">  function </span><a class="code" href="namespacemod__fld.html#ac956fe2dd223e2039a113a0d0c2991d0">dpolynomial_bisection</a>(e_gas, c0, c1) <span class="keyword">result</span>(der)</div><div class="line"><a name="l01503"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#ac956fe2dd223e2039a113a0d0c2991d0"> 1503</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: e_gas</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: c0, c1</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    <span class="keywordtype">double precision</span> :: der</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    der = 4.d0*e_gas**3.d0 + c1</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;<span class="keyword">  end function </span><a class="code" href="namespacemod__fld.html#ac956fe2dd223e2039a113a0d0c2991d0">dpolynomial_bisection</a></div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;<span class="comment">  !&gt; Evaluate second derivative of polynomial at argument e_gas</span></div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;<span class="keyword">  function </span><a class="code" href="namespacemod__fld.html#a5c3cb192d4ff204d751bbabdc46570a3">ddpolynomial_bisection</a>(e_gas, c0, c1) <span class="keyword">result</span>(dder)</div><div class="line"><a name="l01514"></a><span class="lineno"><a class="line" href="namespacemod__fld.html#a5c3cb192d4ff204d751bbabdc46570a3"> 1514</a></span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: e_gas</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(in)</span> :: c0, c1</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    <span class="keywordtype">double precision</span> :: dder</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    dder = 4.d0*3.d0*e_gas**2.d0</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;<span class="keyword">  end function </span><a class="code" href="namespacemod__fld.html#a5c3cb192d4ff204d751bbabdc46570a3">ddpolynomial_bisection</a></div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;<span class="keyword">end module </span><a class="code" href="namespacemod__fld.html">mod_fld</a></div><div class="ttc" id="namespacemod__global__parameters_html"><div class="ttname"><a href="namespacemod__global__parameters.html">mod_global_parameters</a></div><div class="ttdoc">This module contains definitions of global parameters and variables and some generic functions/subrou...</div><div class="ttdef"><b>Definition:</b> <a href="mod__global__parameters_8t_source.html#l00005">mod_global_parameters.t:5</a></div></div>
./doc/html/mod__fld_8t_source.html:<div class="ttc" id="namespacemod__opacity_html_a874f16e98bb18964835a5276da13e9e1"><div class="ttname"><a href="namespacemod__opacity.html#a874f16e98bb18964835a5276da13e9e1">mod_opacity::init_opal</a></div><div class="ttdeci">subroutine, public init_opal(He_abundance)</div><div class="ttdoc">This routine is called when the fld radiation module is initialised. Here, the tables for different H...</div><div class="ttdef"><b>Definition:</b> <a href="mod__opacity_8t_source.html#l00032">mod_opacity.t:32</a></div></div>
./doc/html/mod__fld_8t_source.html:<div class="ttc" id="namespacemod__fld_html_a627c9fb68be753e35a88ccf99b48390c"><div class="ttname"><a href="namespacemod__fld.html#a627c9fb68be753e35a88ccf99b48390c">mod_fld::fld_init</a></div><div class="ttdeci">subroutine, public fld_init(He_abundance)</div><div class="ttdoc">Initialising FLD-module: Read opacities Initialise Multigrid adimensionalise kappa Add extra variable...</div><div class="ttdef"><b>Definition:</b> <a href="mod__fld_8t_source.html#l00119">mod_fld.t:119</a></div></div>
./doc/html/md_doc_par.html:  He_abundance= DOUBLE from 0 to 1
./doc/html/md_doc_par.html: He_abundance= DOUBLE from 0 to 1
./doc/html/mod__opacity_8t.html:<tr class="memitem:a874f16e98bb18964835a5276da13e9e1"><td class="memItemLeft" align="right" valign="top">subroutine, public&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacemod__opacity.html#a874f16e98bb18964835a5276da13e9e1">mod_opacity::init_opal</a> (He_abundance)</td></tr>
