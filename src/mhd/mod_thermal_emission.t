! module mod_thermal_emission -- synthesize emission flux of some
! thermal lines
! EUV lines database: 
! 'He_II_304' 'Fe_IX_171' 'Fe_XXIV_193' 'Fe_XIV_211' 'Fe_XVI_335'
! 'Fe_XVIII_94' 'Fe_XXI_131'
! 'Si_IV_1394' 'Si_IV_1403' 'O_IV_1338' 'O_IV_1343' 'O_IV_1397' 'O_IV_1400'
! 'O_IV_1401' 'O_IV_1405' 'Fe_XII_1349' 'Fe_XXI_1351' 'Fe_XXI_1354'
! subroutines: 
! get_EUV: get local EUV emission intensity (for 1d, 2d and 3d)
! get_SXR: get local Soft X-ray emission intensity (for 1d, 2d and 3d)
! get_EUV_image : integrating emission flux along given light of sight (LOS)
!                 and get 2d images of intensity and Doppler shift 
!                 (for 3d data only)
! get_EUV_spectra : integrating local emission spectral along given LOS and 
!                   get a 2d wavelength-distance image, where distance is the
!                   distance along given slit (for 3d data only)

module mod_thermal_emission
  use mod_global_parameters
  use mod_mhd

  implicit none

  integer :: n_aia
  double precision :: t_aia(1:101)
  double precision :: f_94(1:101),f_131(1:101),f_171(1:101)
  double precision :: f_193(1:101),f_211(1:101),f_304(1:101)
  double precision :: f_335(1:101),f_1354(1:101)

  integer :: n_iris
  double precision :: t_iris(1:41)
  double precision :: f_1394(1:41),f_1403(1:41),f_1338(1:41)
  double precision :: f_1343(1:41),f_1397(1:41),f_1400(1:41)
  double precision :: f_1401(1:41),f_1405(1:41),f_1349(1:41)
  double precision :: f_1351(1:41)


  data n_aia / 101 /

  data t_aia / 4. ,  4.05, 4.1,  4.15, 4.2,  4.25, 4.3,  4.35, &
               4.4,  4.45, 4.5,  4.55, 4.6,  4.65, 4.7,  4.75, &
               4.8,  4.85, 4.9,  4.95, 5. ,  5.05, 5.1,  5.15, &
               5.2,  5.25, 5.3,  5.35, 5.4,  5.45, 5.5,  5.55, &
               5.6,  5.65, 5.7,  5.75, 5.8,  5.85, 5.9,  5.95, &
               6. ,  6.05, 6.1,  6.15, 6.2,  6.25, 6.3,  6.35, &
               6.4,  6.45, 6.5,  6.55, 6.6,  6.65, 6.7,  6.75, &
               6.8,  6.85, 6.9,  6.95, 7. ,  7.05, 7.1,  7.15, &
               7.2,  7.25, 7.3,  7.35, 7.4,  7.45, 7.5,  7.55, &
               7.6,  7.65, 7.7,  7.75, 7.8,  7.85, 7.9,  7.95, &
               8. ,  8.05, 8.1,  8.15, 8.2,  8.25, 8.3,  8.35, &
               8.4,  8.45, 8.5,  8.55, 8.6,  8.65, 8.7,  8.75, &
               8.8,  8.85, 8.9,  8.95, 9. /

  data f_94 / 4.25022959e-37, 4.35880298e-36, 3.57054296e-35, 2.18175426e-34, & 
              8.97592571e-34, 2.68512961e-33, 7.49559346e-33, 2.11603751e-32, &
              5.39752853e-32, 1.02935904e-31, 1.33822307e-31, 1.40884290e-31, &
              1.54933156e-31, 2.07543102e-31, 3.42026227e-31, 6.31171444e-31, &
              1.16559416e-30, 1.95360497e-30, 2.77818735e-30, 3.43552578e-30, &
              4.04061803e-30, 4.75470982e-30, 5.65553769e-30, 6.70595782e-30, &
              7.80680354e-30, 8.93247715e-30, 1.02618156e-29, 1.25979030e-29, &
              1.88526483e-29, 3.62448572e-29, 7.50553279e-29, 1.42337571e-28, &
              2.37912813e-28, 3.55232305e-28, 4.84985757e-28, 6.20662827e-28, &
              7.66193687e-28, 9.30403645e-28, 1.10519802e-27, 1.25786927e-27, &
              1.34362634e-27, 1.33185242e-27, 1.22302081e-27, 1.05677973e-27, &
              9.23064720e-28, 8.78570994e-28, 8.02397416e-28, 5.87681142e-28, &
              3.82272695e-28, 3.11492649e-28, 3.85736090e-28, 5.98893519e-28, &
              9.57553548e-28, 1.46650267e-27, 2.10365847e-27, 2.79406671e-27, &
              3.39420087e-27, 3.71077520e-27, 3.57296767e-27, 2.95114380e-27, &
              2.02913103e-27, 1.13361825e-27, 5.13405629e-28, 2.01305089e-28, &
              8.15781482e-29, 4.28366817e-29, 3.08701543e-29, 2.68693906e-29, &
              2.51764203e-29, 2.41773103e-29, 2.33996083e-29, 2.26997246e-29, &
              2.20316143e-29, 2.13810001e-29, 2.07424438e-29, 2.01149189e-29, &
              1.94980213e-29, 1.88917920e-29, 1.82963583e-29, 1.77116920e-29, &
              1.71374392e-29, 1.65740593e-29, 1.60214447e-29, 1.54803205e-29, &
              1.49510777e-29, 1.44346818e-29, 1.39322305e-29, 1.34441897e-29, &
              1.29713709e-29, 1.25132618e-29, 1.20686068e-29, 1.14226584e-29, &
              1.09866413e-29, 1.05635524e-29, 1.01532444e-29, 9.75577134e-30, &
              9.37102736e-30, 8.99873335e-30, 8.63860172e-30, 8.29051944e-30, &
              7.95414793e-30 /

  data f_131 / 3.18403601e-37,   3.22254703e-36,   2.61657920e-35, &
               1.59575286e-34,   6.65779556e-34,   2.07015132e-33, &
               6.05768615e-33,   1.76074833e-32,   4.52633001e-32, &
               8.57121883e-32,   1.09184271e-31,   1.10207963e-31, &
               1.11371658e-31,   1.29105226e-31,   1.80385897e-31, &
               3.27295431e-31,   8.92002136e-31,   3.15214579e-30, &
               9.73440787e-30,   2.22709702e-29,   4.01788984e-29, &
               6.27471832e-29,   8.91764995e-29,   1.18725647e-28, &
               1.52888040e-28,   2.05082946e-28,   3.47651873e-28, &
               8.80482184e-28,   2.66533063e-27,   7.05805149e-27, &
               1.46072515e-26,   2.45282476e-26,   3.55303726e-26, &
               4.59075911e-26,   5.36503515e-26,   5.68444094e-26, &
               5.47222296e-26,   4.81119761e-26,   3.85959059e-26, &
               2.80383406e-26,   1.83977650e-26,   1.11182849e-26, &
               6.50748885e-27,   3.96843481e-27,   2.61876319e-27, &
               1.85525324e-27,   1.39717024e-27,   1.11504283e-27, &
               9.38169611e-28,   8.24801234e-28,   7.43331919e-28, &
               6.74537063e-28,   6.14495760e-28,   5.70805277e-28, &
               5.61219786e-28,   6.31981777e-28,   9.19747307e-28, &
               1.76795732e-27,   3.77985446e-27,   7.43166191e-27, &
               1.19785603e-26,   1.48234676e-26,   1.36673114e-26, &
               9.61047146e-27,   5.61209353e-27,   3.04779780e-27, &
               1.69378976e-27,   1.02113491e-27,   6.82223774e-28, &
               5.02099099e-28,   3.99377760e-28,   3.36279037e-28, &
               2.94767378e-28,   2.65740865e-28,   2.44396277e-28, &
               2.28003967e-28,   2.14941419e-28,   2.04178995e-28, &
               1.95031045e-28,   1.87011994e-28,   1.79777869e-28, &
               1.73093957e-28,   1.66795789e-28,   1.60785455e-28, &
               1.55002399e-28,   1.49418229e-28,   1.44022426e-28, &
               1.38807103e-28,   1.33772767e-28,   1.28908404e-28, &
               1.24196208e-28,   1.17437501e-28,   1.12854330e-28, &
               1.08410498e-28,   1.04112003e-28,   9.99529904e-29, &
               9.59358806e-29,   9.20512291e-29,   8.83009123e-29, &
               8.46817043e-29,   8.11921928e-29 /

  data f_171 / 2.98015581e-42, 1.24696230e-40, 3.37614652e-39, 5.64103034e-38, &
               5.20550266e-37, 2.77785939e-36, 1.16283616e-35, 6.50007689e-35, &
               9.96177399e-34, 1.89586076e-32, 2.10982799e-31, 1.36946479e-30, &
               6.27396553e-30, 2.29955134e-29, 7.13430211e-29, 1.91024282e-28, &
               4.35358848e-28, 7.94807808e-28, 1.07431875e-27, 1.08399488e-27, &
               9.16212938e-28, 7.34715770e-28, 6.59246382e-28, 9.13541375e-28, &
               2.05939035e-27, 5.08206555e-27, 1.10148083e-26, 2.01884662e-26, &
               3.13578384e-26, 4.14367719e-26, 5.36067711e-26, 8.74170213e-26, &
               1.64161233e-25, 2.94587860e-25, 4.76298332e-25, 6.91765639e-25, &
               9.08825111e-25, 1.08496183e-24, 1.17440114e-24, 1.13943939e-24, &
               9.71696981e-25, 7.09593688e-25, 4.31376399e-25, 2.12708486e-25, &
               8.47429567e-26, 3.17608104e-26, 1.95898842e-26, 1.98064242e-26, &
               1.67706555e-26, 8.99126003e-27, 3.29773878e-27, 1.28896127e-27, &
               8.51169698e-28, 7.53520167e-28, 6.18268143e-28, 4.30034650e-28, &
               2.78152409e-28, 1.95437088e-28, 1.65896278e-28, 1.68740181e-28, &
               1.76054383e-28, 1.63978419e-28, 1.32880591e-28, 1.00833205e-28, &
               7.82252806e-29, 6.36181741e-29, 5.34633869e-29, 4.58013864e-29, &
               3.97833422e-29, 3.49414760e-29, 3.09790940e-29, 2.76786227e-29, &
               2.48806269e-29, 2.24823367e-29, 2.04016653e-29, 1.85977413e-29, &
               1.70367499e-29, 1.56966125e-29, 1.45570643e-29, 1.35964565e-29, &
               1.27879263e-29, 1.21016980e-29, 1.15132499e-29, 1.09959628e-29, &
               1.05307482e-29, 1.01040261e-29, 9.70657096e-30, 9.33214234e-30, &
               8.97689427e-30, 8.63761192e-30, 8.31149879e-30, 7.85162401e-30, &
               7.53828281e-30, 7.23559452e-30, 6.94341530e-30, 6.66137038e-30, &
               6.38929156e-30, 6.12669083e-30, 5.87346434e-30, 5.62943622e-30, & 
               5.39435202e-30 /

  data f_193 / 6.40066486e-32, 4.92737300e-31, 2.95342934e-30, 1.28061594e-29, & 
               3.47747667e-29, 5.88554792e-29, 7.72171179e-29, 9.75609282e-29, &
               1.34318963e-28, 1.96252638e-28, 2.70163878e-28, 3.63192965e-28, &
               5.28087341e-28, 8.37821446e-28, 1.39089159e-27, 2.31749718e-27, &
               3.77510689e-27, 5.85198594e-27, 8.26021568e-27, 1.04870405e-26, &
               1.25209374e-26, 1.47406787e-26, 1.77174067e-26, 2.24098537e-26, &
               3.05926105e-26, 4.50018853e-26, 6.84720216e-26, 1.00595861e-25, &
               1.30759222e-25, 1.36481773e-25, 1.15943558e-25, 1.01467304e-25, &
               1.04092532e-25, 1.15071251e-25, 1.27416033e-25, 1.38463476e-25, &
               1.47882726e-25, 1.57041238e-25, 1.69786224e-25, 1.94970397e-25, &
               2.50332918e-25, 3.58321431e-25, 5.18061550e-25, 6.60405549e-25, &
               6.64085365e-25, 4.83825816e-25, 2.40545020e-25, 8.59534098e-26, &
               2.90920638e-26, 1.33204845e-26, 9.03933926e-27, 7.78910836e-27, &
               7.29342321e-27, 7.40267022e-27, 8.05279981e-27, 8.13829291e-27, &
               6.92634262e-27, 5.12521880e-27, 3.59527615e-27, 2.69617560e-27, &
               2.84432713e-27, 5.06697306e-27, 1.01281903e-26, 1.63526978e-26, &
               2.06759342e-26, 2.19482312e-26, 2.10050611e-26, 1.89837248e-26, &
               1.66347131e-26, 1.43071097e-26, 1.21518419e-26, 1.02078343e-26, &
               8.46936184e-27, 6.93015742e-27, 5.56973237e-27, 4.38951754e-27, &
               3.38456457e-27, 2.55309556e-27, 1.88904224e-27, 1.38057546e-27, &
               1.00718330e-27, 7.43581116e-28, 5.63562931e-28, 4.43359435e-28, &
               3.63923535e-28, 3.11248143e-28, 2.75586846e-28, 2.50672237e-28, &
               2.32419348e-28, 2.18325682e-28, 2.06834486e-28, 1.93497044e-28, &
               1.84540751e-28, 1.76356504e-28, 1.68741425e-28, 1.61566157e-28, &
               1.54754523e-28, 1.48249410e-28, 1.42020176e-28, 1.36045230e-28, &
               1.30307965e-28 /

  data f_211 / 4.74439912e-42, 1.95251522e-40, 5.19700194e-39, 8.53120166e-38, &
               7.72745727e-37, 4.04158559e-36, 1.64853511e-35, 8.56295439e-35, &
               1.17529722e-33, 2.16867729e-32, 2.40472264e-31, 1.56418133e-30, &
               7.20032889e-30, 2.65838271e-29, 8.33196904e-29, 2.26128236e-28, &
               5.24295811e-28, 9.77791121e-28, 1.35913489e-27, 1.43957785e-27, &
               1.37591544e-27, 1.49029886e-27, 2.06183401e-27, 3.31440622e-27, &
               5.42497318e-27, 8.41100374e-27, 1.17941366e-26, 1.49269794e-26, &
               1.71506074e-26, 1.71266353e-26, 1.51434781e-26, 1.36766622e-26, &
               1.33483562e-26, 1.36834518e-26, 1.45829002e-26, 1.62575306e-26, &
               1.88773347e-26, 2.22026986e-26, 2.54930499e-26, 2.80758138e-26, &
               3.06176409e-26, 3.62799792e-26, 5.13226109e-26, 8.46260744e-26, &
               1.38486586e-25, 1.86192535e-25, 1.78007934e-25, 1.16548409e-25, &
               5.89293257e-26, 2.69952884e-26, 1.24891081e-26, 6.41273176e-27, &
               4.08282914e-27, 3.26463328e-27, 2.76230280e-27, 2.08986882e-27, &
               1.37658470e-27, 8.48489381e-28, 5.19304217e-28, 3.19312514e-28, &
               2.02968197e-28, 1.50171666e-28, 1.39164218e-28, 1.42448821e-28, &
               1.41714519e-28, 1.33341059e-28, 1.20759270e-28, 1.07259692e-28, &
               9.44895400e-29, 8.29030041e-29, 7.25440631e-29, 6.33479483e-29, &
               5.51563757e-29, 4.79002469e-29, 4.14990482e-29, 3.59384972e-29, &
               3.12010860e-29, 2.72624742e-29, 2.40734791e-29, 2.15543565e-29, &
               1.95921688e-29, 1.80682882e-29, 1.68695662e-29, 1.59020936e-29, &
               1.50940886e-29, 1.43956179e-29, 1.37731622e-29, 1.32049043e-29, &
               1.26771875e-29, 1.21803879e-29, 1.17074716e-29, 1.10507836e-29, &
               1.06022834e-29, 1.01703080e-29, 9.75436986e-30, 9.35349257e-30, &
               8.96744546e-30, 8.59527489e-30, 8.23678940e-30, 7.89144480e-30, & 
               7.55891138e-30 /

  data f_304 / 3.62695850e-32, 2.79969087e-31, 1.68340584e-30, 7.32681440e-30, &
               1.99967770e-29, 3.41296785e-29, 4.55409104e-29, 5.94994635e-29, &
               8.59864963e-29, 1.39787633e-28, 3.17701965e-28, 1.14474920e-27, &
               4.44845958e-27, 1.54785841e-26, 4.70265345e-26, 1.24524365e-25, &
               2.81535352e-25, 5.10093666e-25, 6.83545307e-25, 6.82110329e-25, &
               5.66886188e-25, 4.36205513e-25, 3.29265688e-25, 2.49802368e-25, &
               1.92527113e-25, 1.51058572e-25, 1.20596047e-25, 9.76884267e-26, &
               7.89979266e-26, 6.18224289e-26, 4.67298332e-26, 3.57934505e-26, &
               2.84535785e-26, 2.32853022e-26, 1.95228514e-26, 1.67880071e-26, &
               1.47608785e-26, 1.32199691e-26, 1.20070960e-26, 1.09378177e-26, &
               1.00031730e-26, 9.62434001e-27, 1.05063954e-26, 1.27267143e-26, &
               1.45923057e-26, 1.36746707e-26, 1.03466970e-26, 6.97647829e-27, &
               4.63141039e-27, 3.19031994e-27, 2.33373613e-27, 1.81589079e-27, &
               1.48446917e-27, 1.26611478e-27, 1.12617468e-27, 1.03625148e-27, &
               9.61400595e-28, 8.79016231e-28, 7.82612130e-28, 6.73762960e-28, &
               5.59717956e-28, 4.53010243e-28, 3.65712196e-28, 3.00958686e-28, &
               2.54011502e-28, 2.18102277e-28, 1.88736437e-28, 1.63817539e-28, &
               1.42283147e-28, 1.23631916e-28, 1.07526003e-28, 9.36797928e-29, &
               8.18565660e-29, 7.18152734e-29, 6.32523238e-29, 5.59513985e-29, &
               4.96614048e-29, 4.42518826e-29, 3.95487628e-29, 3.54690294e-29, &
               3.18953930e-29, 2.87720933e-29, 2.60186750e-29, 2.36011522e-29, &
               2.14717806e-29, 1.95905217e-29, 1.79287981e-29, 1.64562262e-29, &
               1.51489425e-29, 1.39876064e-29, 1.29496850e-29, 1.18665438e-29, &
               1.10240474e-29, 1.02643099e-29, 9.57780996e-30, 8.95465151e-30, &
               8.38950190e-30, 7.87283711e-30, 7.40136507e-30, 6.96804279e-30, & 
               6.56945323e-30 /

  data f_335 / 2.46882661e-32, 1.89476632e-31, 1.13216502e-30, 4.89532008e-30, & 
               1.32745970e-29, 2.25390335e-29, 3.00511672e-29, 3.96035934e-29, &
               5.77977656e-29, 8.58600736e-29, 1.14083000e-28, 1.48644411e-28, &
               2.15788823e-28, 3.51628877e-28, 6.12200698e-28, 1.08184987e-27, &
               1.85590697e-27, 2.91679107e-27, 3.94405396e-27, 4.63610680e-27, &
               5.13824456e-27, 5.66602209e-27, 6.30009232e-27, 7.03422868e-27, &
               7.77973918e-27, 8.32371831e-27, 8.56724316e-27, 8.62601374e-27, &
               8.13308844e-27, 6.53188216e-27, 4.55197029e-27, 3.57590087e-27, &
               3.59571707e-27, 4.03502770e-27, 4.54366411e-27, 4.96914990e-27, &
               5.24601170e-27, 5.39979250e-27, 5.43023669e-27, 5.26235042e-27, &
               4.91585495e-27, 4.52628362e-27, 4.13385020e-27, 3.67538967e-27, &
               3.39939742e-27, 3.81284533e-27, 5.02332701e-27, 6.19438602e-27, &
               6.49613071e-27, 6.04010475e-27, 5.24664275e-27, 4.37225997e-27, &
               3.52957182e-27, 2.76212276e-27, 2.08473158e-27, 1.50850518e-27, &
               1.04602472e-27, 7.13091243e-28, 5.34289645e-28, 5.21079581e-28, &
               6.22246365e-28, 6.99555864e-28, 6.29665489e-28, 4.45077026e-28, &
               2.67046793e-28, 1.52774686e-28, 9.18061770e-29, 6.09116074e-29, &
               4.48562572e-29, 3.59463696e-29, 3.05820218e-29, 2.70766652e-29, &
               2.46144034e-29, 2.27758450e-29, 2.13331183e-29, 2.01537836e-29, &
               1.91566180e-29, 1.82893912e-29, 1.75167748e-29, 1.68136168e-29, &
               1.61615595e-29, 1.55481846e-29, 1.49643236e-29, 1.44046656e-29, &
               1.38657085e-29, 1.33459068e-29, 1.28447380e-29, 1.23615682e-29, &
               1.18963296e-29, 1.14478976e-29, 1.10146637e-29, 1.04039479e-29, &
               9.98611410e-30, 9.58205147e-30, 9.19202009e-30, 8.81551313e-30, &
               8.45252127e-30, 8.10224764e-30, 7.76469090e-30, 7.43954323e-30, &
               7.12653873e-30 /

  data f_1354 / 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, &
                0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, &
                0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, &
                0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, &
                0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, &
                0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, &
                0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, &
                0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, &
                0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, &
                0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, &
                0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 2.8306229e-43, &
                6.2249742e-40, 5.2502353e-37, 1.5532066e-34, 1.6648678e-32, &
                7.8517756e-31, 2.0530806e-29, 3.4992089e-28, 4.2820552e-27, &
                3.9942179e-26, 2.9558137e-25, 1.7773391e-24, 8.8169698e-24, &
                3.6290640e-23, 1.2338631e-22, 3.4156004e-22, 7.5194933e-22, &
                1.2748505e-21, 1.6059518e-21, 1.4685663e-21, 9.9275103e-22, &
                5.3269078e-22, 2.4902077e-22, 1.0922949e-22, 4.7030177e-23, &
                2.0328035e-23, 8.9087640e-24, 3.9651675e-24, 1.7899798e-24, &
                8.1571408e-25, 3.7315855e-25, 1.7037092e-25, 7.7065973e-26, &
                3.4425015e-26, 1.5093498e-26, 6.4718403e-27, 2.7138098e-27, &
                1.1132269e-27, 4.4855265e-28, 1.7830170e-28, 7.0251280e-29, &
                2.7573307e-29, 1.0824557e-29, 4.2623914e-30, 1.6892384e-30, &
                6.7457206e-31, 2.7204369e-31, 1.1077821e-31, 4.5605646e-32, &
                1.8963764e-32, 7.9683214e-33, 3.3808639e-33, 1.4484216e-33, &
                6.2624282e-34, 2.7303008e-34, 1.1997758e-34, 5.3099278e-35, &
                2.3657412e-35 /


  data n_iris / 41 /

  data t_iris / 4.        , 4.1       , 4.2       , 4.3       , 4.40000001, & 
                4.50000001, 4.60000001, 4.70000001, 4.80000001, 4.90000001, & 
                5.00000001, 5.10000002, 5.20000002, 5.30000002, 5.40000002, & 
                5.50000002, 5.60000002, 5.70000003, 5.80000003, 5.90000003, & 
                6.00000003, 6.10000003, 6.20000003, 6.30000003, 6.40000004, & 
                6.50000004, 6.60000004, 6.70000004, 6.80000004, 6.90000004, &
                7.00000004, 7.10000005, 7.20000005, 7.30000005, 7.40000005, & 
                7.50000005, 7.60000005, 7.70000006, 7.80000006, 7.90000006, & 
                8.00000006 /

  data f_1394 / 0.00000000e+00, 1.93533655e-40, 7.15981215e-36, 2.04686128e-32, &
                5.72640405e-30, 3.23092896e-28, 6.85244696e-27, 7.55682283e-26, &
                4.67101473e-25, 9.55142072e-25, 4.33380741e-25, 1.45387404e-25, &
                5.81942295e-26, 3.07693806e-26, 2.01894530e-26, 1.18998796e-26, &
                4.49471491e-27, 9.76143303e-28, 1.29855510e-28, 1.11544509e-29, &
                6.23585371e-31, 2.22202348e-32, 4.31947134e-34, 3.48537142e-36, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00 /

  data f_1403 / 0.00000000e+00, 1.01832266e-40, 3.72640318e-36, 1.05607441e-32, &
                2.93403467e-30, 1.64622059e-28, 3.47584665e-27, 3.81938141e-26, &
                2.35407492e-25, 4.80282085e-25, 2.17539597e-25, 7.28815298e-26, &
                2.91432216e-26, 1.53976673e-26, 1.00977912e-26, 5.94944552e-27, &
                2.24652900e-27, 4.87783688e-28, 6.48775540e-29, 5.57200542e-30, &
                3.11455903e-31, 1.10968031e-32, 2.15695927e-34, 1.74034756e-36, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00 /

  data f_1338 / 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                5.59703085e-44, 5.47525395e-39, 3.07170716e-35, 1.75094037e-32, &
                1.63610834e-30, 4.14452085e-29, 3.85033136e-28, 1.42858725e-27, &
                2.46996740e-27, 2.26046588e-27, 1.11629672e-27, 1.89954890e-28, &
                1.25432742e-29, 8.43309728e-31, 7.46271327e-32, 8.88970918e-33, &
                1.45429938e-33, 3.22420807e-34, 8.23981786e-35, 1.91819327e-35, &
                3.38071036e-36, 4.41752604e-37, 5.10135232e-38, 6.09012693e-39, &
                7.95438805e-40, 1.13228114e-40, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00 /

  data f_1343 / 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                1.08271681e-43, 1.05949255e-38, 5.94819205e-35, 3.39744329e-32, &
                3.18273115e-30, 8.07614028e-29, 7.51056131e-28, 2.78967626e-27, &
                4.82884250e-27, 4.42336475e-27, 2.18477883e-27, 3.71675045e-28, &
                2.45261933e-29, 1.64744066e-30, 1.45644306e-31, 1.73324716e-32, &
                2.83312322e-33, 6.27677953e-34, 1.60323617e-34, 3.73066904e-35, &
                6.57279875e-36, 8.58607949e-37, 9.91269460e-38, 1.18313870e-38, &
                1.54500690e-39, 2.19888719e-40, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00 /

  data f_1397 / 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                4.34836004e-39, 4.96426171e-35, 5.05760892e-32, 7.50295255e-30, &
                2.40254580e-28, 2.56102568e-27, 1.18296949e-26, 2.51995178e-26, &
                2.81613382e-26, 1.82076107e-26, 6.79263935e-27, 9.21054630e-28, &
                5.05581190e-29, 2.92195181e-30, 2.27430754e-31, 2.41469773e-32, &
                3.54721568e-33, 7.09608467e-34, 1.64318504e-34, 3.48183668e-35, &
                5.61266273e-36, 6.73902907e-37, 7.18283028e-38, 7.94870608e-39, &
                9.66351240e-40, 1.28547309e-40, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00 /

  data f_1400 / 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                1.18177684e-38, 1.32357800e-34, 1.32594042e-31, 1.93412102e-29, &
                6.08566478e-28, 6.38519503e-27, 2.91279887e-26, 6.14925983e-26, &
                6.81469149e-26, 4.36778608e-26, 1.61396980e-26, 2.16662723e-27, &
                1.17812734e-28, 6.74629466e-30, 5.20391081e-31, 5.47815214e-32, &
                7.98487080e-33, 1.58648584e-33, 3.65265925e-34, 7.69992787e-35, &
                1.23533009e-35, 1.47682399e-36, 1.56786975e-37, 1.72878585e-38, &
                2.09478339e-39, 2.77804735e-40, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00 /

  data f_1401 / 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                6.42974220e-38, 7.29646385e-34, 7.39513422e-31, 1.09062434e-28, &
                3.47019351e-27, 3.67576403e-26, 1.68774764e-25, 3.58044703e-25, &
                3.99578132e-25, 2.58575560e-25, 9.66241099e-26, 1.31260070e-26, &
                7.22460537e-28, 4.19238792e-29, 3.28179891e-30, 3.51001129e-31, &
                5.20153456e-32, 1.05069228e-32, 2.45761590e-33, 5.25880927e-34, &
                8.55348853e-35, 1.03532674e-35, 1.11146250e-36, 1.23776496e-37, &
                1.51308003e-38, 2.02228439e-39, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00 /

  data f_1405 / 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                3.34149090e-38, 3.81477964e-34, 3.88651216e-31, 5.76563288e-29, &
                1.84623280e-27, 1.96801643e-26, 9.09051189e-26, 1.93645346e-25, &
                2.16405473e-25, 1.39916266e-25, 5.21980650e-26, 7.07786506e-27, &
                3.88516429e-28, 2.24540000e-29, 1.74772309e-30, 1.85562180e-31, &
                2.72595021e-32, 5.45321888e-33, 1.26277048e-33, 2.67577720e-34, &
                4.31334068e-35, 5.17898894e-36, 5.52008339e-37, 6.10869422e-38, &
                7.42657248e-39, 9.87910170e-40, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00 /

  data f_1349 / 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 9.85494094e-39, &
                2.34992740e-35, 1.00061749e-32, 1.14282258e-30, 4.54749253e-29, &
                6.94382350e-28, 3.76191229e-27, 5.97678720e-27, 2.05294162e-27, &
                1.52103599e-28, 6.99132213e-30, 3.64304655e-31, 2.21740605e-32, &
                1.40590849e-33, 7.57992378e-35, 2.58055152e-36, 3.91187145e-38, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00 /

  data f_1351 / 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, &
                0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.09503647e-39, &
                5.47214550e-36, 2.42433983e-33, 2.75295034e-31, 1.21929718e-29, &
                2.48392125e-28, 2.33268145e-27, 8.68623633e-27, 1.00166284e-26, &
                3.63126633e-27, 7.45174807e-28, 1.38224064e-28, 2.69270994e-29, &
                5.53314977e-30, 1.15313092e-30, 2.34195788e-31, 4.48242942e-32, &
                7.94976380e-33 /

  contains

    subroutine get_line_info(ion,charge,mass,logTe,line_center,spatial_rsl,spectral_rsl)
      ! get information of the spectral line
      use mod_global_parameters

      integer :: mass
      character(len=30) :: ion,charge
      double precision :: logTe
      double precision :: line_center
      double precision :: spatial_rsl,spectral_rsl

      select case(wavelength)
        case(304)
          ion='He'
          charge='II'
          mass=4
          logTe=4.7
          line_center=303.8
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(171)
          ion='Fe'
          charge='IX'
          mass=56
          logTe=5.8
          line_center=171.1
          spatial_rsl=0.6
          spectral_rsl=0.2 
 
        case(193)
          ion='Fe'
          charge='XXIV'
          mass=56
          logTe=7.3
          line_center=193.5
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(211)
          ion='Fe'
          charge='XIV'
          mass=56
          logTe=6.3
          line_center=211.3
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(335)
          ion='Fe'
          charge='XVI'
          mass=56
          logTe=6.4
          line_center=335.4
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(94)
          ion='Fe'
          charge='XVIII'
          mass=56
          logTe=6.8
          line_center=93.9
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(131)
          ion='Fe'
          charge='XXI'
          mass=56
          logTe=7.0
          line_center=131.0
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(1354)
          ion='Fe'
          charge='XXI'
          mass=56
          logTe=7.0
          line_center=1354.1
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1394)
          ion='Si'
          charge='IV'
          mass=28
          logTe=4.8
          line_center=1393.8
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1403)
          ion='Si'
          charge='IV'
          mass=28
          logTe=4.8
          line_center=1402.8
          spatial_rsl=0.33
          spectral_rsl=0.026
  
        case(1338)
          ion='O'
          charge='IV'
          mass=16
          logTe=0.0
          line_center=1338.5
          spatial_rsl=0.33
          spectral_rsl=0.026
 
        case(1343)
          ion='O'
          charge='IV'
          mass=16
          logTe=0.0
          line_center=1343.0
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1397)
          ion='O'
          charge='IV'
          mass=16
          logTe=0.0
          line_center=1397.2
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1400)
          ion='O'
          charge='IV'
          mass=16
          logTe=5.2
          line_center=1399.8
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1401)
          ion='O'
          charge='IV'
          mass=16
          logTe=5.2
          line_center=1401.2
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1405)
          ion='O'
          charge='IV'
          mass=16
          logTe=0.0
          line_center=1404.8
          spatial_rsl=0.33
          spectral_rsl=0.026
  
        case(1349)
          ion='Fe'
          charge='XII'
          mass=56
          logTe=6.2
          line_center=1349.2
          spatial_rsl=0.33
          spectral_rsl=0.026
  
        case(1351)
          ion='Fe'
          charge='XXI'
          mass=56
          logTe=7.0
          line_center=1354.1
          spatial_rsl=0.33
          spectral_rsl=0.026

        case default
          call mpistop("No information about this line")

      end select

    end subroutine get_line_info
    
    subroutine get_EUV(wl,ixI^L,ixO^L,w,x,flux)
      ! calculate the local emission intensity of given EUV line
      ! wavelength is the wave length of the emission line
      ! unit [DN cm^-5 s^-1]
      use mod_global_parameters

      integer :: wl
      integer, intent(in) :: ixI^L, ixO^L
      double precision, intent(in) :: x(ixI^S,1:ndim)
      double precision :: w(ixI^S,1:nw)
      double precision :: flux(ixI^S)

      integer :: n_table
      double precision, allocatable :: t_table(:),f_table(:)

      integer :: ix^D,iTt
      double precision :: pth(ixI^S),Te(ixI^S),Ne(ixI^S)
      double precision :: logT,logGT

      ! selecting emission table 
      select case(wl)

      case(94)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_94(1:n_aia)

      case(131)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_131(1:n_aia)

      case(171)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_171(1:n_aia)

      case(193)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_193(1:n_aia)

      case(211)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_211(1:n_aia)

      case(304)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_304(1:n_aia)

      case(335)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_335(1:n_aia)

      case(1354)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_1354(1:n_aia)

      case(1394)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1394(1:n_iris)

      case(1403)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1403(1:n_iris)

      case(1338)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1338(1:n_iris)

      case(1343)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1343(1:n_iris)

      case(1397)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1397(1:n_iris)

      case(1400)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1400(1:n_iris)

      case(1401)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1401(1:n_iris)

      case(1405)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1405(1:n_iris)

      case(1349)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1349(1:n_iris)

      case(1351)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1351(1:n_iris)

      case default
        call mpistop("This wavelength is unknown")

      end select


      call mhd_get_pthermal(w,x,ixI^L,ixO^L,pth)
      Te(ixO^S)=pth(ixO^S)/w(ixO^S,rho_)*unit_temperature
      Ne(ixO^S)=w(ixO^S,rho_)*unit_numberdensity
      flux(ixO^S)=Ne(ixO^S)**2

      {do ix^DB=ixOmin^DB,ixOmax^DB\}
        logT=log10(Te(ix^D))
        if (logT>=t_table(1) .and. logT<=t_table(n_table)) then
          do iTt=1,n_table-1
            if (logT>=t_table(iTt) .and. logT<t_table(iTt+1)) then
              logGT=log10(f_table(iTt))*(logT-t_table(iTt+1))/(t_table(iTt)-t_table(iTt+1))+&
                    log10(f_table(iTt+1))*(logT-t_table(iTt))/(t_table(iTt+1)-t_table(iTt))
            endif
          enddo
          flux(ix^D)=flux(ix^D)*(10**(logGT))
        else
          flux(ix^D)=0.0d0
        endif
      {enddo\}

      deallocate(t_table,f_table)

    end subroutine get_EUV

    subroutine get_SXR(ixI^L,ixO^L,w,x,flux,El,Eu)
      !synthesize thermal SXR from El keV to Eu keV
      use mod_global_parameters

      integer, intent(in)          :: ixI^L,ixO^L
      double precision, intent(in) :: x(ixI^S,1:ndim)
      double precision             :: w(ixI^S,nw)
      double precision             :: flux(ixI^S)
      integer                      :: El,Eu

      integer :: ix^D,ixO^D

      integer :: iE,numE
      double precision :: I0,kb,keV,dE,Ei
      double precision :: pth(ixI^S),Te(ixI^S),kbT(ixI^S)
      double precision :: Ne(ixI^S),gff(ixI^S),fi(ixI^S)
      double precision :: EM(ixI^S)

      I0=1.07d-42     ! [cm^-2 s^-1 keV^-1]
      kb=1.38d-23
      keV=1.602d-16

      dE=0.1
      numE=floor((Eu-El)/dE)

      call mhd_get_pthermal(w,x,ixI^L,ixO^L,pth)
      Te(ixO^S)=pth(ixO^S)/w(ixO^S,rho_)*unit_temperature
      Ne(ixO^S)=w(ixO^S,rho_)*unit_numberdensity
      kbT(ixO^S)=kb*Te(ixO^S)*unit_temperature/keV
      flux(ixO^S)=0.0d0
      EM(ixO^S)=(I0*(Ne(ixO^S))**2)

      do iE=0,numE-1
        Ei=dE*iE+El
        gff(ixO^S)=1
        {do ix^DB=ixOmin^DB,ixOmax^DB\}
          if (kbT(ix^D)<Ei) then
            gff(ix^D)=(kbT(ix^D)/Ei)**0.4
          endif
        {enddo\}
        fi(ixO^S)=(EM(ixO^S)*gff(ixO^S))* &
                  exp(-Ei/(kbT(ixO^S)))/(Ei*sqrt(kbT(ixO^S)))
        flux(ixO^S)=flux(ixO^S)+fi(ixO^S)*dE
      enddo

    end subroutine get_SXR


  {^IFTHREED
    subroutine get_EUV_image(qunit)
      ! integrate emission flux along line of sight (LOS) 
      ! in a 3D simulation box and get a 2D EUV image
      ! wavelength : wave length of the EUV line
      ! dirc : direction of LOS. 1 -> -x; 2 -> -y; 3 -> -z
      ! unit [DN cm^-4 s^-1]

      use mod_global_parameters

      integer, intent(in) :: qunit

      double precision :: dx^D
      integer :: numX^D,ix^D
      double precision, allocatable :: xI(:,:,:),EUV(:,:),EUVs(:,:)
      double precision, allocatable :: Dpl(:,:),Dpls(:,:),wI(:,:,:)
      double precision :: dxI^D
      integer :: numXI1,numXI2,numSI,numWI
      double precision :: xI^L

      integer :: iigrid,igrid,j

      double precision, allocatable :: xO(:,:,:),wO(:,:,:)
      double precision :: dxO,rx1,rx2,area,sumEUV,sumDpl
      integer :: numXO1,numXO2,numWO
      double precision :: xOc^L,xc^L
      integer :: ixO1,ixO2,ix^L

      integer :: mass
      double precision :: logTe
      character (30) :: ion,charge
      double precision :: lineCent
      double precision :: spaceRsl,wlRsl

      double precision :: unitv,arcsec
      character(20) :: datatype

      datatype='image'

      unitv=unit_velocity/1.0e5  ! km/s
      arcsec=7.0d7/unit_length


      ! prepare for integration based on LOS direction
      {dx^D=dx(^D,refine_max_level) \}
      {numX^D=floor((xprobmax^D-xprobmin^D)/dx^D) \}

      select case(direction_LOS)

      case (1)
        dxI1=dx2
        dxI2=dx3
        numXI1=numX2
        numXI2=numX3
        xImin1=xprobmin2
        xImax1=xprobmax2
        xImin2=xprobmin3
        xImax2=xprobmax3

      case (2)
        dxI1=dx3
        dxI2=dx1
        numXI1=numX3
        numXI2=numX1
        xImin1=xprobmin3
        xImax1=xprobmax3
        xImin2=xprobmin1
        xImax2=xprobmax1
        
      case (3)
        dxI1=dx1
        dxI2=dx2
        numXI1=numX1
        numXI2=numX2
        xImin1=xprobmin1
        xImax1=xprobmax1
        xImin2=xprobmin2
        xImax2=xprobmax2

      end select


      numWI=2

      ! initialize image
      allocate(xI(numXI1,numXI2,2),wI(numXI1,numXI2,numWI))
      allocate(EUVs(numXI1,numXI2),EUV(numXI1,numXI2))
      allocate(Dpl(numXI1,numXI2),Dpls(numXI1,numXI2))

      do ix1=1,numXI1
        do ix2=1,numXI2
          xI(ix1,ix2,1)=xImin1+dxI1*(ix1-0.5)
          xI(ix1,ix2,2)=xImin2+dxI2*(ix2-0.5)
        enddo
      enddo


      ! integrate flux and get cell center flux for image
      EUVs=0.0d0
      EUV=0.0d0     
      Dpl=0.d0
      Dpls=0.d0 
      do iigrid=1,igridstail; igrid=igrids(iigrid);
        call integrate_EUV(igrid,xI,EUVs,Dpls,numXI1,numXI2,dxI1,dxI2)
      enddo

      numSI=numXI1*numXI2
      call MPI_ALLREDUCE(EUVs,EUV,numSI,MPI_DOUBLE_PRECISION, &
                       MPI_SUM,icomm,ierrmpi)
      call MPI_ALLREDUCE(Dpls,Dpl,numSI,MPI_DOUBLE_PRECISION, &
                       MPI_SUM,icomm,ierrmpi)

      do ix1=1,numXI1
        do ix2=1,numXI2
          if (EUV(ix1,ix2)/=0) then
            Dpl(ix1,ix2)=-(Dpl(ix1,ix2)/EUV(ix1,ix2))*unitv
          else
            Dpl(ix1,ix2)=0.d0
          endif
          wI(ix1,ix2,1)=EUV(ix1,ix2)
          wI(ix1,ix2,2)=Dpl(ix1,ix2)
        enddo
      enddo


      ! change resolution
      call get_line_info(ion,charge,mass,logTe,lineCent,spaceRsl,wlRsl)
      dxO=spaceRsl*arcsec
      numXO1=floor((xImax1-xImin1)/2.d0/dxO)*2
      numXO2=floor((xImax2-xImin2)/2.d0/dxO)*2
      numWO=numWI

      allocate(xO(numXO1,numXO2,numWO),wO(numXO1,numXO2,numWO))        

      if (resolution_euv=='instrument') then     
        wO=0.d0
   
        ! new cells with observational resolution
        do ixO1=1,numXO1
          do ixO2=1,numXO2
            xO(ixO1,ixO2,1)=(ixO1-numXO1/2-0.5d0)*dxO+(xImax1+xImin1)/2.d0
            xO(ixO1,ixO2,2)=(ixO2-numXO2/2-0.5d0)*dxO+(xImax2+xImin2)/2.d0

            xOcmin1=xO(ixO1,ixO2,1)-0.5d0*dxO
            xOcmin2=xO(ixO1,ixO2,2)-0.5d0*dxO
            xOcmax1=xO(ixO1,ixO2,1)+0.5d0*dxO
            xOcmax2=xO(ixO1,ixO2,2)+0.5d0*dxO
            ixmin1=floor((xOcmin1-xImin1)/dxI1)+1
            ixmin2=floor((xOcmin2-xImin2)/dxI2)+1
            ixmax1=ceiling((xOcmax1-xImin1)/dxI1)
            ixmax2=ceiling((xOcmax2-xImin2)/dxI2)

            area=0.d0
            sumEUV=0.d0
            sumDpl=0.d0
            !#
            do ix1=ixmin1,ixmax1
              do ix2=ixmin2,ixmax2
                rx1=1.d0
                rx2=1.d0
                xcmin1=xI(ix1,ix2,1)-0.5d0*dxI1
                xcmin2=xI(ix1,ix2,2)-0.5d0*dxI2
                xcmax1=xI(ix1,ix2,1)+0.5d0*dxI1
                xcmax2=xI(ix1,ix2,2)+0.5d0*dxI2

                if (xcmin1<xOcmin1) rx1=1.d0-(xOcmin1-xcmin1)/dxI1
                if (xcmin2<xOcmin2) rx2=1.d0-(xOcmin2-xcmin2)/dxI2
                if (xcmax1>xOcmax1) rx1=1.d0-(xcmax1-xOcmax1)/dxI1
                if (xcmax2>xOcmax2) rx2=1.d0-(xcmax2-xOcmax2)/dxI2

                area=area+rx1*rx2
                sumEUV=sumEUV+EUV(ix1,ix2)*rx1*rx2
                sumDpl=sumDpl+Dpl(ix1,ix2)*EUV(ix1,ix2)*rx1*rx2
              enddo
            enddo
            !#
            if (area>0) then
              wO(ixO1,ixO2,1)=sumEUV/area
              wO(ixO1,ixO2,2)=sumDpl/sumEUV
            endif

          enddo
        enddo

      endif


      ! output data
      if (resolution_euv=='instrument') then     
        call output_data(qunit,xO,dxO,dxO,wO,numXO1,numXO2,numWO,datatype)
      else
        call output_data(qunit,xI,dxI1,dxI2,wI,numXI1,numXI2,numWI,datatype)
      endif


      deallocate(xO,wO,xI,wI)
      deallocate(EUV,EUVs,Dpl,Dpls)

    end subroutine get_EUV_image

    subroutine integrate_EUV(igrid,xI,EUV,Dpl,numXI1,numXI2,dxI1,dxI2)
      use mod_global_parameters
      use mod_usr_methods

      integer :: igrid,numXI1,numXI2
      double precision :: xI(numXI1,numXI2,2),EUV(numXI1,numXI2)
      double precision :: Dpl(numXI1,numXI2)
      double precision :: dxI1,dxI2

      integer :: ixO^L,ixO^D,ixI^L,ix^D,j
      double precision :: dxb^D,xb^L,xd^D
      double precision, allocatable :: flux(:^D&),v(:^D&)
      double precision :: EUVt,Fvt,xc^L

      integer :: ixP^L,ixP^D


      ^D&ixOmin^D=ixmlo^D\
      ^D&ixOmax^D=ixmhi^D\
      ^D&ixImin^D=ixglo^D\
      ^D&ixImax^D=ixghi^D\
      
      ^D&dxb^D=rnode(rpdx^D_,igrid)\
      ^D&xbmin^D=rnode(rpxmin^D_,igrid)\
      ^D&xbmax^D=rnode(rpxmax^D_,igrid)\

      allocate(flux(ixI^S),v(ixI^S))

      ! get local EUV flux and velocity
      call get_EUV(wavelength,ixI^L,ixO^L,ps(igrid)%w,ps(igrid)%x,flux)
      v(ixO^S)=ps(igrid)%w(ixO^S,mom(direction_LOS))/ps(igrid)%w(ixO^S,rho_)

      ! integrate for different direction
      select case(direction_LOS)

      case(1)
        do ix2=ixOmin2,ixOmax2
          do ix3=ixOmin3,ixOmax3
            EUVt=0.d0
            Fvt=0.d0
            do ix1=ixOmin1,ixOmax1
              EUVt=EUVt+flux(ix^D)*dxb1*unit_length
              Fvt=Fvt+flux(ix^D)*dxb1*unit_length*v(ix^D)
            enddo

            ! boundaries of the column along LOS
            ix1=ixOmin1
            {xcmin^D=ps(igrid)%x(ix^DD,^D)-0.5d0*dxb^D\}
            {xcmax^D=ps(igrid)%x(ix^DD,^D)+0.5d0*dxb^D\}

            ! integrate flux inside this column
            ixPmin1=max(floor((xcmin2-xI(1,1,1))/dxI1)+1,1)
            ixPmax1=floor((xcmax2-xI(1,1,1))/dxI1)
            ixPmin2=max(floor((xcmin3-xI(1,1,2))/dxI2)+1,1)
            ixPmax2=floor((xcmax3-xI(1,1,2))/dxI2)

            EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+EUVt
            Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+Fvt
          enddo
        enddo


      case(2)
        do ix3=ixOmin3,ixOmax3
          do ix1=ixOmin1,ixOmax1
            EUVt=0.d0
            Fvt=0.d0
            do ix2=ixOmin2,ixOmax2
              EUVt=EUVt+flux(ix^D)*dxb2*unit_length
              Fvt=Fvt+flux(ix^D)*dxb2*unit_length*v(ix^D)
            enddo

            ! boundaries of the column along LOS
            ix2=ixOmin2
            {xcmin^D=ps(igrid)%x(ix^DD,^D)-0.5d0*dxb^D\}
            {xcmax^D=ps(igrid)%x(ix^DD,^D)+0.5d0*dxb^D\}

            ! integrate flux inside this column
            ixPmin1=max(floor((xcmin3-xI(1,1,1))/dxI1)+1,1)
            ixPmax1=floor((xcmax3-xI(1,1,1))/dxI1)
            ixPmin2=max(floor((xcmin1-xI(1,1,2))/dxI2)+1,1)
            ixPmax2=floor((xcmax1-xI(1,1,2))/dxI2)

            EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+EUVt
            Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+Fvt
          enddo
        enddo


      case(3)
        do ix1=ixOmin1,ixOmax1
          do ix2=ixOmin2,ixOmax2
            EUVt=0.d0
            Fvt=0.d0
            do ix3=ixOmin3,ixOmax3
              EUVt=EUVt+flux(ix^D)*(dxb3*unit_length)
              Fvt=Fvt+flux(ix^D)*dxb3*unit_length*v(ix^D)
            enddo

            ! boundaries of the column along LOS
            ix3=ixOmin3
            {xcmin^D=ps(igrid)%x(ix^DD,^D)-0.5d0*dxb^D\}
            {xcmax^D=ps(igrid)%x(ix^DD,^D)+0.5d0*dxb^D\}

            ! integrate flux inside this column
            ixPmin1=max(floor((xcmin1-xI(1,1,1))/dxI1)+1,1)
            ixPmax1=floor((xcmax1-xI(1,1,1))/dxI1)
            ixPmin2=max(floor((xcmin2-xI(1,1,2))/dxI2)+1,1)
            ixPmax2=floor((xcmax2-xI(1,1,2))/dxI2)

            EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+EUVt
            Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+Fvt

          enddo
        enddo

      end select

      deallocate(flux,v)

    end subroutine integrate_EUV

    subroutine output_data(qunit,xO,dxO1,dxO2,wO,nXO1,nXO2,nWO,datatype)
      ! change the format of data and write data

      use mod_global_parameters
      use mod_usr_methods

      integer :: qunit,nXO1,nXO2,nWO
      double precision :: dxO1,dxO2
      double precision :: xO(nXO1,nXO2,2)
      double precision :: wO(nXO1,nXO2,nWO)
      character(20) :: datatype

      integer :: nPiece,nP1,nP2,nC1,nC2,nWC
      integer :: piece_nmax1,piece_nmax2,ix1,ix2,j,ipc,ixc1,ixc2
      double precision, allocatable :: xC(:,:,:,:),wC(:,:,:,:)

      ! how many cells in each grid
      if (datatype=='image') then
        select case(direction_LOS)
          case(1)
            piece_nmax1=block_nx2
            piece_nmax2=block_nx3
          case(2)
            piece_nmax1=block_nx3
            piece_nmax2=block_nx1
          case(3)
            piece_nmax1=block_nx1
            piece_nmax2=block_nx2
        end select
      else
        select case(direction_slit)
          case(1)
            piece_nmax2=block_nx1
          case(2)
            piece_nmax2=block_nx2
          case(3)
            piece_nmax2=block_nx3
          end select
          piece_nmax1=piece_nmax2
      endif


      LOOPN1: do j=piece_nmax1,1,-1
        if (mod(nXO1,j)==0) then
          nC1=j
          exit LOOPN1
        endif
      enddo LOOPN1

      LOOPN2: do j=piece_nmax2,1,-1
        if (mod(nXO2,j)==0) then
          nC2=j
          exit LOOPN2
        endif
      enddo LOOPN2


      ! how many grids
      nP1=nXO1/nC1
      nP2=nXO2/nC2
      nPiece=nP1*nP2
      nWC=nWO

      !print *, nWC,nWO


      ! put data into grids
      allocate(xC(nPiece,nC1,nC2,2))
      allocate(wC(nPiece,nC1,nC2,nWO))

      do ipc=1,nPiece
        do ixc1=1,nC1
          do ixc2=1,nC2
            ix1=mod(ipc-1,nP1)*nC1+ixc1
            ix2=floor(1.0*(ipc-1)/nP1)*nC2+ixc2
            xC(ipc,ixc1,ixc2,1)=xO(ix1,ix2,1)
            xC(ipc,ixc1,ixc2,2)=xO(ix1,ix2,2)
            do j=1,nWC
              wC(ipc,ixc1,ixc2,j)=wO(ix1,ix2,j)
            enddo
          enddo
        enddo
      enddo


      ! write data into vtu file
      call write_image(qunit,xC,wC,nPiece,nC1,nC2,nWC,datatype)

      deallocate(xC,wC)

    end subroutine output_data

    subroutine write_image(qunit,xC,wC,nPiece,nC1,nC2,nWC,datatype)
      ! write image data to vtu

      use mod_global_parameters
      use mod_usr_methods

      integer :: qunit
      integer :: nPiece,nC1,nC2,nWC
      double precision :: xC(nPiece,nC1,nC2,2)
      double precision :: wC(nPiece,nC1,nC2,nWC)
      character(20) :: datatype

      integer :: nP1,nP2
      double precision :: xP(nPiece,nC1+1,nC2+1,2)

      integer :: filenr
      logical :: fileopen
      character (30) :: subname,wname,vname,nameL,nameS
      character (50) :: filename
      integer :: ixC1,ixC2,ixP,ix1,ix2,j
      double precision :: dxP1,dxP2

      integer :: nc,np,icel,VTK_type

      integer :: mass
      double precision :: logTe
      character (30) :: ion,charge
      double precision :: line_center
      double precision :: spatial_rsl,spectral_rsl


      nP1=nC1+1
      nP2=nC2+1
      np=nP1*nP2
      nc=nC1*nC2

      dxP1=xC(1,2,1,1)-xC(1,1,1,1)
      dxP2=xC(1,1,2,2)-xC(1,1,1,2)

      ! cell corner location     
      do ixP=1,nPiece
        do ix1=1,nP1
          do ix2=1,nP2
            if (ix1<nP1) xP(ixP,ix1,ix2,1)=xC(ixP,ix1,1,1)-0.5d0*dxP1
            if (ix1==nP1) xP(ixP,ix1,ix2,1)=xC(ixP,ix1-1,1,1)+0.5d0*dxP2
            if (ix2<nP2) xP(ixP,ix1,ix2,2)=xC(ixP,1,ix2,2)-0.5d0*dxP1
            if (ix2==nP2) xP(ixP,ix1,ix2,2)=xC(ixP,1,ix2-1,2)+0.5d0*dxP2
          enddo
        enddo
      enddo


      ! get information of emission line
      call get_line_info(ion,charge,mass,logTe,line_center,spatial_rsl,spectral_rsl)


      if (datatype=='image') then
        ! filename for image
        write(wname,'(a,i4.4)') "Image_",wavelength
        select case(direction_LOS)
          case (1)
            write(subname,'(a,a)') trim(wname),"_xLOS_"
          case (2)
            write(subname,'(a,a)') trim(wname),"_yLOS_"
          case (3)
            write(subname,'(a,a)') trim(wname),"_zLOS_"
        end select
      else
        ! filename for spectra
        select case(direction_LOS)
          case (1)
            write(nameL,'(a)') "_xLOS_"
          case (2)
            write(nameL,'(a)') "_yLOS_"
          case (3)
            write(nameL,'(a)') "_zLOS_"
        end select

        select case(direction_slit)
          case (1)
            write(nameS,'(a)') "xSlit_"
          case (2)
            write(nameS,'(a)') "ySlit_"
          case (3)
            write(nameS,'(a)') "zSlit_"
        end select
        write(subname,'(a,i4.4,a,a)') "Spectra_",wavelength,trim(nameL),trim(nameS)
      endif


      if (mype==0) then
        inquire(qunit,opened=fileopen)
        if(.not.fileopen)then
          ! generate filename 
          filenr=snapshotini
          if (autoconvert) filenr=snapshotnext
          write(filename,'(a,a,i4.4,a)') trim(filename_euv),trim(datatype),filenr,".vtu"
          open(qunit,file=filename,status='unknown',form='formatted')
        endif

        ! generate xml header
        write(qunit,'(a)')'<?xml version="1.0"?>'
        write(qunit,'(a)',advance='no') '<VTKFile type="UnstructuredGrid"'
        write(qunit,'(a)')' version="0.1" byte_order="LittleEndian">'
        write(qunit,'(a)')'<UnstructuredGrid>'

        write(qunit,'(a)')'<FieldData>'
        write(qunit,'(2a)')'<DataArray type="Float32" Name="TIME" ',&
                           'NumberOfTuples="1" format="ascii">'
        write(qunit,*) real(global_time*time_convert_factor)
        write(qunit,'(a)')'</DataArray>'

        write(qunit,'(2a)')'<DataArray type="Float32" Name="logT" ',&
                           'NumberOfTuples="1" format="ascii">'
        write(qunit,*) real(logTe)
        write(qunit,'(a)')'</DataArray>'
        write(qunit,'(a)')'</FieldData>'


        do ixP=1,nPiece
          write(qunit,'(a,i7,a,i7,a)') &
                '<Piece NumberOfPoints="',np,'" NumberOfCells="',nc,'">'
          write(qunit,'(a)')'<CellData>'

          do j=1,nWC
            vname='Intensity'
            if (datatype=='image' .and. j==2) vname='Doppler'

            write(qunit,'(a,a,a)')&
              '<DataArray type="Float64" Name="',TRIM(vname),'" format="ascii">'
            write(qunit,'(200(1pe14.6))') ((wC(ixP,ixC1,ixC2,j),ixC1=1,nC1),ixC2=1,nC2)
            write(qunit,'(a)')'</DataArray>'
          enddo

          write(qunit,'(a)')'</CellData>'

          write(qunit,'(a)')'<Points>'
          write(qunit,'(a)')'<DataArray type="Float32" NumberOfComponents="3" format="ascii">'
          do ix2=1,nP2
            do ix1=1,nP1 
              if (datatype=='image') then
                select case(direction_LOS)
                  case(1)
                    write(qunit,'(3(1pe14.6))') 0.d0,xP(ixP,ix1,ix2,1),xP(ixP,ix1,ix2,2)
  
                  case(2)
                    write(qunit,'(3(1pe14.6))') xP(ixP,ix1,ix2,2),0.d0,xP(ixP,ix1,ix2,1)
  
                  case(3)
                    write(qunit,'(3(1pe14.6))') xP(ixP,ix1,ix2,1),xP(ixP,ix1,ix2,2),0.d0
                end select
              else
                write(qunit,'(3(1pe14.6))') xP(ixP,ix1,ix2,1),xP(ixP,ix1,ix2,2),0.d0
              endif
            enddo
          enddo
          write(qunit,'(a)')'</DataArray>'
          write(qunit,'(a)')'</Points>'

          ! connetivity part
          write(qunit,'(a)')'<Cells>'
          write(qunit,'(a)')'<DataArray type="Int32" Name="connectivity" format="ascii">'
          do ix2=1,nC2
            do ix1=1,nC1
              write(qunit,'(4(i7))') ix1-1+(ix2-1)*nP1,ix1+(ix2-1)*nP1,&
                                     ix1-1+ix2*nP1,ix1+ix2*nP1
            enddo
          enddo
          write(qunit,'(a)')'</DataArray>'

          ! offsets data array
          write(qunit,'(a)')'<DataArray type="Int32" Name="offsets" format="ascii">'
          do icel=1,nc
              write(qunit,'(i7)') icel*(2**2)
          end do
          write(qunit,'(a)')'</DataArray>'

          ! VTK cell type data array
          write(qunit,'(a)')'<DataArray type="Int32" Name="types" format="ascii">'
          ! VTK_LINE=3; VTK_PIXEL=8; VTK_VOXEL=11 -> vtk-syntax
          
          VTK_type=8        
          do icel=1,nc
             write(qunit,'(i2)') VTK_type
          enddo
          write(qunit,'(a)')'</DataArray>' 
          write(qunit,'(a)')'</Cells>'
          write(qunit,'(a)')'</Piece>'
        enddo

        write(qunit,'(a)')'</UnstructuredGrid>'
        write(qunit,'(a)')'</VTKFile>'

        close(qunit)
      endif

    end subroutine write_image

    subroutine get_EUV_spectra(qunit)
      ! wavelength -- wavelength of given EUV
      ! dircL -- direction of the light of sight
      ! dircS -- direction of the slit
      ! loc -- location of the slit
      ! teleRsl -- use (or not use) resolution of telescope
      ! output 2d data: x--wavelength; y--distance along slit
      use mod_global_parameters
      use mod_usr_methods

      integer :: qunit

      integer :: numV,numL,numSI,iv,iL
      double precision :: dv,dwL,dL,Lmin,Lmax,vmin,vmax
      double precision, allocatable :: v(:),xL(:),spectra(:,:)
      double precision, allocatable :: xI(:,:,:),wI(:,:,:)
      double precision :: xI^L,dxI1,dxI2
      integer :: ixI1,ixI2,numXI1,numXI2,numWI

      double precision :: xbmin(ndim),xbmax(ndim)
      double precision :: dx^D
      integer :: numX^D
      integer :: iigrid,igrid,j

      double precision, allocatable :: xO(:,:,:),wO(:,:,:)
      double precision :: dxO1,dxO2,rx1,rx2,area,sumEUV
      integer :: numXO1,numXO2,numWO
      double precision :: xOc^L,xc^L
      integer :: ixO1,ixO2,ix^L,ix1,ix2
      character(20) :: datatype

      integer :: mass
      double precision :: logTe
      character (30) :: ion,charge
      double precision :: lineCent
      double precision :: spaceRsl,wlRsl

      double precision :: arcsec,c

      datatype='spectra'
      arcsec=7.0d7/unit_length

      ! prepare for integration 
      {dx^D=dx(^D,refine_max_level) \}
      {numX^D=floor((xprobmax^D-xprobmin^D)/dx^D) \}
     
      select case(direction_slit)
        case (1)
          dL=dx1
          Lmin=xprobmin1
          Lmax=xprobmax1
          numL=numX1

        case (2)
          dL=dx2
          Lmin=xprobmin2
          Lmax=xprobmax2
          numL=numX2
        
        case (3)
          dL=dx3
          Lmin=xprobmin3
          Lmax=xprobmax3
          numL=numX3
      end select

      dv=2.d0   ! [km/s]
      c=const_c/1.d5  ! light speed
      numV=1024
      numXI1=numV
      numXI2=numL
      numWI=1
      
      allocate(xL(numL),v(numV),spectra(numV,numL))
      allocate(xI(numXI1,numXI2,2),wI(numXI1,numXI2,numWI))

      do iL=1,numL
        xL(iL)=Lmin+(iL-0.5)*dL
      enddo
      do iv=1,numV
        v(iv)=(iv-(numV/2.d0)-0.5d0)*dv
      enddo


      ! find slit and do integration
      spectra=0.d0
      do iigrid=1,igridstail; igrid=igrids(iigrid);
        ^D&xbmin(^D)=rnode(rpxmin^D_,igrid)\
        ^D&xbmax(^D)=rnode(rpxmax^D_,igrid)\
        do j=1,ndim
          if (j/=direction_LOS .and. j/=direction_slit .and. &
              location_slit>=xbmin(j) .and. location_slit<xbmax(j)) then
              call integrate_spectra(igrid,xL,v,spectra,numV,numL)
          endif
        enddo
      enddo

      numSI=numL*numV
      call MPI_ALLREDUCE(spectra,wI(:,:,1),numSI,MPI_DOUBLE_PRECISION, &
                       MPI_SUM,icomm,ierrmpi)

      ! fix small values
      do ixI1=1,numXI1
        do ixI2=1,numXI2
          if (wI(ixI1,ixI2,1)>0 .and. wI(ixI1,ixI2,1)<smalldouble) then
            wI(ixI1,ixI2,1)=0.d0
          endif
        enddo
      enddo


      ! Doppler velocity to wavelength
      call get_line_info(ion,charge,mass,logTe,lineCent,spaceRsl,wlRsl)
      dxI1=dv/c*lineCent
      do iv=1,numV
        xI(iv,:,1)=(1.d0+v(iv)/c)*lineCent
      enddo
      dxI2=dL
      do iL=1,numL
        xI(:,iL,2)=xL(iL)
      enddo
      xImin1=xI(1,1,1)-0.5d0*dxI1
      xImax1=xI(numV,1,1)+0.5d0*dxI1
      xImin2=xI(1,1,2)-0.5d0*dxI2
      xImax2=xI(1,numL,2)+0.5d0*dxI2
      wI=wI*c/lineCent


      ! change resolution
      dxO1=wlRsl
      dxO2=spaceRsl*arcsec
      numXO1=floor((xImax1-xImin1)/2.d0/dxO1)*2
      numXO2=floor((xImax2-xImin2)/2.d0/dxO2)*2
      numWO=numWI

      allocate(xO(numXO1,numXO2,2),wO(numXO1,numXO2,numWO))        

      if (resolution_euv=='instrument') then     
        wO=0.d0
   
        ! new cells with observational resolution
        do ixO1=1,numXO1
          do ixO2=1,numXO2
            xO(ixO1,ixO2,1)=(ixO1-numXO1/2-0.5d0)*dxO1+(xImax1+xImin1)/2.d0
            xO(ixO1,ixO2,2)=(ixO2-numXO2/2-0.5d0)*dxO2+(xImax2+xImin2)/2.d0

            xOcmin1=xO(ixO1,ixO2,1)-0.5d0*dxO1
            xOcmin2=xO(ixO1,ixO2,2)-0.5d0*dxO2
            xOcmax1=xO(ixO1,ixO2,1)+0.5d0*dxO1
            xOcmax2=xO(ixO1,ixO2,2)+0.5d0*dxO2
            ixmin1=floor((xOcmin1-xImin1)/dxI1)+1
            ixmin2=floor((xOcmin2-xImin2)/dxI2)+1
            ixmax1=ceiling((xOcmax1-xImin1)/dxI1)
            ixmax2=ceiling((xOcmax2-xImin2)/dxI2)

            area=0.d0
            sumEUV=0.d0
            !#
            do ix1=ixmin1,ixmax1
              do ix2=ixmin2,ixmax2
                rx1=1.d0
                rx2=1.d0
                xcmin1=xI(ix1,ix2,1)-0.5d0*dxI1
                xcmin2=xI(ix1,ix2,2)-0.5d0*dxI2
                xcmax1=xI(ix1,ix2,1)+0.5d0*dxI1
                xcmax2=xI(ix1,ix2,2)+0.5d0*dxI2

                if (xcmin1<xOcmin1) rx1=1.d0-(xOcmin1-xcmin1)/dxI1
                if (xcmin2<xOcmin2) rx2=1.d0-(xOcmin2-xcmin2)/dxI2
                if (xcmax1>xOcmax1) rx1=1.d0-(xcmax1-xOcmax1)/dxI1
                if (xcmax2>xOcmax2) rx2=1.d0-(xcmax2-xOcmax2)/dxI2

                area=area+rx1*rx2
                sumEUV=sumEUV+wI(ix1,ix2,1)*rx1*rx2
              enddo
            enddo
            !#
            if (area>0) then
              wO(ixO1,ixO2,1)=sumEUV/area
            endif

          enddo
        enddo

      endif
     

      ! output data
      if (resolution_euv=='instrument') then     
        call output_data(qunit,xO,dxO1,dxO2,wO,numXO1,numXO2,numWO,datatype)
      else
        call output_data(qunit,xI,dxI1,dxI2,wI,numXI1,numXI2,numWI,datatype)
      endif


      deallocate(v,xL,spectra,xI,wI,xO,wO)

    end subroutine get_EUV_spectra

    subroutine integrate_spectra(igrid,xL,v,inWL,numV,numL)
      ! get local spectra and integrate it along LOS
      use mod_global_parameters
      use mod_usr_methods

      integer :: igrid,numV,numL
      double precision :: xL(numL),v(numV),inWL(numV,numL)

      integer :: ixO^L,ixO^D,ixI^L,ix^D,i,j,k
      double precision :: dxb^D,xb^L,xd^D
      double precision, allocatable :: flux(:^D&),ve(:^D&)
      double precision, allocatable :: pth(:^D&),Te(:^D&)
      double precision, allocatable :: dpl(:^D&),vth2(:^D&)

      double precision :: unit_v,kB,mp,mi
      double precision :: inLC(numV)
      integer :: iv,ixLmin,ixLmax,ixL
      double precision :: dxL
      double precision :: xcmin^D,xcmax^D 

      integer :: ix(ndim),ixOmin(ndim),ixOmax(ndim)
      double precision :: dxb(ndim),xbmin(ndim),xbmax(ndim),xd(ndim)
      double precision :: xcmin(ndim),xcmax(ndim) 
      double precision :: vth2c,fluxc,dplc

      integer :: mass
      double precision :: logTe
      character (30) :: ion,charge
      double precision :: line_center
      double precision :: spatial_rsl,spectral_rsl

      call get_line_info(ion,charge,mass,logTe,line_center,spatial_rsl,spectral_rsl)

      unit_v=unit_velocity/1.d5   ! [km/s]
      kB=1.3807e-23
      mp=1.6726e-27
      mi=mp*mass
      dxL=xL(2)-xL(1)


      ^D&ixOmin^D=ixmlo^D\
      ^D&ixOmax^D=ixmhi^D\
      ^D&ixImin^D=ixglo^D\
      ^D&ixImax^D=ixghi^D\
      ^D&xbmin^D=rnode(rpxmin^D_,igrid)\
      ^D&xbmax^D=rnode(rpxmax^D_,igrid)\
      ^D&dxb^D=rnode(rpdx^D_,igrid)\


      allocate(flux(ixI^S),ve(ixI^S),pth(ixI^S),Te(ixI^S))
      allocate(dpl(ixI^S),vth2(ixI^S))


      ! get emission and plasma parameters
      call mhd_get_pthermal(ps(igrid)%w,ps(igrid)%x,ixI^L,ixO^L,pth)
      Te(ixO^S)=pth(ixO^S)/ps(igrid)%w(ixO^S,rho_)*unit_temperature
      call get_EUV(wavelength,ixI^L,ixO^L,ps(igrid)%w,ps(igrid)%x,flux)
      ve(ixO^S)=ps(igrid)%w(ixO^S,mom(direction_LOS))/ps(igrid)%w(ixO^S,rho_)
      dpl(ixO^S)=-ve(ixO^S)*unit_v
      vth2(ixO^S)=2*kB*Te(ixO^S)/mi/1.0e6   ! thermal width [km/s]


      ! calculate spectra for different LOS and slit directions
      ^D&ixOmin(^D)=ixmlo^D\
      ^D&ixOmax(^D)=ixmhi^D\
      ^D&xbmin(^D)=rnode(rpxmin^D_,igrid)\
      ^D&xbmax(^D)=rnode(rpxmax^D_,igrid)\
      ^D&dxb(^D)=rnode(rpdx^D_,igrid)\

      do j=1,ndim
        if (j/=direction_LOS .and. j/=direction_slit) then
          ! location of the slit
          ix(j)=floor((location_slit-xbmin(j))/dxb(j))+ixOmin(j)
        endif
      enddo

      do j=ixOmin(direction_slit),ixOmax(direction_slit)
        ! calculate along slit direction
        ix(direction_slit)=j
        inLC=0.d0

        do k=ixOmin(direction_LOS),ixOmax(direction_LOS)
          ! integrate along LOS direction 
          ix(direction_LOS)=k
          {ix^D=ix(^D)\}
          do iv=1,numV
            inLC(iv)=inLC(iv)+flux(ix^D)*(1/sqrt(dpi*vth2(ix^D)))*&
                     exp(-(v(iv)-dpl(ix^D))**2/vth2(ix^D))
          enddo
        enddo
        
        ix(direction_LOS)=ixOmin(direction_LOS)
        {ix^D=ix(^D)\}
        {xcmin(^D)=ps(igrid)%x(ix^DD,^D)-0.5d0*dxb^D\}
        {xcmax(^D)=ps(igrid)%x(ix^DD,^D)+0.5d0*dxb^D\}
        ixLmin=max(floor((xcmin(direction_slit)-xL(1))/dxL)+1,1)
        ixLmax=floor((xcmax(direction_slit)-xL(1))/dxL)
        do ixL=ixLmin,ixLmax 
          inWL(:,ixL)=inWL(:,ixL)+inLC(:)
        enddo
      enddo


      deallocate(flux,ve,pth,Te,dpl,vth2)

    end subroutine integrate_spectra
  }

end module mod_thermal_emission
